Searching 1035 files for "rootcontainer"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
   10  
   11  /* List entries shown as context around a search result */
   12: .rootContainer.compact {
   13      opacity: 0.7;
   14      transform: scale(0.6);
   ..
   24  }
   25  
   26: .rootContainer {
   27      composes: boxShadow from 'src/common-ui/colors.css';
   28      display: flex;
   ..
   63  }
   64  
   65: .rootContainerOverview {
   66      width: 800px;
   67      height: 90px;
   ..
  415  }
  416  
  417: .tweetRootContainer {
  418      height: fit-content;
  419  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
  105                  )}
  106                  <div
  107:                     className={cx(styles.rootContainer, {
  108:                         [styles.tweetRootContainer]: this.props.isSocial,
  109:                         [styles.rootContainerOverview]: this.props.isOverview,
  110                          [styles.isSidebarOpen]: this.props
  111                              .isResponsibleForSidebar,

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
    3  }
    4  
    5: .rootContainer {
    6      width: 100%;
    7      composes: boxShadow from '../../common-ui/colors.css';
    .
   15  }
   16  
   17: .rootContainer > a {
   18      text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
   19      display: flex;

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.js:
    7  
    8  const ResultItem = props => (
    9:     <div className={classNames(styles.rootContainer, styles[props.searchEngine])}>
   10          <a
   11              className={styles.root}

10 matches across 4 files


Searching 1035 files for "favicon"

/Users/oliversauter/GitHub/Memex/src/activity-logger/README.md:
   23  will be indexed.
   24  
   25: Stage 2 consists of indexing the page text, favicon, screenshot, which is far more complex and space-consuming.
   26  `page-storage` and `page-analysis` modules will be invoked in this process to extract this data from the browser tab.
   27  This is done after the user has been active on the tab for at least 10s (managed by tabs state). Can be skipped.

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/index.ts:
  189          }
  190  
  191:         if (changeInfo.favIconUrl) {
  192:             await this.tabChangeListener.handleFavIcon(tabId, changeInfo, tab)
  193          }
  194  

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/log-page-visit.ts:
    6  import analyzePage, { PageAnalyzer } from '../../page-analysis/background'
    7  
    8: import { FavIconChecker } from './types'
    9  import { SearchIndex } from 'src/search'
   10  
   ..
   13      searchIndex: SearchIndex
   14      momentLib?: typeof moment
   15:     favIconCheck?: FavIconChecker
   16      pageAnalyzer?: PageAnalyzer
   17  }
   ..
   19  export default class PageVisitLogger {
   20      private _tabManager: TabManager
   21:     private _checkFavIcon: FavIconChecker
   22      private _analyzePage: PageAnalyzer
   23      private _addPageTerms: SearchIndex['addPageTerms']
   ..
   39          this._createPage = searchIndex.addPage
   40          this._createVisit = searchIndex.addVisit
   41:         this._checkFavIcon = searchIndex.domainHasFavIcon
   42          this._moment = momentLib
   43      }
   ..
   83              }
   84  
   85:             const allowFavIcon = !(await this._checkFavIcon(tab.url))
   86              let analysisRes
   87              try {
   88                  analysisRes = await this._analyzePage({
   89                      tabId: tab.id,
   90:                     allowFavIcon,
   91                      allowScreenshot,
   92                  })
   ..
  119              analysisRes = await this._analyzePage({
  120                  tabId: tab.id,
  121:                 allowFavIcon: false,
  122                  allowScreenshot,
  123              })

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/tab-change-listeners.ts:
    9  import PageVisitLogger from './log-page-visit'
   10  import {
   11:     fetchFavIcon,
   12:     FavIconFetchError,
   13  } from '../../page-analysis/background/get-fav-icon'
   14  import { shouldLogTab, updateVisitInteractionData } from './util'
   ..
   19      LoggableTabChecker,
   20      VisitInteractionUpdater,
   21:     FavIconFetcher,
   22:     FavIconChecker,
   23:     FavIconCreator,
   24      BookmarkChecker,
   25      TabIndexer,
   ..
   46      private _checkTabLoggable: LoggableTabChecker
   47      private _updateTabVisit: VisitInteractionUpdater
   48:     private _fetchFavIcon: FavIconFetcher
   49      private _pageDOMLoaded: TabEventChecker
   50      private _tabActive: TabEventChecker
   ..
   61      private tabIndexers = new Map<
   62          number,
   63:         { favIcon: TabIndexer; page: TabIndexer }
   64      >()
   65  
   ..
   70          searchIndex: SearchIndex
   71          storageArea?: Storage.StorageArea
   72:         favIconFetch?: FavIconFetcher
   73          domLoadCheck?: TabEventChecker
   74          tabActiveCheck?: TabEventChecker
   ..
   82          this._checkTabLoggable = options.loggableTabCheck || shouldLogTab
   83          this._updateTabVisit = updateVisitInteractionData
   84:         this._fetchFavIcon = options.favIconFetch || fetchFavIcon
   85          this._pageDOMLoaded = options.domLoadCheck || whenPageDOMLoaded
   86          this._tabActive = options.tabActiveCheck || whenTabActive
   ..
   96          if (!indexers) {
   97              this.tabIndexers.set(tabId, {
   98:                 favIcon: throttle(
   99:                     tab => this._handleFavIcon(tabId, {}, tab),
  100                      TabChangeListeners.FAV_ICON_CHANGE_THRESHOLD,
  101                      { leading: false },
  ...
  116      }
  117  
  118:     handleFavIcon: TabChangeListener = (tabId, _, tab) =>
  119:         this.getOrCreateTabIndexers(tabId).favIcon(tab)
  120  
  121      handleVisitIndexing: TabChangeListener = (tabId, _, tab) =>
  ...
  230      }
  231  
  232:     private _handleFavIcon: TabChangeListener = async (tabId, _, tab) => {
  233          try {
  234              if (
  235                  (await this._checkTabLoggable(tab)) &&
  236:                 !(await this._searchIndex.domainHasFavIcon(tab.url))
  237              ) {
  238:                 const favIconDataUrl = await this._fetchFavIcon(tab.favIconUrl)
  239:                 await this._searchIndex.addFavIcon(tab.url, favIconDataUrl)
  240              }
  241          } catch (err) {
  242:             if (!(err instanceof FavIconFetchError)) {
  243                  throw err
  244              }

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/types.ts:
   46      searchIndex: SearchIndex,
   47  ) => Promise<void>
   48: export type FavIconFetcher = (url: string) => Promise<string>
   49: export type FavIconChecker = (url: string) => Promise<boolean>
   50: export type FavIconCreator = (url: string, data: string) => Promise<void>
   51  export type BookmarkChecker = (url: string) => Promise<boolean>
   52  export type PageCreator = (url: string, data: string) => Promise<void>

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/estimate-backup-size.ts:
   90      }
   91  
   92:     if (storeName === 'favIcons' && obj.favIcon != null) {
   93:         const { favIcon, ...rest } = obj
   94:         const size = JSON.stringify(rest).length + calcBlobSize(favIcon)
   95          return { bytesWithBlobs: size, bytesWithoutBlobs: size }
   96      }

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/index.test.ts:
   19              visits: { backup: true, watch: true },
   20              bookmarks: { backup: true, watch: true },
   21:             favIcons: { backup: true, watch: true },
   22              annotations: { backup: true, watch: true },
   23              annotBookmarks: { backup: true, watch: true },

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/backend/utils.ts:
   48  
   49      if (
   50:         change.collection === 'favIcons' &&
   51          change.object != null &&
   52:         change.object.favIcon != null
   53      ) {
   54          try {
   55:             change.object.favIcon = await encodeBlob(change.object.favIcon)
   56          } catch (e) {
   57              Raven.captureException(e)

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/restore/index.test.ts:
  197      it('should not restore empty objects in place of Blobs', async () => {
  198          const favCreateChange: ObjectChange = {
  199:             collection: 'favIcons',
  200              operation: 'create',
  201              objectPk: 'test.com',
  202:             object: { favIcon: {}, hostname: 'test.com' },
  203              timestamp: 0,
  204          }
  ...
  252                      collections: {
  253                          pages: { pkIndex: 'test' },
  254:                         favIcons: { pkIndex: 'test' },
  255                      },
  256                  },
  ...
  333      })
  334  
  335:     it('should correctly restore favIcon blobs', async () => {
  336          const updates = []
  337          const storageManager = {
  ...
  355          await restoreProcedure._writeChange({
  356              timestamp: 1,
  357:             collection: 'favIcons',
  358              operation: 'update',
  359              objectPk: 'bla',
  360              object: {
  361:                 favIcon: 'data:text/plain;charset=utf-8;base64,dGVzdA==',
  362              },
  363          })
  364          expect(updates).toEqual([
  365:             ['favIcons', { boo: 'bla' }, { favIcon: expect.any(Blob) }],
  366          ])
  367:         const blob = updates[0][2].favIcon
  368          expect(await encodeBlob(blob)).toEqual('test')
  369      })

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/restore/index.ts:
  286  
  287          if (
  288:             change.collection === 'favIcons' &&
  289              object != null &&
  290:             this._isBadBlob(object.favIcon)
  291          ) {
  292:             // FavIcons cannot exist without favIcon Blobs; unset operation to skip write
  293              return { ...change, object, operation: null }
  294          }
  ...
  330              typeof object[field] === 'string'
  331  
  332:         if (checkSerializedExists(['favIcons'], 'favIcon')) {
  333:             object.favIcon = this._blobFromPngString(object.favIcon)
  334          }
  335  

/Users/oliversauter/GitHub/Memex/src/bookmarks/background/index.test.ts:
   60                                          annotsCount: undefined,
   61                                          displayTime: DATA.BOOKMARK_1,
   62:                                         favIcon: undefined,
   63                                          hasBookmark: true,
   64                                          screenshot: undefined,
   ..
  141                                          annotsCount: undefined,
  142                                          displayTime: DATA.BOOKMARK_1,
  143:                                         favIcon: undefined,
  144                                          hasBookmark: true,
  145                                          screenshot: undefined,

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
   54                      <div className={styles.firstlineContainer}>
   55                          <div className={styles.title} title={this.props.title}>
   56:                             {this.props.favIcon && (
   57                                  <img
   58:                                     className={styles.favIcon}
   59:                                     src={this.props.favIcon}
   60                                  />
   61                              )}

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  221  }
  222  
  223: .favIcon {
  224      width: 20px;
  225      height: 20px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
   17      url: string
   18      title?: string
   19:     favIcon?: string
   20      nullImg?: string
   21      screenshot?: string

/Users/oliversauter/GitHub/Memex/src/connectivity-checker/background/index.ts:
    6      static DEF_CHECK_TIMEOUT = 10000
    7      static DEF_TARGET =
    8:         'https://worldbrain.io/wp-content/uploads/2019/04/cropped-logo_squared_favicon-32x32.png'
    9      static CONNECTED_EVENT = 'connected'
   10      static DISCONNECTED_EVENT = 'disconnected'

/Users/oliversauter/GitHub/Memex/src/custom-lists/background/index.test.ts:
  200                                              annotsCount: undefined,
  201                                              displayTime: expect.any(Number),
  202:                                             favIcon: undefined,
  203                                              hasBookmark: false,
  204                                              screenshot: undefined,
  ...
  293                                              annotsCount: undefined,
  294                                              displayTime: expect.any(Number),
  295:                                             favIcon: undefined,
  296                                              hasBookmark: false,
  297                                              screenshot: undefined,

/Users/oliversauter/GitHub/Memex/src/direct-linking/background/index.test.ts:
  123                                              annotsCount: 1,
  124                                              displayTime: DATA.VISIT_1,
  125:                                             favIcon: undefined,
  126                                              hasBookmark: false,
  127                                              pageId: 'lorem.com',
  ...
  203                                              annotsCount: 1,
  204                                              displayTime: DATA.VISIT_1,
  205:                                             favIcon: undefined,
  206                                              hasBookmark: false,
  207                                              pageId: 'lorem.com',
  ...
  385                                              annotsCount: 1,
  386                                              displayTime: DATA.VISIT_1,
  387:                                             favIcon: undefined,
  388                                              hasBookmark: false,
  389                                              pageId: 'lorem.com',
  ...
  500                                              annotsCount: 1,
  501                                              displayTime: DATA.VISIT_1,
  502:                                             favIcon: undefined,
  503                                              hasBookmark: false,
  504                                              pageId: 'lorem.com',

/Users/oliversauter/GitHub/Memex/src/imports/background/item-processor.ts:
   11  const fetchPageDataOpts = {
   12      includePageContent: true,
   13:     includeFavIcon: true,
   14  }
   15  
   ..
  161       */
  162      async _createPageDoc({ url }) {
  163:         const includeFavIcon = !(await this.options.searchIndex.domainHasFavIcon(
  164              url,
  165          ))
  ...
  170              opts: {
  171                  ...fetchPageDataOpts,
  172:                 includeFavIcon,
  173              },
  174          })

/Users/oliversauter/GitHub/Memex/src/options/store.js:
   55              // Filter out personal stuff from results; not really useful for our knowledge
   56              docs: overview.searchResult.docs.map(
   57:                 ({ url, title, favIcon, screenshot, ...doc }) => doc,
   58              ),
   59          },

/Users/oliversauter/GitHub/Memex/src/overview/types.ts:
   16      displayTime: number
   17      screenshot: string
   18:     favIcon: string
   19      annotsCount: number
   20      annotations: Annotation[]

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/fetch-page-data-processor.ts:
   15          const fetch = this.props.fetchPageData({
   16              url,
   17:             opts: { includePageContent: true, includeFavIcon: true },
   18          })
   19  

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/fetch-page-data.ts:
    2  
    3  import extractPageContent from 'src/page-analysis/content_script/extract-page-content'
    4: import extractFavIcon from 'src/page-analysis/content_script/extract-fav-icon'
    5  import extractPdfContent from 'src/page-analysis/content_script/extract-pdf-content'
    6  import { PageDataResult } from './types'
    .
   18      /** Denotes whether to attempt page text + metadata fetch. */
   19      includePageContent: boolean
   20:     /** Denotes whether to attempt favicon fetch. */
   21:     includeFavIcon: boolean
   22  }
   23  
   ..
   29  export const defaultOpts: FetchPageDataOpts = {
   30      includePageContent: false,
   31:     includeFavIcon: false,
   32  }
   33  
   ..
   67  
   68          /**
   69:          * @return {Promise<any>} Resolves to an object containing `content` and `favIconURI` data
   70           *  fetched from the DOM pointed at by the `url` of `fetchPageData` call.
   71           */
   ..
   78  
   79              return {
   80:                 favIconURI: opts.includeFavIcon
   81:                     ? await extractFavIcon(doc)
   82                      : undefined,
   83                  content: opts.includePageContent

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/get-fav-icon.ts:
    3  
    4  // Get a tab's fav-icon (website logo) as a data URL
    5: async function getFavIcon({ tabId }: { tabId: number }) {
    6      const tab = await browser.tabs.get(tabId)
    7  
    8:     if (tab.favIconUrl == null) {
    9          return undefined
   10      }
   11  
   12:     return fetchFavIcon(tab.favIconUrl)
   13  }
   14  
   15: export async function fetchFavIcon(url: string): Promise<string> {
   16      if (url == null) {
   17:         throw new FavIconFetchError('Cannot fetch missing URL')
   18      }
   19  
   ..
   21  
   22      if (response.status >= 400 && response.status < 600) {
   23:         throw new FavIconFetchError(response.statusText)
   24      }
   25  
   ..
   27  }
   28  
   29: export default getFavIcon
   30  
   31: export class FavIconFetchError extends Error {}
   32  

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/index.ts:
    2  import whenAllSettled from 'when-all-settled'
    3  
    4: import getFavIcon from './get-fav-icon'
    5  import makeScreenshot from './make-screenshot'
    6  import { runInTab } from 'src/util/webextensionRPC'
    .
   11      allowContent?: boolean
   12      allowScreenshot?: boolean
   13:     allowFavIcon?: boolean
   14  }) => Promise<{
   15:     favIconURI: string
   16      screenshotURI: string
   17      content: any
   ..
   25      allowContent = true,
   26      allowScreenshot = true,
   27:     allowFavIcon = true,
   28  }) => {
   29      // Wait until its DOM has loaded, in case we got invoked before that.
   ..
   38          allowContent ? extractPageContent() : Promise.resolve(),
   39          allowScreenshot ? makeScreenshot({ tabId }) : Promise.resolve(),
   40:         allowFavIcon ? getFavIcon({ tabId }) : Promise.resolve(),
   41      ]
   42  
   43      // When every task has either completed or failed, return what we got
   44:     const [content, screenshotURI, favIconURI] = await whenAllSettled(
   45          dataFetchingPromises,
   46          {
   ..
   48          },
   49      )
   50:     return { favIconURI, screenshotURI, content: content || {} }
   51  }
   52  

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/types.ts:
    4  
    5  export interface PageDataResult {
    6:     favIconURI?: string
    7      content: {
    8          canonicalUrl?: string

/Users/oliversauter/GitHub/Memex/src/page-analysis/content_script/extract-fav-icon.js:
    2  
    3  /**
    4:  * @param {Document} doc DOM to attempt to find favicon URL from.
    5:  * @returns {string?} URL pointing to the document's favicon or null.
    6   */
    7: function getFavIconURLFromDOM(doc) {
    8      const favEl = doc.querySelector('link[rel*="icon"]')
    9      return favEl && favEl.href
   ..
   11  
   12  /**
   13:  * @param {string} favIconUrl URL pointing to a favicon.
   14:  * @returns {string?} Favicon encoded as data URL.
   15   */
   16: async function getFavIcon(favIconUrl) {
   17:     if (!favIconUrl) {
   18          return
   19      }
   20  
   21      try {
   22:         const response = await fetch(favIconUrl)
   23  
   24          if (response.status >= 400 && response.status < 600) {
   ..
   34  
   35  /**
   36:  * @param {Document} doc DOM to attempt to extract favicon from.
   37:  * @returns {string?} Favicon encoded as data URL.
   38   */
   39: const extractFavIcon = (doc = document) => getFavIcon(getFavIconURLFromDOM(doc))
   40: export default extractFavIcon
   41  

/Users/oliversauter/GitHub/Memex/src/search/add.ts:
    3  import { VisitInteraction, PageAddRequest } from '.'
    4  import pipeline, { transformUrl } from './pipeline'
    5: import { Page, FavIcon } from './models'
    6  import { getPage } from './util'
    7  import { PipelineReq, DBGet } from './types'
    .
   19  }: Partial<PageAddRequest>) => {
   20      const db = await getDb()
   21:     const { favIconURI, ...pageData } = await pipeline({
   22          pageDoc,
   23          rejectNoContent,
   ..
   35      }
   36  
   37:     if (favIconURI != null) {
   38:         await new FavIcon(db, {
   39              hostname: page.hostname,
   40:             favIconURI,
   41          }).save()
   42      }
   ..
   86  }
   87  
   88: export const addFavIcon = (getDb: DBGet) => async (
   89      url: string,
   90:     favIconURI: string,
   91  ) => {
   92      const db = await getDb()
   93      const { hostname } = transformUrl(url)
   94  
   95:     return new FavIcon(db, { hostname, favIconURI })
   96          .save()
   97          .catch(initErrHandler())

/Users/oliversauter/GitHub/Memex/src/search/index.test.ts:
    1  import * as DATA from './index.test.data'
    2: import { FavIcon } from './models'
    3  import { SearchIndex } from './types'
    4  import { setupBackgroundIntegrationTest } from 'src/tests/background-integration-tests'
    .
  446              const hostname2 = 'sub.lorem.com'
  447  
  448:             await searchIndex.addFavIcon(DATA.PAGE_1.url, DATA.FAV_1)
  449:             await searchIndex.addFavIcon(DATA.PAGE_2.url, DATA.FAV_1)
  450  
  451              const fav1 = await storageManager
  452:                 .collection('favIcons')
  453:                 .findObject<FavIcon>({ hostname: hostname1 })
  454              const fav2 = await storageManager
  455:                 .collection('favIcons')
  456:                 .findObject<FavIcon>({ hostname: hostname2 })
  457              expect(fav1.hostname).toBe(hostname1)
  458              expect(fav2.hostname).toBe(hostname2)

/Users/oliversauter/GitHub/Memex/src/search/on-demand-indexing.ts:
   27      const analysisRes = await analysePage({
   28          tabId,
   29:         allowFavIcon: false,
   30          ...pageAnalysisArgs,
   31      })
   ..
   54          opts: {
   55              includePageContent: true,
   56:             includeFavIcon: false,
   57          },
   58      }).run()

/Users/oliversauter/GitHub/Memex/src/search/search-index.ts:
    5      updateTimestampMeta,
    6      addVisit,
    7:     addFavIcon,
    8  } from './add'
    9  import {
   ..
   24      createTestPage,
   25  } from './on-demand-indexing'
   26: import { domainHasFavIcon } from './search/fav-icon'
   27  
   28  export function combineSearchIndex(dependenices: {
   ..
   45          updateTimestampMeta: updateTimestampMeta(dependenices.getDb),
   46          addVisit: addVisit(dependenices.getDb),
   47:         addFavIcon: addFavIcon(dependenices.getDb),
   48:         domainHasFavIcon: domainHasFavIcon(dependenices.getDb),
   49          addTag: addTag(dependenices.getDb),
   50          delTag: delTag(dependenices.getDb),

/Users/oliversauter/GitHub/Memex/src/search/types.ts:
   60      content: Partial<PageContent>
   61      url: string
   62:     favIconURI?: string
   63      screenshotURI?: string
   64      [extra: string]: any
   ..
   95  
   96      // Misc.
   97:     favIconURI?: string
   98      screenshotURI?: string
   99      text: string
  ...
  151      addVisit: (url: string, time?: number) => Promise<any>
  152  
  153:     addFavIcon: (url: string, favIconURI: string) => Promise<any>
  154:     domainHasFavIcon: (url: string) => Promise<boolean>
  155  
  156      addTag: (

/Users/oliversauter/GitHub/Memex/src/search/background/page-url-mapper.ts:
   70      }
   71  
   72:     private async lookupFavIcons(
   73          hostnames: string[],
   74:         favIconMap: Map<string, string>,
   75          base64Img?: boolean,
   76      ) {
   77          // Find all assoc. fav-icons and create object URLs pointing to the Blobs
   78:         const favIcons = await this.backend.dexieInstance
   79:             .table('favIcons')
   80              .where('hostname')
   81              .anyOf(hostnames)
   ..
   83              .toArray()
   84  
   85:         for (const { favIcon, hostname } of favIcons) {
   86:             favIconMap.set(hostname, await this.encodeImage(favIcon, base64Img))
   87          }
   88      }
   ..
  257          }
  258  
  259:         const favIconMap = new Map<string, string>()
  260          const pageMap = new Map<string, Page>()
  261          const tagMap = new Map<string, string[]>()
  ...
  284                        upperTimeBound,
  285                    ),
  286:             this.lookupFavIcons([...hostnames], favIconMap, base64Img),
  287          ])
  288  
  ...
  299                  return {
  300                      ...page,
  301:                     favIcon: favIconMap.get(page.hostname),
  302                      tags: tagMap.get(url) || [],
  303                      annotsCount: countMap.get(url),

/Users/oliversauter/GitHub/Memex/src/search/background/pages.test.ts:
   97      annotsCount: undefined,
   98      displayTime: DATA.VISIT_1,
   99:     favIcon: undefined,
  100      hasBookmark: false,
  101      screenshot: undefined,
  ...
  108      annotsCount: undefined,
  109      displayTime: DATA.VISIT_2,
  110:     favIcon: undefined,
  111      hasBookmark: false,
  112      screenshot: undefined,

/Users/oliversauter/GitHub/Memex/src/search/background/types.ts:
   11      screenshot?: string
   12      /** Object URL to the in-memory location of the assoc. fav-icon. */
   13:     favIcon?: string
   14      displayTime?: number
   15      /** Total count of annots associated with this page. (regardless of search) */
   ..
  135      updateTimestampMeta: any
  136      addVisit: any
  137:     addFavIcon: any
  138      delPages: any
  139      delPagesByDomain: any
  ...
  147      search: any
  148      getMatchingPageCount: any
  149:     domainHasFavIcon: any
  150      createPageFromTab: any
  151      createPageFromUrl: any

/Users/oliversauter/GitHub/Memex/src/search/background/utils.ts:
   53      hasBookmark: page.hasBookmark,
   54      screenshot: page.screenshot,
   55:     favIcon: page.favIcon,
   56      annotations: [],
   57      tags: page.tags,

/Users/oliversauter/GitHub/Memex/src/search/models/fav-icon.ts:
    3  import AbstractModel from './abstract-model'
    4  
    5: const favIcon = Symbol('favIconURI')
    6  
    7  export interface Props {
    8      hostname: string
    9:     favIconURI: string
   10  }
   11  
   12: export default class FavIcon extends AbstractModel {
   13      public hostname: string
   14:     public favIcon: Blob
   15  
   16:     constructor(db: Storex, { hostname, favIconURI }: Props) {
   17          super(db)
   18  
   19          this.hostname = hostname
   20:         this.favIconURI = favIconURI
   21  
   22:         // Non-enumerable prop to hold the favIcon in-mem Blob link
   23:         Object.defineProperty(this, favIcon, AbstractModel.DEF_NON_ENUM_PROP)
   24      }
   25  
   ..
   27          return {
   28              hostname: this.hostname,
   29:             favIcon: this.favIcon,
   30          }
   31      }
   32  
   33:     get favIconURI() {
   34:         if (this.favIcon && !this[favIcon]) {
   35:             return AbstractModel.getBlobURL(this.favIcon)
   36          }
   37  
   38:         return this[favIcon]
   39      }
   40  
   41:     set favIconURI(dataURI: string) {
   42          if (dataURI) {
   43              try {
   44:                 this.favIcon = AbstractModel.dataURLToBlob(dataURI)
   45:                 this[favIcon] = AbstractModel.getBlobURL(this.favIcon)
   46              } catch (err) {
   47                  console.error(err)
   ..
   52      public async delete() {
   53          return this.db
   54:             .collection('favIcons')
   55              .deleteOneObject({ hostname: this.hostname })
   56      }
   57  
   58      public async save() {
   59:         if (this.favIcon !== null) {
   60              const { object } = await this.db
   61:                 .collection('favIcons')
   62                  .createObject(this.data)
   63              return object.hostname

/Users/oliversauter/GitHub/Memex/src/search/models/index.ts:
    3  export { default as Bookmark } from './bookmark'
    4  export { default as Tag } from './tag'
    5: export { default as FavIcon } from './fav-icon'
    6  

/Users/oliversauter/GitHub/Memex/src/search/search/fav-icon.ts:
    3  import { initErrHandler } from '../storage'
    4  
    5: export const domainHasFavIcon = (getDb: DBGet) => async (url: string) => {
    6      const db = await getDb()
    7      const { hostname } = transformUrl(url)
    8  
    9      const res = await db
   10:         .collection('favIcons')
   11          .findOneObject({ hostname })
   12          .catch(initErrHandler())

/Users/oliversauter/GitHub/Memex/src/search/search/index.ts:
    8  import { paginate, applyScores } from './util'
    9  import { collections } from '../util'
   10: export { domainHasFavIcon } from './fav-icon'
   11  import { DexieUtilsPlugin } from '../plugins/dexie-utils'
   12  

/Users/oliversauter/GitHub/Memex/src/search/search/map-results-to-display.ts:
    1: import { Page, FavIcon } from '../models'
    2  import { SearchParams, SearchResult, DBGet } from '../types'
    3  
    .
    8      displayTime: number
    9      screenshot: string
   10:     favIcon: string
   11      tags: string[]
   12  }
   ..
   14  const mapPageToDisplay = (
   15      pagesMap: Map<string, Page>,
   16:     favIconsMap: Map<string, FavIcon>,
   17      { endDate }: SearchParams,
   18      getDb: DBGet,
   ..
   21          const db = await getDb()
   22          const page = new Page(db, pagesMap.get(url))
   23:         const favIcon = favIconsMap.get(page.hostname)
   24          await page.loadRels()
   25  
   ..
   30              displayTime: page.getLatest(endDate),
   31              screenshot: page.screenshotURI,
   32:             favIcon: favIcon != null ? favIcon.favIconURI : undefined,
   33              tags: page.tags,
   34          }
   ..
   47      const pagesMap = new Map<string, Page>()
   48      const hostnamesSet = new Set<string>()
   49:     const favIconsMap = new Map<string, FavIcon>()
   50  
   51      // Grab all pages + tags for pages, creating a Map for easy lookup-by-URL + set of hostnames
   ..
   60  
   61      // Grab all corresponding fav-icons for hostnames set
   62:     const favIcons = await db.collection('favIcons').findObjects<FavIcon>({
   63          hostname: { $in: [...hostnamesSet] },
   64      })
   65:     favIcons.forEach(favIcon => favIconsMap.set(favIcon.hostname, favIcon))
   66  
   67      // Grab all the Pages needed for results (mapping over input `results` to maintain order)
   68      return Promise.all(
   69:         results.map(mapPageToDisplay(pagesMap, favIconsMap, params, getDb)),
   70      )
   71  }

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
   57  }
   58  
   59: .favIcon {
   60      width: 20px;
   61      height: 20px;

/Users/oliversauter/GitHub/Memex/src/storage/index.test.ts:
   40                          visits: '[time+url], url',
   41                          bookmarks: 'url, time',
   42:                         favIcons: 'hostname',
   43                          tags: '[name+url], name, url',
   44                      },
   ..
   52                          visits: '[time+url], url',
   53                          bookmarks: 'url, time',
   54:                         favIcons: 'hostname',
   55                          tags: '[name+url], name, url',
   56                          directLinks: 'url, *body, *pageTitle, createdWhen',
   ..
   65                          visits: '[time+url], url',
   66                          bookmarks: 'url, time',
   67:                         favIcons: 'hostname',
   68                          tags: '[name+url], name, url',
   69                          directLinks:
   ..
   79                          visits: '[time+url], url',
   80                          bookmarks: 'url, time',
   81:                         favIcons: 'hostname',
   82                          tags: '[name+url], name, url',
   83                          directLinks:
   ..
   96                          visits: '[time+url], url',
   97                          bookmarks: 'url, time',
   98:                         favIcons: 'hostname',
   99                          tags: '[name+url], name, url',
  100                          directLinks:
  ...
  114                          visits: '[time+url], url',
  115                          bookmarks: 'url, time',
  116:                         favIcons: 'hostname',
  117                          tags: '[name+url], name, url',
  118                          directLinks:
  ...
  132                          visits: '[time+url], url',
  133                          bookmarks: 'url, time',
  134:                         favIcons: 'hostname',
  135                          tags: '[name+url], name, url',
  136                          directLinks:
  ...
  151                          visits: '[time+url], url',
  152                          bookmarks: 'url, time',
  153:                         favIcons: 'hostname',
  154                          tags: '[name+url], name, url',
  155                          directLinks:
  ...
  172                          visits: '[time+url], url',
  173                          bookmarks: 'url, time',
  174:                         favIcons: 'hostname',
  175                          tags: '[name+url], name, url',
  176                          directLinks:
  ...
  194                          visits: '[time+url], url',
  195                          bookmarks: 'url, time',
  196:                         favIcons: 'hostname',
  197                          tags: '[name+url], name, url',
  198                          directLinks:
  ...
  217                          visits: '[time+url], url',
  218                          bookmarks: 'url, time',
  219:                         favIcons: 'hostname',
  220                          tags: '[name+url], name, url',
  221                          directLinks:
  ...
  241                          visits: '[time+url], url',
  242                          bookmarks: 'url, time',
  243:                         favIcons: 'hostname',
  244                          tags: '[name+url], name, url',
  245                          directLinks:
  ...
  265                          visits: '[time+url], url',
  266                          bookmarks: 'url, time',
  267:                         favIcons: 'hostname',
  268                          tags: '[name+url], name, url',
  269                          directLinks:
  ...
  292                          visits: '[time+url], url',
  293                          bookmarks: 'url, time',
  294:                         favIcons: 'hostname',
  295                          tags: '[name+url], name, url',
  296                          directLinks:
  ...
  320                          visits: '[time+url], url',
  321                          bookmarks: 'url, time',
  322:                         favIcons: 'hostname',
  323                          tags: '[name+url], name, url',
  324                          directLinks:
  ...
  350                          visits: '[time+url], url',
  351                          bookmarks: 'url, time',
  352:                         favIcons: 'hostname',
  353                          tags: '[name+url], name, url',
  354                          directLinks:
  ...
  380                          visits: '[time+url], url',
  381                          bookmarks: 'url, time',
  382:                         favIcons: 'hostname',
  383                          tags: '[name+url], name, url',
  384                          directLinks:
  ...
  410                          visits: '[time+url], url',
  411                          bookmarks: 'url, time',
  412:                         favIcons: 'hostname',
  413                          tags: '[name+url], name, url',
  414                          directLinks:
  ...
  440                          visits: '[time+url], url',
  441                          bookmarks: 'url, time',
  442:                         favIcons: 'hostname',
  443                          tags: '[name+url], name, url',
  444                          directLinks:

/Users/oliversauter/GitHub/Memex/src/sync/background/index.test.ts:
 1035                      annotsCount: 1,
 1036                      displayTime: expect.any(Number),
 1037:                     favIcon: undefined,
 1038                      hasBookmark: false,
 1039                      screenshot: undefined,

/Users/oliversauter/GitHub/Memex/src/tags/background/index.test.ts:
   60                                          annotsCount: undefined,
   61                                          displayTime: DATA.VISIT_1,
   62:                                         favIcon: undefined,
   63                                          hasBookmark: false,
   64                                          screenshot: undefined,
   ..
  115                                          annotsCount: undefined,
  116                                          displayTime: DATA.VISIT_1,
  117:                                         favIcon: undefined,
  118                                          hasBookmark: false,
  119                                          screenshot: undefined,

252 matches across 44 files


Searching 1035 files for "rootcontainer"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
   10  
   11  /* List entries shown as context around a search result */
   12: .rootContainer.compact {
   13      opacity: 0.7;
   14      transform: scale(0.6);
   ..
   24  }
   25  
   26: .rootContainer {
   27      border-bottom: 0.75px solid #E1E1E1;
   28      display: flex;
   ..
   63  }
   64  
   65: .rootContainerOverview {
   66      width: 800px;
   67      height: 90px;
   ..
  416  }
  417  
  418: .tweetRootContainer {
  419      height: fit-content;
  420  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
  105                  )}
  106                  <div
  107:                     className={cx(styles.rootContainer, {
  108:                         [styles.tweetRootContainer]: this.props.isSocial,
  109:                         [styles.rootContainerOverview]: this.props.isOverview,
  110                          [styles.isSidebarOpen]: this.props
  111                              .isResponsibleForSidebar,

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
    3  }
    4  
    5: .rootContainer {
    6      width: 100%;
    7      composes: boxShadow from '../../common-ui/colors.css';
    .
   15  }
   16  
   17: .rootContainer > a {
   18      text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
   19      display: flex;

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.js:
    7  
    8  const ResultItem = props => (
    9:     <div className={classNames(styles.rootContainer, styles[props.searchEngine])}>
   10          <a
   11              className={styles.root}

10 matches across 4 files


Searching 1035 files for "PageResultItem"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
    9  const styles = require('./result-item.css')
   10  
   11: class PageResultItem extends PureComponent<Props> {
   12      static defaultProps = {
   13          nullImg: '/img/null-icon.png',
   ..
   79  }
   80  
   81: export default PageResultItem
   82  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
    9  import { LoadingIndicator } from 'src/common-ui/components'
   10  import { SocialPage } from 'src/social-integration/types'
   11: import PageResultItem from './page-result-item'
   12  import SocialResultItem from './social-result-item'
   13  
   ..
  125                              <SocialResultItem {...this.props} />
  126                          ) : (
  127:                             <PageResultItem {...this.props} />
  128                          )}
  129                      </a>

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultListContainer.tsx:
  162      }
  163  
  164:     private attachDocWithPageResultItem(doc: Result, index, key) {
  165          const isSocialPost = doc.hasOwnProperty('user')
  166  
  ...
  208          if (!this.props.resultsClusteredByDay) {
  209              return this.props.searchResults.map((res, i) =>
  210:                 this.attachDocWithPageResultItem(res, i, i),
  211              )
  212          }
  ...
  241  
  242                  els.push(
  243:                     this.attachDocWithPageResultItem(
  244                          { ...page, annotations } as any,
  245                          page.index,

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/result-list-container.tsx:
  158      }
  159  
  160:     private attachDocWithPageResultItem(doc, index, key) {
  161          const isSocialPost = doc.hasOwnProperty('user')
  162  
  ...
  198          if (!this.props.resultsClusteredByDay) {
  199              return this.props.searchResults.map((res, i) =>
  200:                 this.attachDocWithPageResultItem(res, i, i),
  201              )
  202          }
  ...
  226  
  227                  els.push(
  228:                     this.attachDocWithPageResultItem(
  229                          { ...page, annotations },
  230                          page.index,

10 matches across 4 files


Searching 1035 files for "ResultItemActions"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
    4  import SemiCircularRibbon from './semi-circular-ribbon'
    5  import ButtonTooltip from './button-tooltip'
    6: import ResultItemActions from './result-item-actions'
    7  import { Props } from './result-item'
    8  
    .
   75                      <div className={styles.url}>{this.props.url}</div>
   76                      <div className={styles.bottomLine}>
   77:                         <ResultItemActions {...this.props} />
   78                      </div>
   79                      {this.props.isOverview && this.props.tagHolder}

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item-actions.tsx:
    5  const styles = require('./result-item.css')
    6  
    7: class ResultItemActions extends PureComponent<Props> {
    8      get bookmarkClass() {
    9          return cx(styles.button, {
   ..
   69  }
   70  
   71: export default ResultItemActions
   72  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/social-result-item.tsx:
    3  import moment from 'moment'
    4  import reactStringReplace from 'react-string-replace'
    5: import ResultItemActions from './result-item-actions'
    6  import SemiCircularRibbon from './semi-circular-ribbon'
    7  import {
    .
  134                      <div className={styles.bottomRow}>
  135                          {!this.props.isOverview && this.props.tagHolder}
  136:                         <ResultItemActions {...this.props} />
  137                      </div>
  138                  </div>

6 matches across 3 files


Searching 1035 files for "taglist"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  347  }
  348  
  349: .tagList {
  350      display: flex;
  351      flex-grow: 2;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.css:
    2  @value color4, color1, color2, color3, color6 from colors;
    3  
    4: .tagList {
    5      display: flex;
    6      flex-wrap: nowrap;
    .
   10  }
   11  
   12: .tagListSidebar {
   13      flex-wrap: wrap;
   14      padding: 0px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.tsx:
   42          return (
   43              <div
   44:                 className={cx(styles.tagList, {
   45:                     [styles.tagListSidebar]: this.props.env === 'sidebar',
   46                  })}
   47              >

5 matches across 3 files


Searching 1035 files for "ResultItem"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/index.ts:
   21  export { default as TagHolder } from './tag-holder'
   22  export { default as TagPill } from './tag-pill'
   23: export { default as ResultItem } from './result-item'
   24  export { default as ProgressStepContainer } from './progress-step-container'
   25  export { default as QRCanvas } from './qr-canvas'

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
    4  import SemiCircularRibbon from './semi-circular-ribbon'
    5  import ButtonTooltip from './button-tooltip'
    6: import ResultItemActions from './result-item-actions'
    7  import { Props } from './result-item'
    8  
    9  const styles = require('./result-item.css')
   10  
   11: class PageResultItem extends PureComponent<Props> {
   12      static defaultProps = {
   13          nullImg: '/img/null-icon.png',
   ..
   68                                  {this.props.title}
   69                          </div>
   70:                         <ResultItemActions {...this.props} />w
   71                          {this.props.isListFilterActive && (
   72                              <SemiCircularRibbon
   ..
   92  }
   93  
   94: export default PageResultItem
   95  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item-actions.tsx:
    5  const styles = require('./result-item.css')
    6  
    7: class ResultItemActions extends PureComponent<Props> {
    8      get bookmarkClass() {
    9          return cx(styles.button, {
   ..
   62  }
   63  
   64: export default ResultItemActions
   65  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
    9  import { LoadingIndicator } from 'src/common-ui/components'
   10  import { SocialPage } from 'src/social-integration/types'
   11: import PageResultItem from './page-result-item'
   12: import SocialResultItem from './social-result-item'
   13  
   14  const styles = require('./result-item.css')
   ..
   45  }
   46  
   47: class ResultItem extends PureComponent<Props> {
   48      get hrefToPage() {
   49          return `http://${this.props.url}`
   ..
  124                      >
  125                          {this.props.isSocial ? (
  126:                             <SocialResultItem {...this.props} />
  127                          ) : (
  128:                             <PageResultItem {...this.props} />
  129                          )}
  130                      </a>
  ...
  137  }
  138  
  139: export default ResultItem
  140  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/social-result-item.tsx:
    3  import moment from 'moment'
    4  import reactStringReplace from 'react-string-replace'
    5: import ResultItemActions from './result-item-actions'
    6  import SemiCircularRibbon from './semi-circular-ribbon'
    7  import {
    .
   14  const styles = require('./result-item.css')
   15  
   16: class SocialResultItem extends PureComponent<Props> {
   17      get hrefToUser() {
   18          return `http://twitter.com/${this.props.user.username}`
   ..
  134                      <div className={styles.bottomRow}>
  135                          {!this.props.isOverview && this.props.tagHolder}
  136:                         <ResultItemActions {...this.props} />
  137                      </div>
  138                  </div>
  ...
  142  }
  143  
  144: export default SocialResultItem
  145  

/Users/oliversauter/GitHub/Memex/src/overview/delete-confirm-modal/actions.ts:
   44          await deleteRPC([url])
   45  
   46:         dispatch(resultsActs.hideResultItem(url))
   47      } catch (err) {
   48          handleDBQuotaErrors(

/Users/oliversauter/GitHub/Memex/src/overview/results/actions.ts:
   31  )
   32  
   33: export const hideResultItem = createAction<string>('results/hideResultItem')
   34  export const changeHasBookmark = createAction<number>(
   35      'results/changeHasBookmark',

/Users/oliversauter/GitHub/Memex/src/overview/results/reducer.ts:
  142  })
  143  
  144: reducer.on(acts.hideResultItem, (state, url) => {
  145      const removalIndex = state.results.findIndex(doc => doc.url === url)
  146  

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultListContainer.tsx:
    6  
    7  import { selectors as opt } from 'src/options/settings'
    8: import { LoadingIndicator, ResultItem } from 'src/common-ui/components'
    9  import { IndexDropdown } from 'src/common-ui/containers'
   10  import ResultList from './ResultList'
   ..
  162      }
  163  
  164:     private attachDocWithPageResultItem(doc: Result, index, key) {
  165          const isSocialPost = doc.hasOwnProperty('user')
  166  
  167          return (
  168:             <ResultItem
  169                  key={key}
  170                  isOverview
  ...
  208          if (!this.props.resultsClusteredByDay) {
  209              return this.props.searchResults.map((res, i) =>
  210:                 this.attachDocWithPageResultItem(res, i, i),
  211              )
  212          }
  ...
  241  
  242                  els.push(
  243:                     this.attachDocWithPageResultItem(
  244                          { ...page, annotations } as any,
  245                          page.index,
  ...
  253      }
  254  
  255:     private renderResultItems() {
  256          if (this.props.isNewSearchLoading) {
  257              return <LoadingIndicator />
  258          }
  259  
  260:         const resultItems = this.resultsStateToItems()
  261  
  262          // Insert waypoint at the end of results to trigger loading new items when
  263          // scrolling down
  264          if (this.props.needsWaypoint) {
  265:             resultItems.push(
  266                  <Waypoint
  267                      onEnter={this.props.handleScrollPagination}
  ...
  273          // Add loading spinner to the list end, if loading
  274          if (this.props.isLoading) {
  275:             resultItems.push(<LoadingIndicator key="loading" />)
  276          }
  277  
  278:         return resultItems
  279      }
  280  
  ...
  285                  isFilterBarActive={this.props.isFilterBarActive}
  286              >
  287:                 {this.renderResultItems()}
  288              </ResultList>
  289          )
  ...
  349          event.stopPropagation()
  350          dispatch(listActs.delPageFromList(url, isSocialPost))
  351:         dispatch(acts.hideResultItem(url))
  352      },
  353  })

/Users/oliversauter/GitHub/Memex/src/search-injection/components/container.tsx:
    5  import Results from './Results'
    6  import strictUriEncode from 'strict-uri-encode'
    7: import ResultItem from './ResultItem'
    8  import RemovedText from './RemovedText'
    9  import * as constants from '../constants'
   ..
   34      constructor(props) {
   35          super(props)
   36:         this.renderResultItems = this.renderResultItems.bind(this)
   37          this.seeMoreResults = this.seeMoreResults.bind(this)
   38          this.toggleHideResults = this.toggleHideResults.bind(this)
   ..
   95          })
   96  
   97:     renderResultItems() {
   98:         const resultItems = this.props.results.map((result, i) => (
   99:             <ResultItem
  100                  key={i}
  101                  onLinkClick={this.handleResultLinkClick}
  ...
  104              />
  105          ))
  106:         return resultItems
  107      }
  108  
  ...
  319                  removeResults={this.removeResults}
  320                  changePosition={this.changePosition}
  321:                 renderResultItems={this.renderResultItems}
  322                  renderNotification={this.renderNotification()}
  323              />

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.js:
    4  import classNames from 'classnames'
    5  
    6: import styles from './ResultItem.css'
    7  
    8: const ResultItem = props => (
    9      <div className={classNames(styles.rootContainer, styles[props.searchEngine])}>
   10          <a
   ..
   35  )
   36  
   37: ResultItem.propTypes = {
   38      searchEngine: PropTypes.string.isRequired,
   39      displayTime: PropTypes.number.isRequired,
   ..
   42      onLinkClick: PropTypes.func.isRequired,
   43  }
   44: export default ResultItem
   45  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Results.js:
   56              })}>
   57                  {// Render only if hideResults is false
   58:                 props.hideResults ? '' : props.renderResultItems()}
   59              </div>
   60          </div>
   ..
   74      removeResults: PropTypes.func.isRequired,
   75      changePosition: PropTypes.func.isRequired,
   76:     renderResultItems: PropTypes.func.isRequired,
   77      renderNotification: PropTypes.node,
   78  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/result-list-container.tsx:
    5  import moment from 'moment'
    6  
    7: import { LoadingIndicator, ResultItem } from 'src/common-ui/components'
    8  import { IndexDropdown } from 'src/common-ui/containers'
    9  import ResultList from './result-list'
   ..
  158      }
  159  
  160:     private attachDocWithPageResultItem(doc, index, key) {
  161          const isSocialPost = doc.hasOwnProperty('user')
  162  
  163          return (
  164:             <ResultItem
  165                  key={key}
  166                  setTagButtonRef={this.setTagButtonRef}
  ...
  198          if (!this.props.resultsClusteredByDay) {
  199              return this.props.searchResults.map((res, i) =>
  200:                 this.attachDocWithPageResultItem(res, i, i),
  201              )
  202          }
  ...
  226  
  227                  els.push(
  228:                     this.attachDocWithPageResultItem(
  229                          { ...page, annotations },
  230                          page.index,
  ...
  238      }
  239  
  240:     private renderResultItems() {
  241          if (this.props.isNewSearchLoading) {
  242              return <LoadingIndicator />
  243          }
  244  
  245:         const resultItems = this.resultsStateToItems()
  246  
  247          // Insert waypoint at the end of results to trigger loading new items when
  248          // scrolling down
  249          if (this.props.needsWaypoint) {
  250:             resultItems.push(
  251                  <Waypoint
  252                      onEnter={this.props.handleScrollPagination}
  ...
  258          // Add loading spinner to the list end, if loading
  259          if (this.props.isLoading) {
  260:             resultItems.push(<LoadingIndicator key="loading" />)
  261          }
  262  
  263:         return resultItems
  264      }
  265  
  ...
  267          return (
  268              <div ref={this.setResultsDivRef}>
  269:                 <ResultList>{this.renderResultItems()}</ResultList>
  270              </div>
  271          )
  ...
  326          event.stopPropagation()
  327          dispatch(listActs.delPageFromList(url, isSocialPost))
  328:         dispatch(resultActs.hideResultItem(url))
  329      },
  330  })

61 matches across 13 files


Searching 1035 files for "detailscontainer"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item-actions.tsx:
   16          return (
   17              <div
   18:                 className={cx(styles.detailsContainer, {
   19:                     [styles.tweetDetailsContainer]: this.props.isSocial,
   20                  })}
   21              >

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  272  }
  273  
  274: .detailsContainer {
  275      display: flex;
  276      flex-direction: row;
  ...
  549  }
  550  
  551: .tweetDetailsContainer {
  552      margin-top: -5px;
  553      width: fill-available;

/Users/oliversauter/GitHub/Memex/src/options/imports/components/DownloadDetails.css:
    1: .detailsContainer {
    2      display: flex;
    3      flex-direction: column;

/Users/oliversauter/GitHub/Memex/src/options/imports/components/DownloadDetails.jsx:
    9  
   10  const DownloadDetails = ({ children, filterHandlers, filter }) => (
   11:     <div className={localStyles.detailsContainer}>
   12          <div className={localStyles.filters}>
   13              <button className={filterClass} onClick={filterHandlers.all}>

/Users/oliversauter/GitHub/Memex/src/options/imports/components/ShowDownloadDetails.jsx:
    5  
    6  const ShowDownloadDetails = ({ changeShowDetails, showDownloadDetails }) => (
    7:     <div className={localStyles.detailsContainer}>
    8          <div className={localStyles.showDetails}>
    9              <a

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.js:
   22                  <div className={styles.url}>{props.url}</div>
   23                  
   24:                 <div className={styles.detailsContainer}>
   25                      <div className={styles.detailsBox}>
   26                          <div className={styles.displayTime}>

8 matches across 6 files


Searching 1035 files for "firstline"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
   52                      })}
   53                  >
   54:                     <div className={styles.firstlineContainer}>
   55                          {this.props.favIcon ? (
   56                                  <img

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  193  }
  194  
  195: .firstlineContainer {
  196      display: flex;
  197      flex-direction: row;

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
   32  }
   33  
   34: .firstlineContainer {
   35      composes: darkBlue from '../../common-ui/colors.css' !important; /* stylelint-disable-line declaration-no-important */
   36      width: 100%;

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.js:
   15          >
   16              <div className={styles.infoContainer}> 
   17:                 <div className={styles.firstlineContainer}>
   18                          <span className={styles.Title}>
   19                          {props.title}

4 matches across 4 files


Searching 1035 files for "declaration-no-important                 "

0 matches

Searching 1035 files for "declaration-no-important"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdown.css:
   54      color: black;
   55      padding: 0;
   56:     background-color: transparent !important; /* stylelint-disable-line declaration-no-important */
   57  }
   58  

/Users/oliversauter/GitHub/Memex/src/content-tooltip/components/tooltip.css:
   21  
   22      & img {
   23:         margin-bottom: 0px !important; /* stylelint-disable-line declaration-no-important */
   24:         padding: 0px !important; /* stylelint-disable-line declaration-no-important */
   25      }
   26  

/Users/oliversauter/GitHub/Memex/src/options/blacklist/components/BlacklistInputRow.css:
    1  .cell {
    2:     padding: 0 !important; /* stylelint-disable-line declaration-no-important */
    3  }
    4  

/Users/oliversauter/GitHub/Memex/src/options/imports/components/Import.css:
  288  
  289  .disabledComingSoon {
  290:     color: #3eb995 !important; /* stylelint-disable-line declaration-no-important */
  291  }
  292  

/Users/oliversauter/GitHub/Memex/src/overview/components/ShareButtons.css:
   41      text-decoration: none;
   42      position: absolute;
   43:     color: #fff !important; /* stylelint-disable-line declaration-no-important */
   44      background-color: #3eb99587;
   45      transform: rotate(90deg);

/Users/oliversauter/GitHub/Memex/src/overview/results/components/NoResult.css:
   24  
   25  .link {
   26:     text-decoration: underline !important; /* stylelint-disable-line declaration-no-important */
   27  }
   28  

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultsMessage.css:
   53  
   54  .subTitle {
   55:     font-size: 20px !important; /* stylelint-disable-line declaration-no-important */
   56:     font-weight: 300 !important; /* stylelint-disable-line declaration-no-important */
   57      text-decoration: none;
   58      margin-bottom: 40px;

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/datepicker-overrides.css:
    2  @value color1, color 2, color4, color7 from colors;
    3  
    4: /* stylelint-disable  declaration-no-important, selector-pseudo-class-no-unknown */
    5  
    6  :global .react-datepicker__day--selected,

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/components/collections-button.css:
   42  .buttonContainerOverview {
   43      position: fixed;
   44:     display: flex !important; /* stylelint-disable-line declaration-no-important */
   45      flex-direction: column;
   46      align-items: center;
   ..
   52  
   53      @media (max-width: 835px) {
   54:         display: none !important; /* stylelint-disable-line declaration-no-important */
   55      }
   56  }

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/components/Sidebar.css:
   33  .buttonContainer {
   34      position: absolute;
   35:     display: flex !important; /* stylelint-disable-line declaration-no-important */
   36      justify-content: space-between;
   37      top: 2px;

/Users/oliversauter/GitHub/Memex/src/popup/components/Button.css:
    2  @value color4, color5, color6, color12 from colors;
    3  
    4: /* stylelint-disable declaration-no-important */
    5  
    6  .link {

/Users/oliversauter/GitHub/Memex/src/popup/components/Popup.css:
    8      font-size: 12px;
    9      font-weight: 600;
   10:     background: #fff !important; /* stylelint-disable-line declaration-no-important */
   11      color: color4;
   12  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/RemovedText.css:
   37      &:hover {
   38          color: #4abf9dad;
   39:         text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
   40      }
   41  }

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
   16  
   17  .rootContainer > a {
   18:     text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
   19      display: flex;
   20      flex-direction: column;
   ..
   33  
   34  .firstlineContainer {
   35:     composes: darkBlue from '../../common-ui/colors.css' !important; /* stylelint-disable-line declaration-no-important */
   36      width: 100%;
   37      font-size: 15px;
   ..
   47  
   48  .title {
   49:     composes: darkBlue from '../../common-ui/colors.css' !important; /* stylelint-disable-line declaration-no-important */
   50      display: flex;
   51      flex-direction: row;

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Results.css:
   42  .links {
   43      composes: filterText from '../../common-ui/elements.css';
   44:     text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
   45      font-size: 16px;
   46      display: inline-block;
   ..
  226  .upgradeButton {
  227      padding: 5px 25px;
  228:     color: white !important; /* stylelint-disable-line declaration-no-important */
  229:     text-decoration: none !important; /* stylelint-disable-line declaration-no-important */
  230      background-color: #3eb995;
  231      margin-bottom: 10px;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/topbar.css:
   43  .filterButtonActive {
   44      background-color: color14;
   45:     padding-right: 3px !important; /* stylelint-disable-line declaration-no-important */
   46  }
   47  
   ..
   50  
   51      &:hover {
   52:         background-color: color8 !important; /* stylelint-disable-line declaration-no-important */
   53      }
   54  }

24 matches across 16 files


Searching 1035 files for "taglist"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  369  }
  370  
  371: .tagList {
  372      display: flex;
  373      flex-grow: 2;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.css:
    2  @value color4, color1, color2, color3, color6 from colors;
    3  
    4: .tagList {
    5      display: flex;
    6      flex-wrap: nowrap;
    .
   10  }
   11  
   12: .tagListSidebar {
   13      flex-wrap: wrap;
   14      padding: 0px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.tsx:
   42          return (
   43              <div
   44:                 className={cx(styles.tagList, {
   45:                     [styles.tagListSidebar]: this.props.env === 'sidebar',
   46                  })}
   47              >

5 matches across 3 files


Searching 1035 files for "ResultItemActions"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/page-result-item.tsx:
    4  import SemiCircularRibbon from './semi-circular-ribbon'
    5  import ButtonTooltip from './button-tooltip'
    6: import ResultItemActions from './result-item-actions'
    7  import { Props } from './result-item'
    8  
    .
   71                              </div>
   72                          </div>
   73:                         <ResultItemActions {...this.props} />
   74                          {this.props.isListFilterActive && (
   75                              <SemiCircularRibbon

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item-actions.tsx:
    5  const styles = require('./result-item.css')
    6  
    7: class ResultItemActions extends PureComponent<Props> {
    8      get bookmarkClass() {
    9          return cx(styles.button, {
   ..
   62  }
   63  
   64: export default ResultItemActions
   65  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/social-result-item.tsx:
    3  import moment from 'moment'
    4  import reactStringReplace from 'react-string-replace'
    5: import ResultItemActions from './result-item-actions'
    6  import SemiCircularRibbon from './semi-circular-ribbon'
    7  import {
    .
  134                      <div className={styles.bottomRow}>
  135                          {!this.props.isOverview && this.props.tagHolder}
  136:                         <ResultItemActions {...this.props} />
  137                      </div>
  138                  </div>

6 matches across 3 files


Searching 1035 files for "buttonscontainer"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item-actions.tsx:
   21              >
   22                  <div
   23:                     className={styles.buttonsContainer}
   24                      onClick={e => {
   25                          e.preventDefault()

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
  277  }
  278  
  279: .buttonsContainer {
  280      display: flex;
  281      flex-direction: row;

/Users/oliversauter/GitHub/Memex/src/notifications/components/Notification.css:
  138  }
  139  
  140: .buttonsContainer {
  141      display: flex;
  142      flex-direction: row;

/Users/oliversauter/GitHub/Memex/src/notifications/components/Notification.jsx:
   36                      {(props.isUnread || props.buttonText) && (
   37                          <div className={hasOnlyButton(props.buttonText)}>
   38:                             <div className={styles.buttonsContainer}>
   39                                  {props.buttons}
   40                              </div>

4 matches across 4 files


Searching 1035 files for "rootContainer.compact"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
   10  
   11  /* List entries shown as context around a search result */
   12: .rootContainer.compact {
   13      opacity: 0.7;
   14      transform: scale(0.6);

1 match in 1 file


Searching 1035 files for "taglistsidebar"

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.css:
   10  }
   11  
   12: .tagListSidebar {
   13      flex-wrap: wrap;
   14      padding: 0px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.tsx:
   43              <div
   44                  className={cx(styles.tagList, {
   45:                     [styles.tagListSidebar]: this.props.env === 'sidebar',
   46                  })}
   47              >

2 matches across 2 files


Searching 1035 files for "inter"

/Users/oliversauter/GitHub/Memex/src/background.ts:
   93      })
   94  
   95:     // Attach interesting features onto global window scope for interested users
   96      window['getDb'] = getDb
   97      window['storageMan'] = storageManager
   ..
  116          //     },
  117          // },
  118:         intergrationTestData: {
  119              insert: async () => {
  120                  console['log']('Inserting integration test data')
  ...
  127                      id: listId,
  128                      url:
  129:                         'http://highscalability.com/blog/2019/7/19/stuff-the-internet-says-on-scalability-for-july-19th-2019.html',
  130                  })
  131                  await backgroundModules.search.searchIndex.addPage({
  132                      pageDoc: {
  133                          url:
  134:                             'http://highscalability.com/blog/2019/7/19/stuff-the-internet-says-on-scalability-for-july-19th-2019.html',
  135                          content: {
  136                              fullText: 'home page content',

/Users/oliversauter/GitHub/Memex/src/omnibar.ts:
    6  
    7  import analytics from 'src/analytics'
    8: import internalAnalytics from 'src/analytics/internal'
    9  import shortUrl from 'src/util/short-url'
   10  import extractTimeFiltersFromQuery, {
   ..
   13  import { OVERVIEW_URL } from './constants'
   14  import browserIsChrome from './util/check-browser'
   15: import { EVENT_NAMES } from './analytics/internal/constants'
   16  import { conditionallySkipToTimeFilter } from './overview/onboarding/utils'
   17  import { combineSearchIndex } from './search/search-index'
   ..
   97      })
   98  
   99:     internalAnalytics.processEvent({
  100          type:
  101              searchResults.totalCount > 0

/Users/oliversauter/GitHub/Memex/src/options.html:
    8      <link rel="stylesheet" href="/fonts/material-icons/material-icons.css">
    9      <link rel="stylesheet" href="/options.css">
   10:     <link rel="stylesheet" href="/fonts/Inter/inter.css">
   11      <link rel="stylesheet" href="/fonts/Poppins/poppins.css">
   12  </head>

/Users/oliversauter/GitHub/Memex/src/popup.html:
    5      <meta charset="UTF-8">
    6      <link rel="stylesheet" type="text/css" href="/popup.css">
    7: 	<link rel="stylesheet" href="/fonts/Inter/inter.css">
    8  </head>
    9  

/Users/oliversauter/GitHub/Memex/src/refactoring.md:
    9  Remote functions exist to enable background->tab, and tab->background function delegation (i.e. Call a function in a tab, but have it run in the background and vice versa).
   10  
   11: Refactoring has been started to make these functions interfaced and type safe.
   12  
   13  ### Prior understanding and existing system
   ..
   38  
   39  ```
   40: const examples = runInBackground<ExampleInterface>({example1: () => false,example2:() => false);
   41  const result = await example.example1()
   42  ```
   ..
   52  -   Identify a set of remote function registrations from the TODO list below.
   53  
   54: -   Create an interface that describes the functions, arguments and returns, or a set thereof, e.g. `NotificationInterface`. Interfaces should be defined in a standalone types file or inside an existing standalone file with only types, so that when importing this interface, it doesn't import the functionality too, and remains lightweight.
   55  
   56: -   Modify where it is setup via `makeRemotelyCallable` to use `makeRemotelyCallableType<T>` where `T` is this newly created interface.
   57  
   58  -   Move the registration of this remote function to alongside the others in `src/background.js`
   ..
   61      (N.B. usage may not be directly done using a string literal e.g. `remoteFunction('exampleFunc')`, it may be using a variable, e.g. `const func = 'exampleFunc'; remoteFunction(func)`).
   62  
   63:         -   Change usages to `runInBackground<T>` where `T` is this newly created interface.
   64  
   65          -   Change the usages to not each call `runInBackground` to create the function directly, but rather import from `src/util/remote-functions-background.ts`. Using the created proxy object (returned from `runInBackground`) transparently as if it were a concrete implementation. e.g. instead of calling `runInBackground('addBookmark')(args)` from within some feature's functionality, it uses `bookmarks.addBookmark(args)` where `bookmarks` is assigned to the created proxy object in `remote-functions-background.ts`, in the same manner the others are.
   ..
   76  
   77  ```typescript
   78: makeRemotelyCallableType<NotificationInterface>({
   79     createNotification: ...
   80  })
   ..
   82  
   83  ```typescript
   84: makeRemotelyCallableType<BookmarksInterface>({
   85      addPageBookmark: ...,
   86      delPageBookmark: ...,
   ..
   88  ```
   89  
   90: src/content-tooltip/interactions.ts:132
   91  
   92  ```typescript
   93: makeRemotelyCallableType<TooltipInteractionInterface>({
   94      showContentTooltip: ...,
   95      insertTooltip: ...,
   ..
   99  ```
  100  
  101: src/sidebar-overlay/content_script/ribbon-interactions.ts
  102  
  103  ```typescript
  104: makeRemotelyCallableType<RibbonInteractionsInterface>({
  105      insertRibbon: ...
  106      removeRibbon: ...
  ...
  112  Along with all the associated client side calls, now using `runInTab` or `runInBackground` respectively.
  113  
  114: e.g. `await runInTab<RibbonInteractionsInterface>(tabId).insertRibbon()`
  115  
  116  ### TODO:
  ...
  260      getBackupTimes,
  261      forgetAllChanges,
  262:     setupRequestInterceptor,
  263  )
  264  ```
  ...
  272  ## Legacy 'search' namespace
  273  
  274: All the stuff in `src/search/search`, and most of those loose modules in `src/search` (like `src/search/bookmarks` and `src/search/add`), are all legacy parts of the codebase that we’re aiming to eventually refactor out in top-level feature modules (like `src/backup`, `src/custom-lists`, etc) which limit the DB interaction to those `StorageModule` classes.
  275  
  276  ## `trackEvent` - two registrations
  ...
  278  RPC Function trackEvent is defined in `src/analytics/background/index.js:10` which uses `=> analytics.trackEvent` from the `const analytics: Analytics = new AnalyticsManager({ backend })` exported at `src/analytics/index.ts:24`
  279  
  280: but `trackEvent` is also defined in `src/analytics/internal/background/index.js:11` which uses `=>`sendToServer.trackEvent`from`src/analytics/internal/send-to-server/send-to-server.js:109`
  281  
  282  This latter definition seems to be registered last so seems to be the one that will be used.
  283  
  284: Q: What is the difference between `src/analytics/...` and `src/analytics/internal/...` anyway ? Can we remove the first track event system? How are they used?
  285  
  286  ## Bookmarks - two systems
  ...
  301  ## Notifications - two systems
  302  
  303: `src/util/notif*` should exist somewhere else as it's not a util, but browser interface abstraction. Probably in src/notifications/ somewhere.
  304  
  305  There seems to be duplication between the usage of this directly, via the `createNotification` RPC call, usage via the `dispatchNotification` RPC call, and imported directly often as 'createNotif' :

/Users/oliversauter/GitHub/Memex/src/styles.css:
    1: @import url('/fonts/Inter/inter.css');
    2  @import url('/fonts/Poppins/poppins.css');
    3  

/Users/oliversauter/GitHub/Memex/src/activity-logger/README.md:
    3  ### Purpose
    4  
    5: - logging a user's web page visit activity, interactions in each visit
    6  - keep track of state related to visit activity per browser tab
    7  
    .
   16  1. initial page stub indexing
   17  2. delayed page content indexing (optional)
   18: 3. final visit interations indexing
   19  
   20  Stage 1 consists of indexing the page title, URL, and domain, and indexing the associated visit.
   ..
   27  This is done after the user has been active on the tab for at least 10s (managed by tabs state). Can be skipped.
   28  
   29: Stage 3 consists of indexing the accumulated interaction data for this visit (tabs state). Data
   30  includes active time on page and scroll states.
   31  This is done when the user closes the tab or URL is determined to be changed (new visit).

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/index.ts:
    4  import { mapChunks } from 'src/util/chunk'
    5  import initPauser from './pause-logging'
    6: import { updateVisitInteractionData } from './util'
    7  import { TabManager } from './tab-manager'
    8  import { TabChangeListener } from './types'
    .
  150  
  151              if (tab != null) {
  152:                 updateVisitInteractionData(tab, this.searchIndex)
  153              }
  154          })

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/log-page-visit.ts:
    9  import { SearchIndex } from 'src/search'
   10  
   11: interface Props {
   12      tabManager: TabManager
   13      searchIndex: SearchIndex
   ..
   53          secsSinceLastVisit = 20,
   54      ) {
   55:         const internalTabState = this._tabManager.getTabState(tab.id)
   56  
   57          // Cannot process if tab not tracked
   58:         if (internalTabState == null) {
   59              return
   60          }
   ..
   68                  if (
   69                      this._moment(existingPage.latest).isAfter(
   70:                         this._moment(internalTabState.visitTime).subtract(
   71                              secsSinceLastVisit,
   72                              'seconds',
   ..
   78                      return this._createVisit(
   79                          tab.url,
   80:                         internalTabState.visitTime,
   81                      )
   82                  }
   ..
  101              await this._createPage({
  102                  pageDoc: { url: tab.url, ...analysisRes },
  103:                 visits: [internalTabState.visitTime],
  104                  rejectNoContent: false,
  105              })
  ...
  133          }
  134  
  135:         const internalTabState = this._tabManager.getTabState(tab.id)
  136  
  137          // Cannot process if tab not tracked
  138:         if (internalTabState == null) {
  139              return
  140          }
  ...
  142          await this._createPage({
  143              pageDoc,
  144:             visits: [internalTabState.visitTime],
  145          })
  146      }

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/pause-logging.js:
   46  }
   47  
   48: function handleInterrupt(timeoutId) {
   49      if (timeoutId != Infinity && !!timeoutId) {
   50          clearTimeout(timeoutId)
   ..
   63              message: 'Activity logger now running in background again',
   64              title: 'WorldBrain Activity Logger',
   65:             requireInteraction: true,
   66          })
   67          setState(false)
   ..
   92  
   93          if (isPaused) {
   94:             handleInterrupt(timeoutId)
   95          } else {
   96              // New pause timeout request

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/tab-change-listeners.ts:
   12      FavIconFetchError,
   13  } from '../../page-analysis/background/get-fav-icon'
   14: import { shouldLogTab, updateVisitInteractionData } from './util'
   15  import { TabManager } from './tab-manager'
   16  import { STORAGE_KEYS as IDXING_PREF_KEYS } from '../../options/settings/constants'
   ..
   18      TabChangeListener,
   19      LoggableTabChecker,
   20:     VisitInteractionUpdater,
   21      FavIconFetcher,
   22      FavIconChecker,
   ..
   45      private _storage: Storage.StorageArea
   46      private _checkTabLoggable: LoggableTabChecker
   47:     private _updateTabVisit: VisitInteractionUpdater
   48      private _fetchFavIcon: FavIconFetcher
   49      private _pageDOMLoaded: TabEventChecker
   ..
   81          this._searchIndex = options.searchIndex
   82          this._checkTabLoggable = options.loggableTabCheck || shouldLogTab
   83:         this._updateTabVisit = updateVisitInteractionData
   84          this._fetchFavIcon = options.favIconFetch || fetchFavIcon
   85          this._pageDOMLoaded = options.domLoadCheck || whenPageDOMLoaded
   ..
  186      /**
  187       * Handles scheduling the main page indexing logic that happens on browser tab URL change,
  188:      * and updating the internally held tab manager state.
  189       */
  190      public handleUrl: TabChangeListener = async (tabId, { url }, tab) => {

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/tab-state.ts:
    7  import { remoteFunction, runInTab } from '../../util/webextensionRPC'
    8  import { isLoggable } from '..'
    9: import { TooltipInteractionInterface } from 'src/content-tooltip/types'
   10: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
   11  
   12: export interface TabProps extends TabState {
   13      storageAPI: Storage.Static
   14  }
   ..
   84          }
   85  
   86:         return runInTab<RibbonInteractionsInterface>(
   87              this.id,
   88          ).insertOrRemoveRibbon()
   ..
   94          }
   95  
   96:         return runInTab<TooltipInteractionInterface>(
   97              this.id,
   98          ).insertOrRemoveTooltip()
   ..
  104          }
  105  
  106:         return runInTab<RibbonInteractionsInterface>(this.id).updateRibbon()
  107      }
  108  

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/types.ts:
    7  }
    8  
    9: export interface ScrollState {
   10      pixel: number
   11      maxPixel: number
   ..
   15  
   16  /**
   17:  * Represents a tab as it related to the internal operations of the ext; some similarity
   18   * with the browser Tabs API's tab state.
   19   */
   20: export interface TabState {
   21      id?: number
   22      url: string
   ..
   42  
   43  export type LoggableTabChecker = (tab: Tabs.Tab) => Promise<boolean>
   44: export type VisitInteractionUpdater = (
   45:     interalTab: TabState,
   46      searchIndex: SearchIndex,
   47  ) => Promise<void>

/Users/oliversauter/GitHub/Memex/src/activity-logger/background/util.ts:
    1  import { blacklist } from '../../blacklist/background'
    2  import { isLoggable, getPauseState } from '..'
    3: import { LoggableTabChecker, VisitInteractionUpdater, TabState } from './types'
    4  import { SearchIndex } from 'src/search'
    5  
    .
   26   * @param {Tab} tabState The tab state to derive visit meta data from.
   27   */
   28: export const updateVisitInteractionData: VisitInteractionUpdater = (
   29      tabState: TabState,
   30      searchIndex: SearchIndex,

/Users/oliversauter/GitHub/Memex/src/analytics/store-tracking-option.js:
    2  import { remoteFunction } from 'src/util/webextensionRPC'
    3  import { SHOULD_TRACK_STORAGE_KEY as SHOULD_TRACK } from 'src/options/privacy/constants'
    4: import { EVENT_NAMES } from '../analytics/internal/constants'
    5  
    6  export async function storeTrackingOption(isOptIn, skipEventTrack = false) {

/Users/oliversauter/GitHub/Memex/src/analytics/types.ts:
    1: export interface Analytics {
    2      trackEvent(
    3          event: AnalyticsEvent,
    .
    6  }
    7  
    8: export interface AnalyticsEvent {
    9      category: string // ('Search', 'Blacklist', etc.).
   10      action: string // ('Add Entry', etc.).
   ..
   13  }
   14  
   15: export interface AnalyticsTrackEventOptions {
   16      waitForCompletion?: boolean
   17  }

/Users/oliversauter/GitHub/Memex/src/analytics/utils.ts:
    5  import { generateTokenIfNot } from 'src/util/generate-token'
    6  import { STORAGE_KEYS } from './constants'
    7: import { ACTIVE_EVENTS } from './internal/constants'
    8  
    9  /**

/Users/oliversauter/GitHub/Memex/src/analytics/backend/types.ts:
    1  import { AnalyticsTrackEventOptions } from '../types'
    2  
    3: export interface AnalyticsBackend {
    4      trackEvent(event, options?: AnalyticsTrackEventOptions): Promise<void>
    5  }

/Users/oliversauter/GitHub/Memex/src/analytics/internal/analytics.js:
   69  
   70      /**
   71:      * Track any user-invoked events internally.
   72       *
   73       * @param {EventTrackInfo} eventArgs
   ..
  122  
  123      /**
  124:      * Track any user-invoked events internally.
  125       *
  126       * @param {EventTrackInfo} eventArgs

/Users/oliversauter/GitHub/Memex/src/analytics/internal/background/index.js:
    2  import EventLogStorage from './storage'
    3  import sendToServer from '../send-to-server'
    4: import internalAnalytics from '../'
    5  
    6  export default class EventLogBackground {
    .
   21              },
   22              processEvent: (...params) => {
   23:                 return internalAnalytics.processEvent(...params)
   24              },
   25          })

/Users/oliversauter/GitHub/Memex/src/authentication/README.md:
    1  # Authentication
    2  
    3: Our production authentication implementation is provided by Firebase Auth. Auth is registered in the background script and can be used by content scripts over the remote functions interface.
    4  
    5  Authentication allows privileged and authorized access of specific features. Including the setup of user-protected multi-device synchronisation channels, and granting premium features to verified subscribed users. As well as a Single Sign-On experience across other Memex services, e.g. posting the the support forum.
    .
   30  ## Once - Manually
   31  
   32: To obtain the currently logged in user object from a page's content script, use the `auth` key of the usual remote function interfaces.
   33  I.e.
   34  
   ..
   42  auth.getUser()
   43  auth.refresh()
   44: // etc, as indicated by AuthRemoteFunctionsInterface
   45  ```
   46  
   ..
   67  #### Logging In
   68  
   69: Providing an interface to login is most easily handled by delegating to the UI library and login logic already provided by Firebase.
   70  
   71  We import a `StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'`. The slight caveat here is the Firebase app object needs to be re-initialised in this script's scope, so that this UI library can use it directly (using the Firebase app already setup in the background script and trying to serialise it over the ipc channel is problematic). This just means importing firebase with it's config by way of `import { firebase } from 'src/util/firebase-app-initialized'` and providing the `StyledFirebaseAuth` with the param `firebaseAuth={firebase.auth()}`.
   ..
   83  Users subscribed to a plan will have that plan's id and expiry date encoded into the Claims of their JWT auth token (provided by Firebase).
   84  
   85: The high level interface to check which plan a user has enabled can be accessed by:
   86  
   87  ```
   ..
   94  Subscription Checkout is handled by Chargebee.
   95  
   96: The `UserSubscription` class coordinates the logic that interacts with Chargbee, to present the user with a dialog box loading a page from Chargebee's server, which the user can use to continue with the subscription process.
   97  
   98: In order to provide a seamless login experience, where the page shown for subscription is already tied to the user logged into Memex, we use Firebase Functions to interact with Chargebee's server API.
   99  
  100: -   'Subscribe' is called by user interaction
  101  -   Chargebee UI helper script is loaded
  102  -   Firebase Function (server side) is called which:

/Users/oliversauter/GitHub/Memex/src/authentication/background/index.ts:
   12  } from './utils'
   13  import { remoteEventEmitter } from 'src/util/webextensionRPC'
   14: import { AuthRemoteEvents, AuthRemoteFunctionsInterface } from './types'
   15  
   16  export class AuthBackground {
   17      authService: AuthService
   18      subscriptionService: SubscriptionsService
   19:     remoteFunctions: AuthRemoteFunctionsInterface
   20  
   21      constructor(options: {

/Users/oliversauter/GitHub/Memex/src/authentication/background/types.ts:
    6  } from '@worldbrain/memex-common/lib/subscriptions/types'
    7  
    8: export interface AuthRemoteFunctionsInterface {
    9      getCurrentUser(): Promise<AuthenticatedUser | null>
   10      signOut(): void
   ..
   18  }
   19  
   20: export interface AuthRemoteEvents {
   21      onAuthStateChanged: (
   22          user: (AuthenticatedUser & { claims: Claims }) | null,

/Users/oliversauter/GitHub/Memex/src/authentication/components/AccountInfo.tsx:
   10  import Link from 'src/common-ui/components/link'
   11  
   12: interface Props {
   13      initiallyShowSubscriptionModal?: boolean
   14  }
   15  
   16: interface State {
   17      showSubscriptionModal: boolean
   18  }

/Users/oliversauter/GitHub/Memex/src/authentication/components/AuthConnector.tsx:
    9  import { Optionalize } from 'src/util/types'
   10  
   11: export interface UserProps {
   12      currentUser: AuthenticatedUser | null
   13      authorizedFeatures: UserFeature[]

/Users/oliversauter/GitHub/Memex/src/authentication/components/styles.css:
   20      left: 0.2em;
   21      bottom: 1em;
   22:     cursor: pointer;
   23  }
   24  
   ..
   31      font-weight: 600;
   32      align-self: center;
   33:     cursor: pointer;
   34      padding: 1em;
   35      padding-left: 0;

/Users/oliversauter/GitHub/Memex/src/authentication/components/UserScreen.tsx:
    9  const styles = require('./styles.css')
   10  
   11: interface Props {
   12      initiallyShowSubscriptionModal?: boolean
   13  }

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/pricing.style.ts:
   92          props.background ? props.background : 'rgb(64, 182, 154)'};
   93      color: white;
   94:     cursor: pointer;
   95      -webkit-box-align: center;
   96      align-items: center;
   ..
  150        font-weight: 400;
  151        color: ${colorSecondary}
  152:       cursor: pointer;
  153      }
  154      input[type='checkbox'] {

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/SubscribeModal.tsx:
    8  import { SubscriptionPreview } from 'src/authentication/components/Subscription/SubscriptionPreview'
    9  
   10: interface Props {
   11      onClose: () => void
   12  }
   13: interface State {
   14      showSubscribeWithLogin: boolean
   15  }

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/SubscriptionInnerOptions.tsx:
    3  import { UserPlan } from '@worldbrain/memex-common/lib/subscriptions/types'
    4  
    5: interface Props {
    6      openCheckoutBackupMonthly?: () => void
    7      openCheckoutBackupYearly?: () => void

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/SubscriptionOptionsChargebee.tsx:
   18  }
   19  
   20: interface Props {
   21      user: AuthenticatedUser | null
   22      onClose?: () => void
   ..
   25  }
   26  
   27: interface State {
   28      subscribed: boolean | null
   29      showSubscriptionOptions: boolean

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/SubscriptionPreview.tsx:
    3  import * as React from 'react'
    4  
    5: interface Props {
    6      onPress: () => void
    7  }

/Users/oliversauter/GitHub/Memex/src/authentication/components/Subscription/SubscriptionPriceBox.tsx:
   10  import Checkmark from 'src/common-ui/components/design-library/Checkmark'
   11  
   12: interface Props {
   13      onClick?: (...params: any) => any
   14      manageSubscription?: (...params: any) => any

/Users/oliversauter/GitHub/Memex/src/authentication/ui/user-subscription.ts:
    4  import { SubscriptionCheckoutOptions } from '@worldbrain/memex-common/lib/subscriptions/types'
    5  
    6: interface ChargebeeInstanceInterface {
    7      setPortalSession(getUrl: () => Promise<string>): void
    8      createChargebeePortal(): void
    .
   21      private cbInstance: any
   22  
   23:     constructor(chargebeeInstance: ChargebeeInstanceInterface) {
   24          this.cbInstance = chargebeeInstance
   25      }
   ..
   60  }
   61  
   62: export interface ChargebeeSubscriptionInterface {
   63      checkoutUserSubscription(
   64          options: SubscriptionCheckoutOptions,
   ..
   68  }
   69  
   70: export interface ChargebeeInterface {
   71      openCheckout: ({ hostedPage, success, close }) => any
   72      manage: ({ hostedPage }) => any
   ..
   76  export type SubscriptionManageEventEmitter = TypedEmitter<SubscriptionEvents>
   77  
   78: export interface SubscriptionEvents {
   79      error: (error: Error) => any
   80      externalUrl: (url: string) => any

/Users/oliversauter/GitHub/Memex/src/background-script/alarms.ts:
    5  import { EVENT_NOTIFS } from 'src/notifications/notifications'
    6  
    7: export interface AlarmConfig extends Alarms.CreateAlarmInfoType {
    8      listener: (bg: BackgroundScript) => void
    9  }
   10  
   11: export interface AlarmsConfig {
   12      [key: string]: AlarmConfig
   13  }

/Users/oliversauter/GitHub/Memex/src/background-script/constants.ts:
    1: import { API_HOST } from '../analytics/internal/constants'
    2  
    3  export const UNINSTALL_URL = `${API_HOST}/uninstall`

/Users/oliversauter/GitHub/Memex/src/background-script/quick-and-dirty-migrations.ts:
    2  import { normalizeUrl } from '@worldbrain/memex-url-utils'
    3  
    4: export interface Migrations {
    5      [storageKey: string]: (db: Dexie) => Promise<void>
    6  }

/Users/oliversauter/GitHub/Memex/src/background-script/setup.ts:
    9  } from 'src/activity-logger/background'
   10  import SearchBackground from 'src/search/background'
   11: import EventLogBackground from 'src/analytics/internal/background'
   12  import CustomListBackground from 'src/custom-lists/background'
   13  import TagsBackground from 'src/tags/background'
   ..
   43  import { Page } from 'src/search'
   44  
   45: export interface BackgroundModules {
   46      auth: AuthBackground
   47      notifications: NotificationBackground
   ..
  195      backgroundModules.social.setupRemoteFunctions()
  196      backgroundModules.directLinking.setupRemoteFunctions()
  197:     backgroundModules.directLinking.setupRequestInterceptor()
  198      backgroundModules.activityLogger.setupRemoteFunctions()
  199      backgroundModules.activityLogger.setupWebExtAPIHandlers()

/Users/oliversauter/GitHub/Memex/src/backup-restore/types.ts:
    2  export type NextBackup = number | null
    3  
    4: export interface BackupTimes {
    5      lastBackup: LastBackup
    6      nextBackup: NextBackup
    .
    9  export type BackupLocation = 'google-drive' | 'local'
   10  
   11: export interface BackupStatusType {
   12      state: 'no_backup' | 'success' | 'fail'
   13      backupId:

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/estimate-backup-size.ts:
    4  import { USERS_COLL } from 'src/social-integration/constants'
    5  
    6: export interface SizeEst {
    7      bytesWithBlobs: number
    8      bytesWithoutBlobs: number

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/index.ts:
    5  import { makeRemotelyCallable } from '../../util/webextensionRPC'
    6  import { setLocalStorage } from 'src/util/storage'
    7: import { setupRequestInterceptors } from './redirect'
    8  import BackupStorage, { LastBackupStorage } from './storage'
    9  import { BackupBackend } from './backend'
   ..
  117                  },
  118                  pauseRestore: async () => {
  119:                     await this.restoreProcedure.interruptable.pause()
  120                  },
  121                  resumeRestore: async () => {
  122:                     await this.restoreProcedure.interruptable.resume()
  123                  },
  124                  cancelRestore: async () => {
  125:                     await this.restoreProcedure.interruptable.cancel()
  126                  },
  127                  hasInitialBackup: async () => {
  ...
  144                          this.backend = await this.backendSelect.initLocalBackend()
  145                      }
  146:                     this.setupRequestInterceptor()
  147                      this.initBackendDependants()
  148                  },
  ...
  191                      return this.forgetAllChanges()
  192                  },
  193:                 setupRequestInterceptor: () => {
  194:                     return this.setupRequestInterceptor()
  195                  },
  196              },
  ...
  207          this.backend = await this.backendSelect.restoreBackend()
  208          if (this.backend) {
  209:             this.setupRequestInterceptor()
  210          }
  211          this.initBackendDependants()
  ...
  227          } else if (provider === 'google-drive') {
  228              backend = await this.backendSelect.initGDriveBackend()
  229:             this.setupRequestInterceptor(backend)
  230          }
  231  
  ...
  242      }
  243  
  244:     setupRequestInterceptor(backupBackend: BackupBackend = null) {
  245          const backend = backupBackend || this.backend
  246:         setupRequestInterceptors({
  247              webRequest: window['browser'].webRequest,
  248              handleLoginRedirectedBack: backend

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/redirect.ts:
    1  import { browser } from 'webextension-polyfill-ts'
    2  
    3: export function setupRequestInterceptors({
    4      webRequest,
    5      handleLoginRedirectedBack,

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/storage.ts:
  176  }
  177  
  178: export interface LastBackupStorage {
  179      getLastBackupTime(): Promise<Date>
  180      storeLastBackupTime(time: Date): Promise<any>

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/backend/types.ts:
    2  import NotificationBackground from 'src/notifications/background'
    3  
    4: export interface BackupObjectLocation {
    5      collection: string
    6      pk: string
    .
   11  }
   12  
   13: export interface ObjectChange<T = any> {
   14      collection: string
   15      objectPk: string
   ..
   19  }
   20  
   21: export interface ObjectChangeBatch {
   22      changes: Array<ObjectChange>
   23      forget: () => Promise<void>
   24  }
   25  
   26: export interface ObjectChangeImages {
   27      screenshot: string
   28      profilePic: string

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/backend/google-drive/token-manager.ts:
  102  
  103  export type DriveTokenType = 'access' | 'refresh'
  104: export interface DriveTokenStore {
  105      storeAccessToken(token: string, expiryDate: Date): Promise<any>
  106      retrieveAccessToken(): Promise<{ token: string; expiryDate: Date }>

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/backup.ts:
   14  const pickBy = require('lodash/pickBy')
   15  
   16: export interface BackupProgressInfo {
   17      state: 'preparing' | 'synching' | 'paused' | 'cancelled'
   18      totalChanges: number

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/interruptable.test.ts:
    1  import expect from 'expect'
    2: import Interruptable from './interruptable'
    3  
    4: describe('Interruptable', () => {
    5      it('should not execute steps if canceled', async () => {
    6          const calls = []
    7          const step = () => calls.push(calls.length)
    8  
    9:         const interruptable = new Interruptable()
   10:         await interruptable.execute(step)
   11          expect(calls).toEqual([0])
   12:         await interruptable.cancel()
   13:         await interruptable.execute(step)
   14          expect(calls).toEqual([0])
   15      })
   ..
   19          const step = () => calls.push(calls.length)
   20  
   21:         const interruptable = new Interruptable()
   22:         await interruptable.execute(step)
   23          expect(calls).toEqual([0])
   24  
   25:         await interruptable.pause()
   26:         const promise = interruptable.execute(step)
   27          expect(calls).toEqual([0])
   28  
   29:         await interruptable.resume()
   30          await promise
   31          expect(calls).toEqual([0, 1])
   32:         await interruptable.execute(step)
   33          expect(calls).toEqual([0, 1, 2])
   34      })
   35  
   36      it('should allow for canceling while loops', async () => {
   37:         const interruptable = new Interruptable()
   38:         await interruptable.whileLoop(
   39              () => true,
   40              () => {
   41:                 interruptable.cancel()
   42              },
   43          )
   ..
   47          const loops = []
   48  
   49:         const interruptable = new Interruptable()
   50:         await interruptable.pause()
   51:         const promise = interruptable.whileLoop(
   52              async () => loops.length < 2,
   53              () => {
   ..
   57  
   58          expect(loops).toEqual([])
   59:         await interruptable.resume()
   60          await promise
   61          expect(loops).toEqual([0, 1])
   ..
   65          const loops = []
   66  
   67:         const interruptable = new Interruptable()
   68:         const promise = interruptable.forOfLoop([1, 2], item => {
   69              loops.push(item)
   70:             interruptable.cancel()
   71          })
   72  
   ..
   78          const loops = []
   79  
   80:         const interruptable = new Interruptable()
   81:         await interruptable.pause()
   82:         const promise = interruptable.forOfLoop([1, 2], async item => {
   83              loops.push(item)
   84          })
   85  
   86          expect(loops).toEqual([])
   87:         await interruptable.resume()
   88          await promise
   89          expect(loops).toEqual([1, 2])

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/interruptable.ts:
    1: export default class Interruptable {
    2      cancelled: boolean = false
    3      paused: boolean = false

/Users/oliversauter/GitHub/Memex/src/backup-restore/background/procedures/restore/index.ts:
    4  import BackupStorage from '../../storage'
    5  import { BackupBackend, ObjectChange } from '../../backend'
    6: import Interruptable from '../interruptable'
    7  import { DownloadQueue } from './download-queue'
    8  import {
    .
   16  const zipObject = require('lodash/zipObject')
   17  
   18: export interface BackupRestoreInfo {
   19      status: 'preparing' | 'synching'
   20      totalChanges?: number
   ..
   30      info?: BackupRestoreInfo = null
   31      events?: EventEmitter
   32:     interruptable?: Interruptable
   33  
   34      logErrors: boolean
   ..
   55  
   56      get running() {
   57:         return !!this.interruptable
   58      }
   59  
   60      runner() {
   61          this.events = new EventEmitter()
   62:         this.interruptable = new Interruptable()
   63  
   64          const procedure = async () => {
   ..
   90                  })
   91  
   92:                 await this.interruptable.execute(() =>
   93                      this._restoreCollection(
   94                          'change-sets',
   ..
   98                      ),
   99                  )
  100:                 await this.interruptable.execute(() =>
  101                      this._restoreCollection(
  102                          'images',
  ...
  108  
  109                  await this._unblockDatabase()
  110:                 if (!this.interruptable.cancelled) {
  111                      this._startRecordingChanges()
  112                      this.events.emit('success')
  ...
  124                  return 'fail'
  125              } finally {
  126:                 this.interruptable = null
  127                  this.events = null
  128                  this.info = null
  ...
  169          writeObject: (object: any) => Promise<any>,
  170      ) {
  171:         await this.interruptable.whileLoop(
  172              () => queue.hasNext(),
  173              async () => {
  174                  const batch = await queue.getNext()
  175:                 await this.interruptable.forOfLoop(
  176                      batch.changes || batch.images,
  177                      async change => {

/Users/oliversauter/GitHub/Memex/src/backup-restore/content_script/index.ts:
    5  const isDOMContentLoaded = () =>
    6      new Promise<void>(resolve => {
    7:         timerId = setInterval(() => {
    8              if (document.readyState === 'complete') {
    9:                 clearInterval(timerId)
   10                  resolve()
   11              }

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/styles.css:
   50      composes: warningColor hoverColor from '../../common-ui/colors.css';
   51      font-weight: 500;
   52:     cursor: pointer;
   53      margin-top: 20px;
   54      padding: 3px 5px;
   ..
   81  .underline {
   82      text-decoration: underline;
   83:     cursor: pointer;
   84  }
   85  

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/container.logic.ts:
  316  }
  317  
  318: export interface ScreenConfig {
  319      component: React.Component
  320      state: { [key: string]: true }

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/onboarding-backup-mode.css:
   11  .selectionTitle {
   12      composes: providerTitle from 'src/backup-restore/ui/backup-pane/components/provider-list.css';
   13:     cursor: pointer;
   14  }
   15  
   ..
   31      display: flex;
   32      width: 90%;
   33:     cursor: pointer;
   34      justify-content: space-between;
   35  

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/provider-list.css:
   17      margin-right: 8px;
   18      margin-bottom: 5px;
   19:     cursor: pointer;
   20  }
   21  
   ..
   65      border: none;
   66      outline: none;
   67:     cursor: pointer;
   68      font-size: 15px;
   69      color: #0b0b69;

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/restore-confirmation.css:
   38      composes: removeIcon from '../../../../common-ui/icons.css';
   39      composes: nakedSquareButton from '../../../../common-ui/elements.css';
   40:     cursor: pointer;
   41      height: 24px;
   42      position: absolute;

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/restore-confirmation.tsx:
    4  const settingsStyle = require('src/options/settings/components/settings.css')
    5  
    6: interface Props {
    7      onConfirm: () => void
    8      onClose: () => void

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/overlays/styles.css:
   10      height: 2em;
   11      margin: 0px 20px;
   12:     cursor: pointer;
   13      opacity: 0.6;
   14  

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/components/overlays/types.ts:
    1: export interface OverlayProps {
    2      onClick: (action: string) => void
    3      disabled: boolean

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/overview.css:
   46      color: white;
   47      background: #173766;
   48:     cursor: pointer;
   49      padding: 8px;
   50      font-size: 0.8rem;
   ..
   77      float: right;
   78      text-align: right;
   79:     cursor: pointer;
   80      font-size: 15px;
   81      display: flex;
   ..
  116      margin-left: 15px;
  117      font-weight: 500;
  118:     cursor: pointer;
  119      font-size: 14px;
  120  }

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/overview.tsx:
   26  const localStyles = require('./overview.css')
   27  
   28: interface Props {
   29      onBackupRequested: (...args: any[]) => any
   30      onRestoreRequested: (...args: any[]) => any

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/restore-where.logic.ts:
    5  } from 'src/util/ui-logic'
    6  
    7: interface Providers {
    8      [provider: string]: boolean
    9  }
   10: interface State {
   11      provider: 'google-drive' | 'local'
   12      valid: boolean

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/restore-where.tsx:
   15  const STYLES = require('../../styles.css')
   16  
   17: interface Props {
   18      onChoice: () => void
   19  }

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/running-backup.tsx:
   47              </div>
   48              <div className={settingsStyle.infoText}>
   49:                 Please check your internet connectivity. If you still encounter issues please{' '}
   50                  <a href="mailto:support@worldbrain.io">contact support</a>.
   51              </div>

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/running-process.tsx:
   19  const STYLES = require('../../styles.css')
   20  
   21: interface Props {
   22      functionNames: {
   23          info: string
   ..
  240                              <MovingDotsLabel
  241                                  text="Finishing current batch"
  242:                                 intervalMs={500}
  243                              />
  244                          )}

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-pane/panes/setup-location.jsx:
   41  
   42      componentWillUnmount() {
   43:         clearInterval(this.timer)
   44      }
   45  

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-status-bar/BackupStatusBarContainer.tsx:
   12  } from 'src/backup-restore/types'
   13  
   14: interface Props {
   15      checkedIcon: string
   16      backupUrl: string
   17  }
   18  
   19: interface State {
   20      isAutomaticBackupEnabled: boolean
   21      isAutomaticBackupAllowed: boolean
   ..
  126  }
  127  
  128: interface BackupUIStateDependencies
  129      extends Pick<
  130          State,
  ...
  135      > {}
  136  
  137: export interface BackupUIState {
  138      state: 'success' | 'fail' | 'autoBackup' | 'no_backup'
  139      header?: string
  ...
  178              message = messages.unsuccessful_backup_auto_enabled
  179          } else if (backupStatus.backupId === 'backup_error') {
  180:             message = messages.unsuccessful_backup_internet
  181          } else if (backupStatus.backupId === 'drive_size_empty') {
  182              message = messages.unsuccessful_backup_drive_size

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-status-bar/components/StatusBar.css:
   20      font-size: 14px;
   21      text-decoration: none;
   22:     cursor: pointer;
   23      margin-right: 5px;
   24      text-align: right;

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-status-bar/components/StatusBar.tsx:
   10  const styles = require('./StatusBar.css')
   11  
   12: interface Props {
   13      backupTimes: BackupTimes
   14      hover: boolean

/Users/oliversauter/GitHub/Memex/src/backup-restore/ui/backup-status-bar/components/StatusOverlay.tsx:
   16  import { LoadingIndicator } from 'src/common-ui/components'
   17  
   18: interface Props {
   19      header?: string
   20      crossIcon: string

/Users/oliversauter/GitHub/Memex/src/blacklist/background/index.js:
    1  import { makeRemotelyCallable } from 'src/util/webextensionRPC'
    2: import * as blacklist from './interface'
    3  import * as constants from './constants'
    4  

/Users/oliversauter/GitHub/Memex/src/bookmarks/background/types.ts:
    1: export interface BookmarksInterface {
    2      addPageBookmark({
    3          url,

/Users/oliversauter/GitHub/Memex/src/common-ui/colors.css:
  136  
  137      &:placeholder-shown {
  138:         font-family: 'Inter', sans-serif;
  139          color: color3;
  140      }
  141  
  142      &:placeholder {
  143:         font-family: 'Inter', sans-serif;
  144          color: color3;
  145      }
  ...
  241      border-radius: 3px;
  242      color: color4;
  243:     cursor: pointer;
  244      background: color12;
  245  
  ...
  254      border-radius: 5px;
  255      font-weight: bold;
  256:     cursor: pointer;
  257      text-decoration: none;
  258  
  ...
  267      color: white;
  268      font-weight: bold;
  269:     cursor: pointer;
  270      opacity: 0.7;
  271  

/Users/oliversauter/GitHub/Memex/src/common-ui/elements.css:
   21  
   22  .fontFamily {
   23:     font-family: 'Inter', sans-serif;
   24  }
   25  
   ..
   94      border-radius: 22px;
   95      color: color16;
   96:     cursor: pointer;
   97      font-size: 0.9rem;
   98      line-height: 1.2rem;
   ..
  112      font-size: 14px;
  113      font-weight: 500;
  114:     cursor: pointer;
  115      text-decoration: none;
  116      border: none;
  ...
  132      border-radius: 3px;
  133      color: color4;
  134:     cursor: pointer;
  135  
  136      &:hover {
  ...
  150      font-size: 14px;
  151      color: #222;
  152:     font-family: 'Inter', sans-serif;
  153      border: 1px solid #e2e2e2;
  154      border-radius: 3px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/annotation-list.css:
   16      font-size: 13px;
   17      justify-content: center;
   18:     cursor: pointer;
   19      animation: onload 0.3s cubic-bezier(0.65, 0.05, 0.36, 1);
   20      display: flex;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/annotation-list.tsx:
   12  const styles = require('./annotation-list.css')
   13  
   14: interface OwnProps {
   15      env: 'inpage' | 'overview'
   16      /** Override for expanding annotations by default */
   ..
   24  }
   25  
   26: interface DispatchProps {
   27      handleEditAnnotation: (url: string, comment: string, tags: string[]) => void
   28      handleDeleteAnnotation: (url: string) => void
   ..
   30  }
   31  
   32: interface StateProps {}
   33  
   34  type Props = OwnProps & DispatchProps & StateProps
   35  
   36: interface State {
   37      /** Boolean to denote whether the list is expanded or not */
   38      isExpanded: boolean

/Users/oliversauter/GitHub/Memex/src/common-ui/components/button-tooltip.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .tooltipTrigger {
    .
   13      min-width: max-content;
   14      align-items: center;
   15:     font-family: 'Inter', sans-serif;
   16  }
   17  
   ..
   86      text-align: center;
   87      width: fit-content;
   88:     font-family: 'Inter', sans-serif;
   89  }
   90  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/button-tooltip.tsx:
    4  const styles = require('./button-tooltip.css')
    5  
    6: interface Props {
    7      children: React.ReactNode
    8      tooltipText: string
    .
   10  }
   11  
   12: interface State {
   13      displayTooltip: boolean
   14  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/Checkbox.css:
   28      align-items: center;
   29      width: 100%;
   30:     cursor: pointer;
   31  }
   32  
   ..
   39      width: 25px;
   40      height: 25px;
   41:     cursor: pointer;
   42      display: flex;
   43      align-items: center;
   ..
   61  .label__checkbox {
   62      display: none;
   63:     cursor: pointer;
   64      padding: 2px;
   65  }
   ..
   67  .label__text {
   68      font-size: 0.9rem;
   69:     cursor: pointer;
   70      display: flex;
   71      align-items: center;
   ..
   91      justify-content: space-between;
   92      width: 100%;
   93:     cursor: pointer;
   94  
   95      & > label {
   96:         cursor: pointer;
   97      }
   98  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/Checkbox.tsx:
    8  ) => void
    9  
   10: export interface Props {
   11      id: string
   12      handleChange: CheckboxToggle

/Users/oliversauter/GitHub/Memex/src/common-ui/components/ConfirmModal.css:
   30  .btn {
   31      border: none;
   32:     cursor: pointer;
   33      font-size: 17px;
   34      font-weight: 600;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/ConfirmModal.tsx:
    7  const styles = require('./ConfirmModal.css')
    8  
    9: export interface Props {
   10      isShown: boolean
   11      message: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdown.css:
    7      display: flex;
    8      padding: 8px 20px 8px 20px;
    9:     cursor: pointer;
   10      border-bottom: 1px solid color9;
   11      word-wrap: break-word;
   ..
   83      margin-top: 3px;
   84      color: color4;
   85:     cursor: pointer;
   86  }
   87  
   ..
  117          font-style: italic;
  118          font-weight: 500;
  119:         font-family: 'Inter', sans-serif;
  120      }
  121  
  ...
  151  
  152      & * {
  153:         font-family: 'Inter', sans-serif;
  154      }
  155  }
  ...
  260      background-size: 10px;
  261      display: inline-block;
  262:     cursor: pointer;
  263      width: 10px;
  264      height: 10px;
  ...
  314  .closeButton {
  315      padding: 0;
  316:     cursor: pointer;
  317      animation: appear 0.4s forwards 0s;
  318  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdown.tsx:
    8  import { ClickHandler } from 'src/popup/types'
    9  
   10: export interface Props {
   11      children?: any[]
   12      onTagSearchChange?: (s: string) => void

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdownAnnotation.css:
    7      display: flex;
    8      padding: 8px 20px 8px 20px;
    9:     cursor: pointer;
   10      border-bottom: 1px solid #eaecef;
   11      word-wrap: break-word;
   ..
  110          font-style: italic;
  111          font-weight: 500;
  112:         font-family: 'Inter', sans-serif;
  113      }
  114  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdownSidebar.css:
    3  
    4  .tagContainer * {
    5:     font-family: 'Inter', sans-serif;
    6  }
    7  
    .
   11      display: flex;
   12      padding: 8px 15px 8px 20px;
   13:     cursor: pointer;
   14      border-bottom: 1px solid color9;
   15      word-wrap: break-word;
   ..
   89      margin-top: 3px;
   90      color: color4;
   91:     cursor: pointer;
   92  }
   93  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/IndexDropdownUserRow.tsx:
    4  const styles = require('./IndexDropdown.css')
    5  
    6: export interface Props {
    7      value: any
    8  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/link.tsx:
    4  const styles = require('./link.css')
    5  
    6: export interface Props {
    7      url: string
    8      text?: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/LoadingIndicator.tsx:
    4  const styles = require('./LoadingIndicator.css')
    5  
    6: export interface Props {
    7      className?: string
    8  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/MigrationNotice.css:
   36      padding: 10px 35px;
   37      font-size: 18px;
   38:     cursor: pointer;
   39  
   40      &[disabled] {

/Users/oliversauter/GitHub/Memex/src/common-ui/components/Modal.css:
    2      border: none;
    3      transition: all 200ms;
    4:     cursor: pointer;
    5  }
    6  
    .
   15      z-index: 2147483646;
   16      background: rgba(0, 0, 0, 0.3);
   17:     cursor: pointer;
   18      justify-content: center;
   19      align-items: center;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/moving-dots-label.jsx:
    5      static propTypes = {
    6          text: PropTypes.string.isRequired,
    7:         intervalMs: PropTypes.number.isRequired,
    8      }
    9  
   ..
   11  
   12      componentDidMount() {
   13:         this.animationInterval = setInterval(() => {
   14              this.advance()
   15:         }, this.props.intervalMs)
   16      }
   17  
   18      componentWillUnmount() {
   19:         clearTimeout(this.animationInterval)
   20      }
   21  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/overview-overlay.css:
   20      text-align: center;
   21      font-size: 21px;
   22:     cursor: pointer;
   23  }
   24  
   ..
   36      font-size: 17px;
   37      margin-top: 30px;
   38:     cursor: pointer;
   39  }
   40  
   ..
   49      margin-left: 10px;
   50      font-weight: bold;
   51:     cursor: pointer;
   52  
   53      &:hover {

/Users/oliversauter/GitHub/Memex/src/common-ui/components/overview-overlay.tsx:
   10  const settingsStyle = require('src/options/settings/components/settings.css')
   11  
   12: interface Props {
   13      disabled: boolean
   14      header: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/primary-button.css:
    2      composes: CTA from 'src/common-ui/colors.css';
    3      display: inline-block;
    4:     cursor: pointer;
    5      padding: 10px 20px;
    6      font-size: 14px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/progress-step-container.tsx:
    5  const styles = require('./progress-step.css')
    6  
    7: interface Props {
    8      totalSteps: number
    9      onStepClick: (step: number) => () => void

/Users/oliversauter/GitHub/Memex/src/common-ui/components/progress-step.css:
    9      background: color8;
   10      border-radius: 10px;
   11:     cursor: pointer;
   12      display: inline-block;
   13      height: 10px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/progress-step.tsx:
    4  const styles = require('./progress-step.css')
    5  
    6: interface Props {
    7      onClick: () => void
    8      isSeen?: boolean

/Users/oliversauter/GitHub/Memex/src/common-ui/components/qr-canvas.tsx:
    2  import QRCode from 'qrcode'
    3  
    4: export interface Props extends HTMLProps<HTMLCanvasElement> {
    5      toEncode: string
    6      errorHandler: (e: Error) => void

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.css:
   38  
   39      &:hover {
   40:         cursor: pointer;
   41      }
   42  
   ..
  103      & + label {
  104          position: relative;
  105:         cursor: pointer;
  106          padding: 0;
  107      }
  ...
  314      height: 24px;
  315      background-repeat: no-repeat;
  316:     cursor: pointer;
  317      outline: none;
  318      background-position: center;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/result-item.tsx:
   14  const styles = require('./result-item.css')
   15  
   16: export interface Props extends Partial<SocialPage> {
   17      url: string
   18      title?: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/semi-circular-ribbon.css:
    6      width: 22px;
    7      height: 22px;
    8:     cursor: pointer;
    9  }
   10  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/semi-circular-ribbon.tsx:
    5  const pageStyles = require('./result-item.css')
    6  
    7: export interface Props {
    8      crossIconSrc?: string
    9      title?: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/small-button.css:
    7      margin-left: 10px;
    8      border-radius: 3px;
    9:     cursor: pointer;
   10      padding: 9px 6px;
   11      font-size: 13px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/small-button.tsx:
    4  const styles = require('./small-button.css')
    5  
    6: interface Props {
    7      children: React.ReactChild
    8      onClick: (...args: any[]) => any

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-holder.tsx:
    5  const styles = require('./tag-holder.css')
    6  
    7: interface Props {
    8      tags: string[]
    9      maxTagsLimit: number

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tag-pill.tsx:
    4  const styles = require('./tag-holder.css')
    5  
    6: export interface Props {
    7      value: string
    8      noBg: boolean

/Users/oliversauter/GitHub/Memex/src/common-ui/components/TextAreaDynamicRows.tsx:
    2  import * as constants from 'src/sidebar-overlay/comment-box/constants'
    3  
    4: interface ChildProps {
    5      // children: ReactChild
    6  }

/Users/oliversauter/GitHub/Memex/src/common-ui/components/TextInputControlled.tsx:
   31  }
   32  
   33: export interface ControlledTextInputProps {
   34      onChange: (s: string) => void
   35      specialHandlers?: { test: (e) => boolean; handle: (e) => void }[]
   ..
   38      type?: 'textarea' | 'input'
   39  }
   40: export interface Selection {
   41      start: number
   42      end: number
   43      direction: 'forward' | 'backward'
   44  }
   45: interface ControlledTextInputState {
   46      text: string
   47      selection: Selection
   ..
  116      keyupHandler = () => this.updateSelectionState()
  117  
  118:     // Update the internal state representation of the text input's selection
  119      updateSelectionState = () => {
  120          return this.setState({ selection: this.getSelectionFromDom() })
  ...
  134      })
  135  
  136:     // Important to keep the content (internal state + parent component handler) and the selection (internal state)
  137      // in sync when changes are made outside of our managed key presses, e.g. Copy/Paste.
  138      handleOnChange = e => {
  ...
  155      // -- Methods primarily to do with key presses --
  156  
  157:     // The main logic intercepting key-presses
  158      private handleTextElementKeyDown = e => {
  159          // First check if we have been given a special handler to check for by the parent component
  ...
  401  }
  402  
  403: export interface SelectionState {
  404      selection: Selection
  405      text: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/ToggleSwitch.css:
    3  
    4  .switch {
    5:     cursor: pointer;
    6      text-indent: -9999px;
    7      width: 45px;
    .
   49  
   50  .searchSwitch {
   51:     cursor: pointer;
   52  }
   53  

/Users/oliversauter/GitHub/Memex/src/common-ui/components/tooltip.tsx:
    4  const styles = require('./tooltip.css')
    5  
    6: export interface Props {
    7      children: React.ReactNode
    8      position: string

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/buttons.tsx:
    6      padding: 1em 0;
    7      display: flex;
    8:     cursor: pointer;
    9      max-width: 280px;
   10      min-width: 260px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/ModalBox.tsx:
   12  `
   13  const HeaderText = styled.h2`
   14:     font-family: Inter;
   15      font-style: normal;
   16      font-weight: 500;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/typography.tsx:
   31      margin: 5px;
   32      color: ${colorPrimary};
   33:     cursor: pointer;
   34      padding: 5px;
   35  `

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/CancelAction.tsx:
   15      background: ${props => (props.disabled ? colorDisabled : colorError)};
   16      border-radius: 5px;
   17:     cursor: pointer;
   18      display: flex;
   19      align-items: center;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/ExternalLink.tsx:
    8  
    9  const StyledExternalLink = styled.a`
   10:     cursor: pointer;
   11      display: inline-block;
   12      padding-left: 5px;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/LesserLink.tsx:
    8  
    9  const StyledLesserLink = styled.div`
   10:     cursor: pointer;
   11      display: inline-block;
   12  `

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/Link.tsx:
    8  
    9  const StyledLink = styled.div`
   10:     cursor: pointer;
   11      display: inline-block;
   12  `

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/PrimaryAction.tsx:
   14      background: ${props => (props.disabled ? colorDisabled : colorPrimary)};
   15      border-radius: 5px;
   16:     cursor: pointer;
   17      display: inline-block;
   18      white-space: nowrap;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/actions/SecondaryAction.tsx:
   12      box-sizing: border-box;
   13      border-radius: 5px;
   14:     cursor: pointer;
   15      display: inline-block;
   16      white-space: nowrap;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/form/InputTextField.tsx:
    2  
    3  export const InputTextField = styled.input`
    4:     font-family: 'Inter', sans-serif;
    5      font-size: 14px;
    6      font-weight: 400;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/overlay-menu/MenuItem.tsx:
   11      font-size: 14px;
   12      text-decoration: none;
   13:     cursor: pointer;
   14      display: flex;
   15      align-items: center;

/Users/oliversauter/GitHub/Memex/src/common-ui/components/design-library/overlay-menu/OverlayMenu.tsx:
    3  import styled from 'styled-components'
    4  
    5: interface Props {
    6      menuHeader: any
    7      menuItems: MenuItemType[]
    8  }
    9  
   10: export interface MenuItemType {
   11      label: string
   12      handler: () => void
   13  }
   14  
   15: interface State {
   16      hover: boolean
   17  }

/Users/oliversauter/GitHub/Memex/src/common-ui/containers/AddListDropdownContainer.tsx:
   14  import { notifications } from 'src/util/remote-functions-background'
   15  
   16: export interface Props {
   17      env?: 'inpage' | 'overview'
   18      mode: string
   ..
   36  }
   37  
   38: export interface State {
   39      showError: boolean
   40      errMsg: string
   ..
  111                  err =>
  112                      notifications.create({
  113:                         requireInteraction: false,
  114                          title: 'Memex error: list adding',
  115                          message: err.message,

/Users/oliversauter/GitHub/Memex/src/common-ui/containers/IndexDropdown.tsx:
   15  import { notifications } from 'src/util/remote-functions-background'
   16  
   17: export interface Props {
   18      env?: 'inpage' | 'overview'
   19      source: 'tag' | 'domain' | 'user' | 'hashtag'
   ..
   53  }
   54  
   55: export interface State {
   56      showError: boolean
   57      errMsg: string
   ..
  128                  err =>
  129                      notifications.create({
  130:                         requireInteraction: false,
  131                          title: 'Memex error: tag adding',
  132                          message: err.message,

/Users/oliversauter/GitHub/Memex/src/common-ui/crowdfunding/components/CFBox.css:
   56      font-weight: 200;
   57      text-align: center;
   58:     font-family: 'Inter', sans-serif;
   59  }
   60  
   ..
   65      border-radius: 3px;
   66      border: 2px solid #3eb995;
   67:     cursor: pointer;
   68      text-decoration: none;
   69      font-size: 15px;
   ..
   84      vertical-align: middle;
   85      text-align: right;
   86:     cursor: pointer;
   87      font-weight: 100;
   88  }

/Users/oliversauter/GitHub/Memex/src/common-ui/crowdfunding/components/CFBox.tsx:
    3  import { remoteFunction } from '../../../util/webextensionRPC'
    4  import Message from './Message'
    5: import { EVENT_NAMES } from '../../../analytics/internal/constants'
    6  
    7  const styles = require('./CFBox.css')
    8  
    9: export interface Props {
   10      onClose: MouseEventHandler
   11  }

/Users/oliversauter/GitHub/Memex/src/common-ui/crowdfunding/components/CFModal.css:
   29      right: 0;
   30      z-index: 99999;
   31:     cursor: pointer;
   32  
   33      &:disabled,
   ..
   43      font-size: 20px;
   44      color: #ccc;
   45:     cursor: pointer;
   46      background-image: url('/img/cross_grey.svg');
   47      background-size: 15px;
   ..
   95      border-radius: 3px;
   96      border: 2px solid #3eb995;
   97:     cursor: pointer;
   98      font-weight: 500;
   99      text-decoration: none;

/Users/oliversauter/GitHub/Memex/src/common-ui/crowdfunding/components/CFModal.tsx:
    5  import { Overlay } from '../../components'
    6  import Message from './Message'
    7: import { EVENT_NAMES } from '../../../analytics/internal/constants'
    8  
    9  const styles = require('./CFModal.css')
   10  
   11: export interface Props {
   12      onClose: MouseEventHandler
   13      tabs: Tabs.Static

/Users/oliversauter/GitHub/Memex/src/common-ui/crowdfunding/components/Message.tsx:
    1  import React from 'react'
    2  
    3: interface Styles {
    4      [propName: string]: string
    5  }
    6  
    7: interface Props {
    8      styles: Styles
    9      context: string

/Users/oliversauter/GitHub/Memex/src/connectivity-checker/background/index.ts:
    3  
    4  export class ConnectivityCheckerBackground extends EventEmitter {
    5:     static DEF_CHECK_INTERVAL = 60000
    6      static DEF_CHECK_TIMEOUT = 10000
    7      static DEF_TARGET =
    .
   19              target?: string
   20              checkingTimeout?: number
   21:             checkingInterval?: number
   22          },
   23      ) {
   24          super()
   25  
   26:         this.props.checkingInterval =
   27:             props.checkingInterval ||
   28:             ConnectivityCheckerBackground.DEF_CHECK_INTERVAL
   29  
   30          this.props.xhr.timeout =
   ..
   38      private handleProcessingError = (err: Error) => {}
   39  
   40:     async waitUntilConnected(intervalInMs = this.props.checkingInterval) {
   41          // Use the Promise created by previous calls if existing
   42          if (this.checkingConnectionWait) {
   ..
   60                  },
   61                  {
   62:                     intervalInMs,
   63                      onError: this.handleProcessingError,
   64                  },

/Users/oliversauter/GitHub/Memex/src/content-tooltip/content_script.ts:
    7      userSelectedText,
    8      removeTooltip,
    9: } from './interactions'
   10  import ToolbarNotifications from '../toolbar-notification/content_script'
   11  import {
   12      conditionallyShowOnboardingNotifications,
   13      conditionallyRemoveSelectOption,
   14: } from './onboarding-interactions'
   15  import {
   16      getTooltipState,
   ..
   23      highlightAnnotations,
   24      removeHighlights,
   25: } from 'src/sidebar-overlay/content_script/highlight-interactions'
   26  import { STAGES } from 'src/overview/onboarding/constants'
   27  import {
   ..
   30      createAndCopyDirectLink,
   31      createHighlight,
   32: } from 'src/direct-linking/content_script/interactions'
   33  import { KeyboardShortcuts } from './types'
   34  

/Users/oliversauter/GitHub/Memex/src/content-tooltip/interactions.ts:
    6      createAnnotation,
    7      createHighlight,
    8: } from '../direct-linking/content_script/interactions'
    9  import { setupUIContainer, destroyUIContainer } from './components'
   10  import {
   ..
   13  } from '../util/webextensionRPC'
   14  import { injectCSS } from '../search-injection/dom'
   15: import { conditionallyShowHighlightNotification } from './onboarding-interactions'
   16: import { TooltipInteractionInterface } from 'src/content-tooltip/types'
   17  import {
   18      highlightAnnotations,
   19      removeHighlights,
   20: } from 'src/sidebar-overlay/content_script/highlight-interactions'
   21: import { toggleSidebarOverlay } from 'src/direct-linking/content_script/interactions'
   22  
   23  const getAnnotsByUrlRPC = remoteFunction('getAllAnnotationsByUrl')
   ..
  139   */
  140  export const setupRPC = ({ toolbarNotifications }) => {
  141:     makeRemotelyCallableType<TooltipInteractionInterface>({
  142          showContentTooltip: async () => {
  143              if (!showTooltip) {

/Users/oliversauter/GitHub/Memex/src/content-tooltip/onboarding-interactions.ts:
    1  import { remoteFunction } from 'src/util/webextensionRPC'
    2: import { EVENT_NAMES } from 'src/analytics/internal/constants'
    3  
    4  import { getLocalStorage } from 'src/util/storage'

/Users/oliversauter/GitHub/Memex/src/content-tooltip/types.ts:
    1: export interface Shortcut {
    2      enabled: boolean
    3      shortcut: string
    4  }
    5  
    6: export interface KeyboardShortcuts {
    7      shortcutsEnabled?: boolean
    8      createAnnotation: Shortcut
    .
   17  }
   18  
   19: export interface TooltipInteractionInterface {
   20      showContentTooltip: () => Promise<any>
   21      insertTooltip: ({ override }?: { override?: boolean }) => any

/Users/oliversauter/GitHub/Memex/src/content-tooltip/components/container.jsx:
   12  } from './tooltip-states'
   13  
   14: import { conditionallyRemoveSelectOption } from '../onboarding-interactions'
   15  import { STAGES } from 'src/overview/onboarding/constants'
   16: import { userSelectedText } from '../interactions'
   17  import * as Mousetrap from 'mousetrap'
   18  import { remoteFunction } from 'src/util/webextensionRPC'
   ..
   20      highlightAnnotations,
   21      removeHighlights,
   22: } from '../../sidebar-overlay/content_script/highlight-interactions'
   23  import {
   24      getTooltipState,
   ..
   26      convertKeyboardEventToKeyString,
   27  } from '../utils'
   28: import { toggleSidebarOverlay } from 'src/direct-linking/content_script/interactions'
   29  
   30  class TooltipContainer extends React.Component {

/Users/oliversauter/GitHub/Memex/src/content-tooltip/components/tooltip.css:
   26  
   27      & > * {
   28:         font-family: 'Inter';
   29      }
   30  }
   ..
   39      width: 10px;
   40      position: absolute;
   41:     pointer-events: none;
   42      border-color: rgba(15, 15, 15, 0.2);
   43      border-width: 1px;
   ..
  125  
  126      & div {
  127:         cursor: pointer;
  128          display: flex;
  129          flex-direction: row;
  ...
  167      display: block;
  168      margin-top: 3px;
  169:     cursor: pointer;
  170  
  171      & .linkReadyStrong {
  ...
  238      z-index: 100001;
  239      top: -12px;
  240:     cursor: pointer;
  241      animation: slideIn 0.05s ease-in-out;
  242  }
  ...
  256      background: #3eb995;
  257      color: white;
  258:     cursor: pointer;
  259      font-size: 15px;
  260      width: 60%;
  ...
  269  .smallButton img {
  270      display: block;
  271:     cursor: pointer;
  272  }
  273  

/Users/oliversauter/GitHub/Memex/src/custom-lists/Readme.md:
    1  # Custom Lists(Collections)
    2  
    3: This code provides the interface for collections. The main container i.e `Index.jsx` gets mounted in the sidebar on the left in the overview. This direcory holds all the storage and state management for the custom-lists feature.
    4  
    5  ## Directory structure
    .
   39  -   `background`: contains all the backgroud stuff(storage calls) related to this feature.
   40      -   `storage.ts`: Contains calls to the storage manager for CRUD operations.
   41:     -   `index.js`: Abstract away the storage manager calls from the user interface.
   42  -   All the redux state management is in `actions.js`, `reducer.js` and `selectors.js`.
   43  

/Users/oliversauter/GitHub/Memex/src/custom-lists/types.ts:
    1  import { PageList } from 'src/custom-lists/background/types'
    2  
    3: export interface State {
    4      activeListIndex: number
    5      listFilterIndex: string

/Users/oliversauter/GitHub/Memex/src/custom-lists/background/index.ts:
    5  import { makeRemotelyCallable } from 'src/util/webextensionRPC'
    6  import CustomListStorage from './storage'
    7: import internalAnalytics from '../../analytics/internal'
    8: import { EVENT_NAMES } from '../../analytics/internal/constants'
    9  import { TabManager } from 'src/activity-logger/background/tab-manager'
   10  import { Page, SearchIndex } from 'src/search'
   11: import { Tab, CustomListsInterface } from './types'
   12  
   13  export default class CustomListBackground {
   14      storage: CustomListStorage
   15      _createPage: SearchIndex['createPageViaBmTagActs'] // public so tests can override as a hack
   16:     public remoteFunctions: CustomListsInterface
   17      private tabMan: TabManager
   18      private windows: Windows.Static
   ..
  128  
  129      async createCustomList({ name }: { name: string }): Promise<number> {
  130:         internalAnalytics.processEvent({
  131              type: EVENT_NAMES.CREATE_COLLECTION,
  132          })
  ...
  157  
  158      async insertPageToList({ id, url }: { id: number; url: string }) {
  159:         internalAnalytics.processEvent({
  160              type: EVENT_NAMES.INSERT_PAGE_COLLECTION,
  161          })
  ...
  171  
  172      async removeList({ id }: { id: number }) {
  173:         internalAnalytics.processEvent({
  174              type: EVENT_NAMES.REMOVE_COLLECTION,
  175          })
  ...
  181  
  182      async removePageFromList({ id, url }: { id: number; url: string }) {
  183:         internalAnalytics.processEvent({
  184              type: EVENT_NAMES.REMOVE_PAGE_COLLECTION,
  185          })

/Users/oliversauter/GitHub/Memex/src/custom-lists/background/types.ts:
    1: export interface PageList {
    2      id: number
    3      name: string
    .
    8  }
    9  
   10: export interface PageListEntry {
   11      pageUrl: string
   12      crearedAt: Date
   ..
   15  }
   16  
   17: export interface Tab {
   18      tabId: number
   19      url: string
   20  }
   21  
   22: export interface CustomListsInterface {
   23      createCustomList: any
   24      insertPageToList: any

/Users/oliversauter/GitHub/Memex/src/custom-lists/components/overview/sidebar/CreateListForm.css:
   33      border: none;
   34      background-repeat: no-repeat;
   35:     cursor: pointer;
   36      outline: none;
   37      background-color: transparent;

/Users/oliversauter/GitHub/Memex/src/custom-lists/components/overview/sidebar/Index.css:
   10  .collection {
   11      color: color4;
   12:     cursor: pointer;
   13      display: flex;
   14      align-items: center;
   ..
   74      background-repeat: no-repeat;
   75      background-size: contain;
   76:     cursor: pointer;
   77      outline: none;
   78      padding: 0px;

/Users/oliversauter/GitHub/Memex/src/custom-lists/components/overview/sidebar/list-item.css:
    8      position: relative;
    9      width: 100%;
   10:     cursor: pointer;
   11  
   12      &:hover {
   ..
   39      background-size: 60%;
   40      background-position: center;
   41:     cursor: pointer;
   42      outline: none;
   43  }
   ..
   70      color: color4;
   71      font-weight: 400;
   72:     cursor: pointer;
   73      width: 100%;
   74  }

/Users/oliversauter/GitHub/Memex/src/custom-lists/components/overview/sidebar/list-item.tsx:
    4  const styles = require('./list-item.css')
    5  
    6: export interface Props {
    7      listName: string
    8      isFiltered: boolean
    .
   13  }
   14  
   15: interface State {
   16      isMouseInside: boolean
   17      isDragInside: boolean

/Users/oliversauter/GitHub/Memex/src/custom-lists/components/overview/sidebar/my-collections.tsx:
    4  const styles = require('./Index.css')
    5  
    6: interface Props {
    7      handleRenderCreateList: () => void
    8      isForInpage?: boolean

/Users/oliversauter/GitHub/Memex/src/dev/stories/preview-head.html:
    5      <meta charset="UTF-8">
    6      <link rel="stylesheet" type="text/css" href="/popup.css">
    7: 	<link rel="stylesheet" href="https://rsms.me/inter/inter.css">
    8  </head>
    9  </html>

/Users/oliversauter/GitHub/Memex/src/direct-linking/types.ts:
    1: import { Anchor } from 'src/direct-linking/content_script/interactions'
    2  
    3: export interface Annotation {
    4      pageTitle: string
    5      pageUrl: string
    .
   16  }
   17  
   18: export interface AnnotListEntry {
   19      listId: number
   20      url: string
   21  }
   22  
   23: export interface AnnotationRequest {
   24      memexLinkOrigin: string
   25      // urlWithoutProtocol: string
   ..
   28  }
   29  
   30: interface StoredAnnotationRequest extends AnnotationRequest {
   31      annotationPromise: Promise<Annotation>
   32  }
   33  
   34: export interface StoredAnnotationRequestMap {
   35      [tabId: string]: StoredAnnotationRequest
   36  }

/Users/oliversauter/GitHub/Memex/src/direct-linking/utils.js:
    6      promiseCreator,
    7      condition,
    8:     { intervalMiliseconds, timeoutMiliseconds },
    9  ) {
   10      const startMs = Date.now()
   ..
   35              }
   36  
   37:             setTimeout(tryOrRetryLater, intervalMiliseconds)
   38          }
   39  

/Users/oliversauter/GitHub/Memex/src/direct-linking/background/index.ts:
    9  } from 'src/util/webextensionRPC'
   10  import DirectLinkingBackend from './backend'
   11: import { setupRequestInterceptor } from './redirect'
   12  import { AnnotationRequests } from './request'
   13  import AnnotationStorage from './storage'
   ..
   18  import SocialBG from 'src/social-integration/background'
   19  import { buildPostUrlId } from 'src/social-integration/util'
   20: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
   21  import { SearchIndex } from 'src/search'
   22  
   23: interface TabArg {
   24      tab: Tabs.Tab
   25  }
   ..
   93      }
   94  
   95:     setupRequestInterceptor() {
   96:         setupRequestInterceptor({
   97              requests: this.requests,
   98              webRequest: this.options.browserAPIs.webRequest,
   ..
  128                  // Necessary to insert the ribbon/sidebar in case the user has turned
  129                  // it off.
  130:                 await runInTab<RibbonInteractionsInterface>(
  131                      tabId,
  132                  ).insertRibbon()
  ...
  176          // Make sure that the ribbon is inserted before trying to open the
  177          // sidebar.
  178:         await runInTab<RibbonInteractionsInterface>(tabId).insertRibbon({
  179              override,
  180              forceExpandRibbon,

/Users/oliversauter/GitHub/Memex/src/direct-linking/background/redirect.ts:
    3  import { AnnotationRequests } from './request'
    4  
    5: export function setupRequestInterceptor({
    6      requests,
    7      webRequest,

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/index.js:
    2  import { remoteFunction } from 'src/util/webextensionRPC'
    3  import * as rendering from './rendering'
    4: import * as interactions from 'src/sidebar-overlay/content_script/highlight-interactions'
    5  
    6  export async function init() {
    .
   23          })
   24          if (highlightSuccessful) {
   25:             interactions.makeHighlightDark(request.annotation)
   26:             interactions.scrollToHighlight(request.annotation)
   27          } else {
   28              setupAnchorFallbackOverlay()

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/interactions.ts:
    2  import { copyToClipboard } from './utils'
    3  import * as annotations from './annotations'
    4: import { highlightAnnotations } from '../../sidebar-overlay/content_script/highlight-interactions'
    5  
    6: export interface Anchor {
    7      quote: string
    8      descriptor: {

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/rendering.js:
    1  import * as AllRaven from 'raven-js'
    2  import { retryUntil } from '../utils'
    3: import { attachEventListenersToNewHighlights } from 'src/sidebar-overlay/content_script/highlight-interactions'
    4  import { descriptorToRange, markRange } from './annotations'
    5  
    .
   34                  range => range !== null,
   35                  {
   36:                     intervalMiliseconds: 200,
   37                      timeoutMiliseconds: 5000,
   38                  },

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/styles.css:
    2      background: #8fffd7;
    3      transition: all 0.1s;
    4:     cursor: pointer;
    5  
    6      &.medium {

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/annotations/anchoring/LICENSE:
   42   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   43   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   44:  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   45   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   46   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/annotations/anchoring/pdf.coffee:
  308  
  309  ###*
  310: # Clear the internal caches of page text contents and quote locations.
  311  #
  312  # This exists mainly as a helper for use in tests.

/Users/oliversauter/GitHub/Memex/src/direct-linking/content_script/annotations/anchoring/types.coffee:
    3  # set of anchoring libraries. It serves two main purposes:
    4  #
    5: #  1. Providing a consistent interface across different types of anchor.
    6  #  2. Insulating the rest of the code from API changes in the underyling anchoring
    7  #     libraries.

/Users/oliversauter/GitHub/Memex/src/feature-opt-in/background/feature-opt-ins.ts:
    8      [key in UserFeatureOptIn]: boolean
    9  }
   10: export interface FeaturesInterface {
   11      getFeatures(): UserFeatureOptInMap
   12      toggleFeature(feature: UserFeatureOptIn): void
   ..
   14  }
   15  
   16: export class FeatureOptIns implements FeaturesInterface {
   17      private keyPrefix = 'FeatureOptIn_'
   18  

/Users/oliversauter/GitHub/Memex/src/feature-opt-in/ui/components/ifOptIn.tsx:
    4  //
    5  //
    6: // interface NavigationDependencies { userOptInFeatures: UserFeatureOptInMap}
    7  // export type NavigationDisplayChecker = (info: NavigationDependencies) => boolean;
    8  //

/Users/oliversauter/GitHub/Memex/src/imports/Readme.md:
   20  An instance of `StateManager` acts as a singleton in the background script.
   21  It acts as a source of import items, backed by a `Cache` instance which will handle persisting items in dynamically allocated chunks
   22: stored under local storage keys. It will interact with `ItemCreator` if the cache misses
   23  to handle deriving new import items from given `DataSource` instance (wraps the Web Ext `history` and `bookmarks` APIs).
   24  
   ..
   47  type ImportItemType = 'h' | 'b';
   48  
   49: interface ImportItem {
   50      type: ImportItemType; // Used for switching `ImportItemProcessor` logic
   51      browserId: number; // Used for visit times lookup (browser-tracked)

/Users/oliversauter/GitHub/Memex/src/imports/background/constants.ts:
    3  export const REMINDER_NOTIF: Partial<NotifOpts> = {
    4      title: 'Memex Importer',
    5:     requireInteraction: true,
    6      message: `If you disabled safe-browsing, don't forget to re-enable`,
    7  }
    .
    9  export const WARN_NOTIF: Partial<NotifOpts> = {
   10      title: 'Memex Importer',
   11:     requireInteraction: true,
   12      message: 'Your browser may stop imports suddenly. Find out why',
   13  }

/Users/oliversauter/GitHub/Memex/src/imports/background/item-creator.ts:
    1  import { normalizeUrl } from '@worldbrain/memex-url-utils'
    2  
    3: import { checkWithBlacklist } from 'src/blacklist/background/interface'
    4  import { isLoggable } from 'src/activity-logger'
    5  import { IMPORT_TYPE as TYPE } from 'src/options/imports/constants'
    .
  213  
  214      /**
  215:      * Main interface method, allowing incremental creation of different import item types.
  216       *
  217       * @return {AsyncIterable<ImportItemChunk>}

/Users/oliversauter/GitHub/Memex/src/imports/background/item-processor.ts:
   85      finished = false
   86  
   87:     static makeInterruptedErr() {
   88:         const err = new Error('Execution interrupted')
   89          err['cancelled'] = true
   90          return err
   ..
  109      _checkCancelled() {
  110          if (this.cancelled) {
  111:             throw ImportItemProcessor.makeInterruptedErr()
  112          }
  113      }

/Users/oliversauter/GitHub/Memex/src/imports/background/progress-manager.test.ts:
   10  import initData, { TestData, diff } from './state-manager.test.data'
   11  
   12: jest.mock('src/blacklist/background/interface')
   13  jest.mock('src/activity-logger')
   14  // jest.mock('./item-processor')
   ..
   83      }
   84  
   85:     const testInterruptedProgress = (concurrency: number) => async () => {
   86          const observer = { complete: jest.fn(), next: jest.fn() }
   87          const progress = new Progress({
   ..
   96  
   97          const promise = progress.start()
   98:         progress.stop() // Immediately interrupt
   99          await promise
  100  
  ...
  123  
  124          const promise = progress.start()
  125:         progress.stop() // Immediately interrupt
  126          await promise
  127          await progress.start() // Restart and wait for completion
  128  
  129:         // Run all the same "full progress" tests; should all pass same as if progress wasn't interrupted
  130          progress.processors.forEach(proc =>
  131              expect(proc).toMatchObject({ finished: true, cancelled: false }),
  ...
  143      runTest('full progress (10x conc)', testProgress(10))
  144      runTest('full progress (20x conc)', testProgress(20))
  145:     runTest('interrupted progress (1x conc.)', testInterruptedProgress(1))
  146:     runTest('interrupted progress (10x conc)', testInterruptedProgress(10))
  147:     runTest('interrupted progress (20x conc)', testInterruptedProgress(20))
  148:     runTest('restart interrupted progress (1x conc)', testRestartedProgress(1))
  149      runTest(
  150:         'restart interrupted progress (10x conc)',
  151          testRestartedProgress(10),
  152      )
  153      runTest(
  154:         'restart interrupted progress (20x conc)',
  155          testRestartedProgress(20),
  156      )
  ...
  169      )
  170      describe(
  171:         'hist: 30, bm:200+ - no bm intersection',
  172          runSuite(
  173              initData(urlLists.large.slice(0, 30), urlLists.med, {
  ...
  179      )
  180      // describe(
  181:     //     'hist: 500, bm:200+ - no bm intersection',
  182      //     runSuite(initData(urlLists.large.slice(500), urlLists.med)),
  183      // )

/Users/oliversauter/GitHub/Memex/src/imports/background/progress-manager.ts:
  120          try {
  121              if (this.stopped) {
  122:                 throw this._Processor.makeInterruptedErr()
  123              }
  124  

/Users/oliversauter/GitHub/Memex/src/imports/background/state-manager.test.data.ts:
    3  import { BrowserItem } from './types'
    4  
    5: interface AllowTypes {
    6      [key: string]: boolean | string
    7  }
    .
    9  const normalize = url => normalizeUrl(url)
   10  
   11: export interface TestData {
   12      allowTypes: AllowTypes
   13      bmUrls: string[]

/Users/oliversauter/GitHub/Memex/src/imports/background/state-manager.test.ts:
   14  ) => Promise<void>
   15  
   16: jest.mock('src/blacklist/background/interface')
   17  jest.mock('src/activity-logger')
   18  jest.mock('./cache')
   ..
  157          expect(bookmarkItemUrls).toEqual(DATA.bmUrls)
  158  
  159:         // Ensure we don't check the intersecting bm URLs in expected history URLs
  160          expect(historyItemUrls).toEqual(diff(DATA.histUrls, DATA.bmUrls))
  161      })
  ...
  236          expect(errordUrls).toEqual(flaggedUrls)
  237  
  238:         // There should be no intersection between okay and errord URLs
  239          const errordSet = new Set(errordUrls)
  240:         let intersected = false
  241          okayUrls.forEach(url => {
  242              if (errordSet.has(url)) {
  243:                 intersected = true
  244              }
  245          })
  246:         expect(intersected).toBe(false)
  247      })
  248  }
  ...
  263      )
  264      // describe(
  265:     //     'hist: 1000+, bm: 200+ - no bm intersection',
  266      //     runSuite(initData(urlLists.large, urlLists.med)),
  267      // )
  268      // describe(
  269:     //     'hist: 200+, bm: 1000+ - no bm intersection',
  270      //     runSuite(initData(urlLists.med, urlLists.large)),
  271      // )

/Users/oliversauter/GitHub/Memex/src/imports/background/types.ts:
    3  export type ImportItemType = 'h' | 'b'
    4  
    5: export interface ImportItem {
    6      type: ImportItemType
    7      browserId: number
    .
    9  }
   10  
   11: export interface BrowserItem {
   12      id: number
   13      url: string
   ..
   15  }
   16  
   17: export interface Item {
   18      url: string
   19      title?: string

/Users/oliversauter/GitHub/Memex/src/imports/background/url-list.test.data.ts:
  378      'https://epic.org/',
  379      'https://evernote.com',
  380:     'https://exitinternational.net/',
  381      'https://explorer.ooni.io',
  382      'http://exscn.net',
  ...
  425      'https://infidels.org/',
  426      'http://insecure.org/',
  427:     'http://international.ohmynews.com',
  428      'https://ipi.media/',
  429      'http://isaalmasih.net',
  ...
  587      'https://wordpress.com/',
  588      'https://wordpress.org/',
  589:     'http://world.internationalism.org/',
  590      'https://worldofwarcraft.com/',
  591      'http://worldsingles.com',
  ...
  665      'https://www.atheists.org/',
  666      'http://www.atimes.com',
  667:     'http://www.auduboninternational.org',
  668      'http://www.avert.org',
  669      'https://www.awid.org/',
  ...
  979      'http://www.inminds.co.uk',
  980      'https://www.instagram.com/',
  981:     'http://www.interactworldwide.org',
  982:     'https://www.internationalrivers.org/',
  983:     'https://www.interpol.int/',
  984      'http://www.ipcc.ch',
  985      'https://www.ipetitions.com',
  ...
 1127      'http://www.osce.org',
 1128      'https://www.ou.org/',
 1129:     'https://www.outrightinternational.org/',
 1130      'https://www.oxfam.org/',
 1131      'http://www.pacom.mil',
 ....
 1146      'http://www.phenoelit.org/',
 1147      'http://www.photobucket.com',
 1148:     'https://www.pinterest.com/',
 1149      'https://www.piratenpartei.ch/',
 1150      'http://www.piratpartiet.se',
 ....
 1165      'http://www.pravda.ru',
 1166      'https://www.premaritalsex.info/',
 1167:     'https://www.privacyinternational.org/',
 1168      'http://www.privaterra.org',
 1169      'http://www.prolife.com',
 ....
 1185      'http://www.realstreaming.net',
 1186      'https://www.reddit.com/',
 1187:     'https://www.refugeesinternational.org/',
 1188      'http://www.religiousconsultation.org',
 1189      'http://www.religioustolerance.org',
 ....
 1249      'http://www.spinpalace.com',
 1250      'http://www.sportingbet.com',
 1251:     'http://www.sportsinteraction.com',
 1252      'http://www.square-enix.com',
 1253      'https://www.state.gov/',
 ....
 1291      'http://www.tsroadmap.com',
 1292      'https://www.tumblr.com/',
 1293:     'http://www.twistedinternet.com',
 1294      'https://www.twitch.tv/',
 1295      'http://www.typepad.com',
 ....
 1347      'http://www.whitepower.com',
 1348      'http://www.who.int',
 1349:     'http://www.who.int/influenza/human_animal_interface',
 1350      'http://www.who.int/reproductivehealth',
 1351      'http://www.who.int/topics/hiv_aids/',

/Users/oliversauter/GitHub/Memex/src/imports/background/__mocks__/item-processor.js:
    3      cancelled = false
    4  
    5:     static makeInterruptedErr() {
    6:         const err = new Error('Execution interrupted')
    7          err.cancelled = true
    8          return err

/Users/oliversauter/GitHub/Memex/src/notifications/actions.ts:
    8  import * as storageKeys from './storage-keys-notif'
    9  
   10: import { EVENT_NAMES } from '../analytics/internal/constants'
   11  
   12  export const setShowMoreIndex = createAction('notifications/setShowMoreIndex')

/Users/oliversauter/GitHub/Memex/src/notifications/constants.ts:
    2  export const BACKUP_STATUS_MESSAGES: any = {
    3      successful_backup: 'Your last backup was successful. Backup again ',
    4:     unsuccessful_backup_internet: 'No internet connection on your last backup.',
    5      unsuccessful_backup_auto_enabled:
    6          'Your last backup failed. Retrying soon.',

/Users/oliversauter/GitHub/Memex/src/notifications/container.js:
   17  import NoNotification from './components/NoNotification'
   18  import { remoteFunction } from 'src/util/webextensionRPC'
   19: import { EVENT_NAMES } from '../analytics/internal/constants'
   20  
   21  const processEvent = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/notifications/notifications.ts:
  112  ]
  113  
  114: interface EventNotifsDict {
  115      [name: string]: NotifDefinition
  116  }
  ...
  179          system: {
  180              title: 'Error backing up data.',
  181:             message: 'Please check your internet connectivity',
  182              buttons: [
  183                  {
  ...
  192          },
  193          overview: {
  194:             title: 'Backup Error due to poor internet connectivity.',
  195:             message: `Please make sure that you have an internet connection
  196                  for a successful backup.`,
  197              buttons: [

/Users/oliversauter/GitHub/Memex/src/notifications/reducer.ts:
    3  import * as actions from './actions'
    4  
    5: export interface State {
    6      notificationsList: Notification[]
    7      resultExhausted: boolean

/Users/oliversauter/GitHub/Memex/src/notifications/types.ts:
    1: export interface ActionDefinition {
    2      /** Type of the button the button, it can be go-to-url etc. */
    3      type: string
    .
   10  }
   11  
   12: export interface ButtonDefinition {
   13      action?: ActionDefinition
   14      label: string
   15  }
   16  
   17: export interface OneNotifDef {
   18      /** Title of the notifications - Do not support html tags */
   19      title: string
   ..
   26  }
   27  
   28: export interface NotifDefinition {
   29      /** Should be unique (feature_name + notification + incNumber) */
   30      id: string
   ..
   34  }
   35  
   36: export interface Notification extends NotifDefinition {
   37      isRead?: boolean
   38  }

/Users/oliversauter/GitHub/Memex/src/notifications/background/index.js:
    3  import * as notifications from '../notifications'
    4  import createNotif from 'src/util/notifications'
    5: import internalAnalytics from 'src/analytics/internal'
    6: import { EVENT_NAMES } from '../../analytics/internal/constants'
    7  export default class NotificationBackground {
    8      static LAST_NOTIF_TIME = 'last-notif-proc-timestamp'
    .
  100                          },
  101                          () => {
  102:                             internalAnalytics.processEvent({
  103                                  type: EVENT_NAMES.CLICK_ON_SYSTEM_NOTIFICATION,
  104                                  details: {

/Users/oliversauter/GitHub/Memex/src/notifications/background/storage.ts:
  126                      title: notification.system.title,
  127                      message: notification.system.message,
  128:                     requireInteraction: false,
  129                  },
  130                  () => {

/Users/oliversauter/GitHub/Memex/src/notifications/components/ActionButton.css:
    3      background: #5cd9a6;
    4      border-radius: 5px;
    5:     cursor: pointer;
    6      display: inline-block;
    7      font-size: 14px;

/Users/oliversauter/GitHub/Memex/src/notifications/components/InboxButton.css:
   11      background-size: 19px;
   12      margin-left: 10px;
   13:     cursor: pointer;
   14  
   15      @media (max-width: 700px) {

/Users/oliversauter/GitHub/Memex/src/notifications/components/Notification.css:
   70      margin-top: 10px;
   71      font-size: 14px;
   72:     cursor: pointer;
   73  }
   74  
   ..
   76      color: #3eb995;
   77      font-weight: 600;
   78:     cursor: pointer;
   79  }
   80  
   ..
   84  
   85  .showMore {
   86:     cursor: pointer;
   87      font-weight: bold;
   88      text-align: center;
   ..
  124      width: 20px;
  125      position: absolute;
  126:     pointer-events: none;
  127      border-color: #c2c2c2;
  128      border-width: 1px;
  ...
  151      width: fit-content;
  152      border-radius: 2px;
  153:     cursor: pointer;
  154      text-decoration: none;
  155      margin-right: 10px;

/Users/oliversauter/GitHub/Memex/src/notifications/components/OpenLinkButton.css:
    4  
    5  .button {
    6:     font-family: 'Inter', sans-serif;
    7      padding: 8px 20px;
    8      color: white !important; /* stylelint-disable */
    9      width: fit-content;
   10      border-radius: 2px;
   11:     cursor: pointer !important;
   12      text-decoration: none;
   13      margin-right: 10px;
   ..
   20  
   21  .searchButton {
   22:     cursor: pointer;
   23  }
   24  

/Users/oliversauter/GitHub/Memex/src/notifications/components/ReadHeader.css:
    4      margin-top: 30px;
    5      color: #777;
    6:     cursor: pointer;
    7      display: flex;
    8      align-items: center;
    .
   17      height: 25px;
   18      margin: auto 0 auto 5px;
   19:     cursor: pointer;
   20      composes: arrowTriangle from 'src/common-ui/icons.css';
   21      display: flex;
   ..
   25  .expanded {
   26      transform: rotate(90deg);
   27:     cursor: pointer;
   28  }
   29  

/Users/oliversauter/GitHub/Memex/src/options/base.css:
    3  
    4  @import url('/fonts/Poppins/poppins.css');
    5: @import url('/fonts/Inter/inter.css');
    6  
    7  .root {
    .
   12      & * {
   13          box-sizing: border-box;
   14:         font-family: 'Inter', sans-serif;
   15      }
   16  }

/Users/oliversauter/GitHub/Memex/src/options/options.css:
   32  .button {
   33      font-size: 0.8em;
   34:     cursor: pointer;
   35      outline: 0;
   36      transition: all 0.1s ease-in;

/Users/oliversauter/GitHub/Memex/src/options/types.ts:
    8  import { RootState as SearchFiltersState } from 'src/search-filters/types'
    9  
   10: export interface RootState {
   11      deleteConfModal: DeleteConfModalState
   12      searchBar: SearchBarState

/Users/oliversauter/GitHub/Memex/src/options/blacklist/actions.ts:
    5  import * as selectors from './selectors'
    6  import { STORAGE_KEY } from './constants'
    7: import { EVENT_NAMES } from '../../analytics/internal/constants'
    8  import { handleDBQuotaErrors } from 'src/util/error-handler'
    9  import { notifications } from 'src/util/remote-functions-background'
   ..
  128              error =>
  129                  notifications.create({
  130:                     requireInteraction: false,
  131                      title: 'Memex error: deleting page',
  132                      message: error.message,

/Users/oliversauter/GitHub/Memex/src/options/blacklist/container.jsx:
   47      onNewBlacklistItemAdded = event => {
   48          event.preventDefault()
   49:         // Make sure to interpret '.' as "period" rather than "any single character", as it is common in hostnames
   50          // also ignore all whitespace
   51          const expression = this.props.inputVal

/Users/oliversauter/GitHub/Memex/src/options/blacklist/components/base.css:
    3      border: none;
    4      outline: none;
    5:     cursor: pointer;
    6      color: #666;
    7  

/Users/oliversauter/GitHub/Memex/src/options/blacklist/components/BlacklistInputRow.css:
   31      font-size: 15px;
   32      outline: none;
   33:     cursor: pointer;
   34      width: max-content;
   35      padding: 5px 40px;

/Users/oliversauter/GitHub/Memex/src/options/blacklist/components/BlacklistTable.css:
   62      padding: 0.6em 1.5em;
   63      text-transform: uppercase;
   64:     cursor: pointer;
   65      outline: 0;
   66  

/Users/oliversauter/GitHub/Memex/src/options/components/navigation/index.tsx:
    3  import NavLink from './NavLink'
    4  
    5: interface Props {
    6      currentLocation: any
    7      routes: any[]

/Users/oliversauter/GitHub/Memex/src/options/imports/actions.ts:
    5  import * as selectors from './selectors'
    6  import { remoteFunction } from 'src/util/webextensionRPC'
    7: import { EVENT_NAMES } from '../../analytics/internal/constants'
    8  
    9  const processEvent = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/options/imports/components/ButtonBar.css:
   78      background: #5cd9a6;
   79      border-radius: 5px;
   80:     cursor: pointer;
   81      display: inline-block;
   82      font-size: 14px;

/Users/oliversauter/GitHub/Memex/src/options/imports/components/DownloadDetails.css:
   25      font-weight: 500;
   26      font-size: 0.7em;
   27:     cursor: pointer;
   28  
   29      &:hover {
   ..
  130  
  131      &:hover {
  132:         cursor: pointer;
  133      }
  134  }

/Users/oliversauter/GitHub/Memex/src/options/imports/components/Import.css:
  200      & + label {
  201          position: relative;
  202:         cursor: pointer;
  203          padding: 0;
  204      }
  ...
  305  
  306      &:hover {
  307:         cursor: pointer;
  308      }
  309  }
  ...
  313      border-radius: 5px;
  314      font-weight: 500;
  315:     cursor: pointer;
  316      border: 1px solid #5671cf;
  317      display: inline-block;

/Users/oliversauter/GitHub/Memex/src/options/imports/components/QuoteDownloadProgress.jsx:
    6      <div className={localStyles.quoteBlock}>
    7          <span className={localStyles.quoteLine}>
    8:             &quot;Don't trust quotes from the internet.&quot;
    9          </span>
   10          <br />

/Users/oliversauter/GitHub/Memex/src/options/settings/keyboard-shortcuts.ts:
    1: export interface ShortcutElData {
    2      id: string
    3      name: string

/Users/oliversauter/GitHub/Memex/src/options/settings/reducer.ts:
    5  import { VISIT_DELAY_RANGE } from './constants'
    6  
    7: export interface State {
    8      visits: boolean
    9      bookmarks: boolean

/Users/oliversauter/GitHub/Memex/src/options/settings/components/IndexingPrefs.tsx:
    5  const styles = require('./settings.css')
    6  
    7: export interface Props {
    8      bookmarks: boolean
    9      memexLinks: boolean

/Users/oliversauter/GitHub/Memex/src/options/settings/components/IndexingPrefsContainer.tsx:
    9  import IndexingPrefs, { Props as IndexingPrefsProps } from './IndexingPrefs'
   10  
   11: export interface Props {
   12      storage: Storage.LocalStorageArea
   13      initLinks: (val: boolean) => void

/Users/oliversauter/GitHub/Memex/src/options/settings/components/keyboard-shortcuts-container.tsx:
    9  const styles = require('./settings.css')
   10  
   11: export interface Props {
   12      shortcutsData?: ShortcutElData[]
   13  }
   14  
   15: export interface State extends KeyboardShortcuts {}
   16  
   17  class KeyboardShortcutsContainer extends React.PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/options/settings/components/Tooltip.js:
   63                          disabled={!this.state.tooltip}
   64                      >
   65:                         <option value="mouse">mouse pointer</option>
   66                          <option value="text">selected text</option>
   67                      </select>

/Users/oliversauter/GitHub/Memex/src/options/tutorial/index.tsx:
    7  import FeatureInfo from './components/FeatureInfo'
    8  import { FEATURES_INFO } from './constants'
    9: import { EVENT_NAMES } from '../../analytics/internal/constants'
   10  
   11: export interface Props {
   12      tabs: Tabs.Static
   13  }

/Users/oliversauter/GitHub/Memex/src/options/tutorial/types.ts:
    1: export interface FeatureInfo {
    2      heading: string
    3      subheading: string

/Users/oliversauter/GitHub/Memex/src/options/tutorial/components/FeatureInfo.css:
   22      align-items: center;
   23      padding: 20px 10px 20px 20px;
   24:     cursor: pointer;
   25  
   26      &:hover {

/Users/oliversauter/GitHub/Memex/src/options/tutorial/components/FeatureInfo.tsx:
    3  const styles = require('./FeatureInfo.css')
    4  
    5: export interface Props {
    6      heading: string
    7      subheading: string

/Users/oliversauter/GitHub/Memex/src/options/tutorial/components/FeaturesInfo.tsx:
    3  const styles = require('./FeaturesInfo.css')
    4  
    5: export interface Props {
    6      children: ReactChild[] | ReactChild
    7  }

/Users/oliversauter/GitHub/Memex/src/overview/Readme.md:
    1  # Overview
    2  
    3: This code provides the user interface for overviewing one's memory, which is
    4  displayed in a tab of its own. It is a html+javascript app, built with
    5  [React](https://facebook.github.io/react/) and [Redux](http://redux.js.org/),

/Users/oliversauter/GitHub/Memex/src/overview/types.ts:
    6  import { SocialPage } from 'src/social-integration/types'
    7  
    8: export interface Result extends SocialPage {
    9      url: string
   10      title: string
   ..
   22  }
   23  
   24: export interface ResultWithIndex extends Result {
   25      index: number
   26  }
   ..
   28  export type ResultsByUrl = Map<string, ResultWithIndex>
   29  
   30: export interface SearchResult {
   31      totalCount: number
   32      resultsExhausted: boolean
   ..
   38  }
   39  
   40: export interface Tooltip {
   41      title: string
   42      description: string

/Users/oliversauter/GitHub/Memex/src/overview/delete-confirm-modal/actions.ts:
    7  import { acts as resultsActs, selectors as results } from '../results'
    8  import { actions as searchFilterActs } from '../../search-filters'
    9: import { EVENT_NAMES } from '../../analytics/internal/constants'
   10  import { handleDBQuotaErrors } from 'src/util/error-handler'
   11  import { notifications } from 'src/util/remote-functions-background'
   ..
   49              error =>
   50                  notifications.create({
   51:                     requireInteraction: false,
   52                      title: 'Memex error: deleting page',
   53                      message: error.message,

/Users/oliversauter/GitHub/Memex/src/overview/delete-confirm-modal/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not to show the delete results modal. */
    7      isShown: boolean

/Users/oliversauter/GitHub/Memex/src/overview/delete-confirm-modal/components/DeleteConfirmModal.tsx:
    7  } from '../../../common-ui/components'
    8  
    9: export interface Props extends ConfirmModalProps {
   10      deleteDocs: () => Promise<void>
   11  }

/Users/oliversauter/GitHub/Memex/src/overview/help-btn/types.ts:
    1  export type MenuSeparator = '-'
    2  
    3: export interface MenuOption {
    4      text: string
    5      link: string

/Users/oliversauter/GitHub/Memex/src/overview/help-btn/components/help-btn.css:
   21      bottom: 1em;
   22      right: 1em;
   23:     cursor: pointer;
   24      outline: none;
   25      background-color: transparent;

/Users/oliversauter/GitHub/Memex/src/overview/help-btn/components/help-btn.tsx:
    7  const styles = require('./help-btn.css')
    8  
    9: export interface Props extends HelpMenuProps {}
   10  
   11: export interface State {
   12      isOpen: boolean
   13  }

/Users/oliversauter/GitHub/Memex/src/overview/help-btn/components/help-menu.tsx:
    6  const styles = require('./help-menu.css')
    7  
    8: export interface Props {
    9      menuOptions: MenuOptions
   10      extVersion: string

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/popup-helper.ts:
    1  import { remoteFunction } from 'src/util/webextensionRPC'
    2: import { EVENT_NAMES } from 'src/analytics/internal/constants'
    3  import { FLOWS, STAGES } from './constants'
    4  import { fetchOnboardingStage, setOnboardingStage } from './utils'

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/reducer.ts:
    3  import * as actions from './actions'
    4  
    5: export interface State {
    6      // Status of onboarding workflows
    7      annotationStage: string

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/next-step-button.tsx:
    4  const styles = require('./next-step-button.css')
    5  
    6: export interface Props {
    7      onClick: () => void
    8      color: 'green' | 'mint' | 'blue' | 'purple'

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/onboarding-box.css:
  155      display: inline-block;
  156      position: relative;
  157:     cursor: pointer;
  158  
  159      /* A little underline animation */

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/onboarding-box.tsx:
    3  const styles = require('./onboarding-box.css')
    4  
    5: export interface Props {
    6      navToOverview: () => void
    7  }

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/onboarding-step.tsx:
    5  const styles = require('./onboarding-box.css')
    6  
    7: export interface Props {
    8      isInitStep?: boolean
    9      titleText: string

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/onboarding-tooltip.css:
   53  
   54      &:hover {
   55:         cursor: pointer;
   56      }
   57  }

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/onboarding-tooltip.tsx:
    3  const styles = require('./onboarding-tooltip.css')
    4  
    5: export interface Props {
    6      imgSrc?: string
    7      CTAText?: string

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/search-settings.tsx:
    7  const styles = require('./search-settings.css')
    8  
    9: export interface Props {
   10      stubs: boolean
   11      visits: boolean

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/settings-checkbox.tsx:
    4  const styles = require('./settings.css')
    5  
    6: export interface Props {
    7      id: string
    8      isChecked: boolean

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/components/settings.css:
    3  
    4  .container * {
    5:     font-family: 'Inter', sans-serif;
    6  }
    7  

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/screens/onboarding/index.tsx:
   23  const searchSettingsStyles = require('../../components/search-settings.css')
   24  
   25: export interface Props {
   26      storage: Storage.LocalStorageArea
   27      navToOverview: () => void

/Users/oliversauter/GitHub/Memex/src/overview/onboarding/screens/onboarding/logic.ts:
    2  import { VISIT_DELAY_RANGE } from 'src/options/settings/constants'
    3  
    4: export interface State {
    5      visitDelay: number
    6      currentStep: number

/Users/oliversauter/GitHub/Memex/src/overview/results/actions.ts:
    9  import { selectors as searchBar, acts as searchBarActs } from '../search-bar'
   10  import { selectors as filters } from '../../search-filters'
   11: import { EVENT_NAMES } from '../../analytics/internal/constants'
   12  import { handleDBQuotaErrors } from 'src/util/error-handler'
   13  import { bookmarks, notifications } from 'src/util/remote-functions-background'
   ..
  103              error =>
  104                  notifications.create({
  105:                     requireInteraction: false,
  106                      title: 'Memex error: starring page',
  107                      message: error.message,
  ...
  193  }
  194  
  195: // Internal analytics store
  196  function storeSearch(searchResult, overwrite, state) {
  197      const type =

/Users/oliversauter/GitHub/Memex/src/overview/results/reducer.ts:
    6  import analytics from 'src/analytics'
    7  
    8: export interface State {
    9      /** Holds the current search results used to render to the UI. */
   10      results: Result[]

/Users/oliversauter/GitHub/Memex/src/overview/results/components/NoResult.css:
   30      composes: CTA from 'src/common-ui/elements.css';
   31      font-size: 15px;
   32:     cursor: pointer;
   33  }
   34  

/Users/oliversauter/GitHub/Memex/src/overview/results/components/NoResultBadTerm.tsx:
    3  const styles = require('./NoResult.css')
    4  
    5: export interface Props {
    6      monthlyUpdatesUrl?: string
    7      roomToImproveUrl?: string

/Users/oliversauter/GitHub/Memex/src/overview/results/components/onboarding-message.tsx:
    6  const styles = require('./onboarding-message.css')
    7  
    8: export interface Props {}
    9  
   10: interface State {
   11      showTooltip: boolean
   12  }

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultList.tsx:
    4  const styles = require('./ResultList.css')
    5  
    6: export interface Props {
    7      scrollDisabled?: boolean
    8      isFilterBarActive?: boolean

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultListContainer.tsx:
   28  const styles = require('./ResultList.css')
   29  
   30: export interface StateProps {
   31      isLoading: boolean
   32      isSidebarOpen: boolean
   ..
   46  }
   47  
   48: export interface DispatchProps {
   49      resetUrlDragged: () => void
   50      resetActiveTagIndex: () => void
   ..
   68  }
   69  
   70: export interface OwnProps {}
   71  
   72  export type Props = StateProps & DispatchProps & OwnProps

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultsContainer.tsx:
   16  const styles = require('./ResultList.css')
   17  
   18: export interface StateProps {
   19      noResults: boolean
   20      isBadTerm: boolean
   ..
   29  }
   30  
   31: export interface DispatchProps {
   32      toggleAreAnnotationsExpanded: (e: React.SyntheticEvent) => void
   33  }
   34  
   35: export interface OwnProps {}
   36  
   37  export type Props = StateProps & DispatchProps & OwnProps

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultsMessage.css:
   40      text-decoration: none;
   41      color: #3eb995;
   42:     cursor: pointer;
   43      height: 35px;
   44      margin-left: 12px;

/Users/oliversauter/GitHub/Memex/src/overview/results/components/ResultsMessage.tsx:
    4  const styles = require('./ResultsMessage.css')
    5  
    6: export interface Props {
    7      small: boolean
    8      children: ReactChild | ReactChild[]

/Users/oliversauter/GitHub/Memex/src/overview/results/components/search-type-switch-container.tsx:
    8  import { selectors as filters } from 'src/search-filters'
    9  
   10: export interface StateProps {
   11      annotsFolded: boolean
   12      searchType: 'page' | 'notes' | 'social'
   ..
   14  }
   15  
   16: export interface DispatchProps {
   17      handleUnfoldAllClick: React.MouseEventHandler<HTMLButtonElement>
   18      handleSearchTypeClick: (
   ..
   21  }
   22  
   23: export interface OwnProps {}
   24  
   25  export type Props = StateProps & DispatchProps & OwnProps

/Users/oliversauter/GitHub/Memex/src/overview/results/components/search-type-switch.css:
   33      font-size: 15px;
   34      font-weight: 600;
   35:     cursor: pointer;
   36      outline: none;
   37      margin-right: 5px;

/Users/oliversauter/GitHub/Memex/src/overview/results/components/search-type-switch.tsx:
    5  const styles = require('./search-type-switch.css')
    6  
    7: export interface Props {
    8      annotsFolded: boolean
    9      isFilterBarActive: boolean

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/actions.ts:
   13  } from '../../search-filters'
   14  import { actions as notifActs } from '../../notifications'
   15: import { EVENT_NAMES } from '../../analytics/internal/constants'
   16  
   17  const processEventRPC = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Holds the current query input state. */
    7      query: string

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/DateRangeSelection.css:
   71      background-size: 10px;
   72      background-repeat: no-repeat;
   73:     cursor: pointer;
   74      width: 20px;
   75      height: 20px;

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/DateRangeSelection.tsx:
    9  import { DATE_PICKER_DATE_FORMAT as FORMAT } from '../constants'
   10  import './datepicker-overrides.css'
   11: import { EVENT_NAMES } from '../../../analytics/internal/constants'
   12  import DatePickerInput from './datepicker-input'
   13  
   ..
   16  // const stylesPro = require('../../tooltips/components/tooltip.css')
   17  
   18: interface Props {
   19      env: 'inpage' | 'overview'
   20      startDate: number

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/Header.css:
  118      font-size: 15px;
  119      font-weight: 500;
  120:     cursor: pointer;
  121      margin-right: -7px;
  122      outline: none;
  ...
  138      background-size: 10px;
  139      display: inline-block;
  140:     cursor: pointer;
  141      width: 18px;
  142      height: 18px;

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/Header.tsx:
   16  const styles = require('./Header.css')
   17  
   18: export interface Props {
   19      searchPlaceholder?: string
   20      settingsIconUrl?: string

/Users/oliversauter/GitHub/Memex/src/overview/search-bar/components/HeaderContainer.tsx:
    9  import Header, { Props } from './Header'
   10  import { remoteFunction } from 'src/util/webextensionRPC'
   11: import { EVENT_NAMES } from 'src/analytics/internal/constants'
   12  
   13  const processEventRPC = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/Readme.md:
    1  # Left sidebar containing filters and collections
    2  
    3: This code is for the interface of the left sidebar in the overview. This sidebar has two modes: collection mode and filter mode. The collection mode mounts `src/custom-lists` components and filter mode mounts the `src/search-filters` components. The main container is in the `src/overview/sidebar-left/container` module.
    4  
    5  ## Directory structure

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/types.ts:
    1: export default interface State {
    2      openSidebar: boolean
    3      showFilters: boolean

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/components/BackToSearch.css:
    9      flex-direction: row;
   10      justify-content: space-evenly;
   11:     cursor: pointer;
   12      text-decoration: none;
   13      align-items: center;

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/components/collections-button.css:
   34      background-color: transparent;
   35      background-repeat: no-repeat;
   36:     cursor: pointer;
   37      outline: none;
   38      padding: 0px;
   ..
   80      font-size: 12px;
   81      font-weight: 700;
   82:     cursor: pointer;
   83      color: #767676;
   84      padding: 2px 4px;
   ..
   99      align-items: center;
  100      justify-content: flex-start;
  101:     cursor: pointer;
  102      outline: none;
  103      margin-left: -6px;

/Users/oliversauter/GitHub/Memex/src/overview/sidebar-left/components/Sidebar.css:
   26      background-repeat: no-repeat;
   27      background-size: contain;
   28:     cursor: pointer;
   29      outline: none;
   30      padding: 0px;
   ..
   58      border: none;
   59      background-color: transparent;
   60:     cursor: pointer;
   61  
   62      &:hover {

/Users/oliversauter/GitHub/Memex/src/overview/tooltips/actions.ts:
    7  
    8  import { remoteFunction } from 'src/util/webextensionRPC'
    9: import { EVENT_NAMES } from 'src/analytics/internal/constants'
   10  
   11  const processEventRPC = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/overview/tooltips/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      showTooltip: boolean
    7      whichTooltip: number

/Users/oliversauter/GitHub/Memex/src/overview/tooltips/components/container.tsx:
    9  import { getBottomCenter } from '../utils'
   10  
   11: export interface Props {
   12      showTooltip: boolean
   13      tooltip: string

/Users/oliversauter/GitHub/Memex/src/overview/tooltips/components/tooltip.css:
   12      height: fit-content;
   13      padding: 6px 30px 35px 30px;
   14:     font-family: 'Inter', sans-serif;
   15      font-weight: 400;
   16      color: color4;
   ..
   88      background-repeat: no-repeat;
   89      background-position: center;
   90:     cursor: pointer;
   91      background-size: 12px;
   92      width: 22px;
   ..
  105      background-repeat: no-repeat;
  106      background-position: center;
  107:     cursor: pointer;
  108      width: 22px;
  109      height: 22px;
  ...
  116      background-repeat: no-repeat;
  117      background-position: center;
  118:     cursor: pointer;
  119      width: 22px;
  120      height: 22px;

/Users/oliversauter/GitHub/Memex/src/overview/tooltips/components/tooltip.tsx:
    3  const styles = require('./tooltip.css')
    4  
    5: export interface Position {
    6      top: number | string
    7      left: number | string
    8  }
    9: export interface Props {
   10      children: React.ReactChild
   11      position: Position

/Users/oliversauter/GitHub/Memex/src/page-analysis/types.ts:
    1: export interface PageAnalyzerInterface {
    2      extractPageContent: ExtractPageContent
    3  }

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/fetch-page-data.ts:
   15  export type CancelXHR = () => void
   16  
   17: export interface FetchPageDataOpts {
   18      /** Denotes whether to attempt page text + metadata fetch. */
   19      includePageContent: boolean
   ..
   22  }
   23  
   24: export interface FetchPageDataReturnValue {
   25      run: RunXHR
   26      cancel: CancelXHR

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/index.ts:
    5  import makeScreenshot from './make-screenshot'
    6  import { runInTab } from 'src/util/webextensionRPC'
    7: import { PageAnalyzerInterface } from 'src/page-analysis/types'
    8  
    9  export type PageAnalyzer = (args: {
   ..
   31  
   32      // Set up to run these functions in the content script in the tab.
   33:     const extractPageContent = runInTab<PageAnalyzerInterface>(tabId)
   34          .extractPageContent
   35  

/Users/oliversauter/GitHub/Memex/src/page-analysis/background/types.ts:
    3  export type PageContent = PipelineRes
    4  
    5: export interface PageDataResult {
    6      favIconURI?: string
    7      content: {
    .
   15  }
   16  
   17: export interface FetchPageProcessor {
   18      process(url: string): Promise<PageContent>
   19  }

/Users/oliversauter/GitHub/Memex/src/page-fetch-backlog/background/index.test.ts:
   10  import delay from 'src/util/delay'
   11  
   12: const DEF_PROC_INTERVAL = 500
   13  const DEF_RETRY_LIMIT = 4
   14  
   ..
   29  async function setupTest({
   30      retryLimit = DEF_RETRY_LIMIT,
   31:     processingInterval = DEF_PROC_INTERVAL,
   32      pageFetcher = mockStdPageFetcher,
   33  }) {
   ..
   63              pagePipeline: mockPagePipeline,
   64          }),
   65:         processingInterval,
   66          retryLimit,
   67          storePageContent: mockPageStorer,
   68          connectivityChecker: mockConnectivityChecker as any,
   69:         retryIntervals: [0, 0, 0, 0, 0],
   70      })
   71  
   ..
  200      })
  201  
  202:     it('should retry failed processing on specified intervals', async () => {
  203          const { backlog, storageManager } = await setupTest({
  204              pageFetcher: mockTempFailurePageFetcher,
  ...
  232          // await backlog['recurringTask'].forceRun()
  233  
  234:         // Wait at least the processing interval, after which the recurring task should trigger, then fail
  235          //  and reschedule the entry on the backlog (with retry count increased)
  236:         await delay(DEF_PROC_INTERVAL * 2)
  237  
  238          expect(

/Users/oliversauter/GitHub/Memex/src/page-fetch-backlog/background/index.ts:
   12  
   13  export class PageFetchBacklogBackground {
   14:     static DEF_PROCESSING_INTERVAL = 300000
   15      static DEF_RETRY_LIMIT = 5
   16      static DEF_ENTRY_CHUNK = 5
   17:     static DEF_RETRY_INTERVALS = [5, 15, 60, 180, 1440]
   18  
   19      storage: PageFetchBacklogStorage
   ..
   27              storePageContent: (content: PageContent) => Promise<void>
   28              connectivityChecker: ConnectivityCheckerBackground
   29:             retryIntervals?: number[]
   30:             processingInterval?: number
   31              entryChunkSize?: number
   32              retryLimit?: number
   33          },
   34      ) {
   35:         this.props.retryIntervals =
   36:             props.retryIntervals ||
   37:             PageFetchBacklogBackground.DEF_RETRY_INTERVALS
   38  
   39:         this.props.processingInterval =
   40:             props.processingInterval ||
   41:             PageFetchBacklogBackground.DEF_PROCESSING_INTERVAL
   42  
   43          this.props.retryLimit =
   ..
   58  
   59          this.recurringTask = new RecurringTask(this.processEntries, {
   60:             intervalInMs: this.props.processingInterval,
   61              onError: this.handleProcessingError,
   62          })
   ..
   74          const nextRetry = new Date(
   75              lastRetry.getTime() +
   76:                 this.props.retryIntervals[timesRetried] * 60000,
   77          )
   78          if (nextRetry.getTime() > Date.now()) {

/Users/oliversauter/GitHub/Memex/src/page-fetch-backlog/background/types.ts:
    1  import { SharedSyncLogEntry } from '@worldbrain/storex-sync/lib/shared-sync-log/types'
    2  
    3: export interface BacklogEntry {
    4      url: string
    5      timesRetried: number
    .
    7  }
    8  
    9: export interface BacklogEntryCreateArgs {
   10      url: string
   11      timesRetried?: number

/Users/oliversauter/GitHub/Memex/src/popup/actions.ts:
   13  const fetchInitTagSuggRPC = remoteFunction('extendedSuggest')
   14  const isURLBlacklistedRPC = remoteFunction('isURLBlacklisted')
   15: const fetchInternalTabRPC = remoteFunction('fetchTab')
   16  const fetchTabByUrlRPC = remoteFunction('fetchTabByUrl')
   17  
   ..
   46  
   47      try {
   48:         const internalTab = await fetchInternalTabRPC(currentTab.id)
   49:         dispatch(bookmarkActs.setIsBookmarked(internalTab.isBookmarked))
   50  
   51          const listsAssocWithPage = await fetchListsRPC({ url: currentTab.url })

/Users/oliversauter/GitHub/Memex/src/popup/container.tsx:
   35  import { ClickHandler, RootState } from './types'
   36  import { PageList } from '../custom-lists/background/types'
   37: import { EVENT_NAMES } from '../analytics/internal/constants'
   38  
   39  const btnStyles = require('./components/Button.css')
   40  const styles = require('./components/Popup.css')
   41  
   42: export interface OwnProps {}
   43  
   44: interface StateProps {
   45      blacklistConfirm: boolean
   46      showTagsPicker: boolean
   ..
   57  }
   58  
   59: interface DispatchProps {
   60      initState: () => Promise<void>
   61      handleSearchChange: ClickHandler<HTMLInputElement>

/Users/oliversauter/GitHub/Memex/src/popup/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Holds the tab ID which the popup is currently shown in. */
    7      tabId: number

/Users/oliversauter/GitHub/Memex/src/popup/types.ts:
   11  import { State as PopupState } from './reducer'
   12  
   13: export interface RootState {
   14      blacklistBtn?: BlacklistBtnState
   15      bookmarkBtn?: BookmarkBtnState

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/actions.ts:
    6  import * as selectors from './selectors'
    7  import * as popup from '../selectors'
    8: import { EVENT_NAMES } from '../../analytics/internal/constants'
    9  import { handleDBQuotaErrors } from 'src/util/error-handler'
   10  import { notifications } from 'src/util/remote-functions-background'
   ..
   93              error =>
   94                  notifications.create({
   95:                     requireInteraction: false,
   96                      title: 'Memex error: deleting page',
   97                      message: error.message,

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the blacklist URL vs domain choice should be shown. */
    7      showDomainChoice: boolean

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/components/BlacklistButton.css:
   29      width: 60px;
   30      margin-left: 30px;
   31:     cursor: pointer;
   32      font-weight: 500;
   33  

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/components/BlacklistButton.tsx:
   13  const styles = require('./BlacklistButton.css')
   14  
   15: export interface OwnProps {}
   16  
   17: interface StateProps {
   18      shouldShowChoice: boolean
   19      isDisabled: boolean
   ..
   22  }
   23  
   24: interface DispatchProps {
   25      handleBtnClick: ClickHandler<HTMLButtonElement>
   26      handleBlacklistingChoice: (

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/components/BlacklistConfirm.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  @value colors: '../../../common-ui/colors.css';

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/components/BlacklistConfirm.tsx:
    6  const styles = require('./BlacklistConfirm.css')
    7  
    8: export interface Props {
    9      onConfirmClick: ClickHandler<HTMLButtonElement>
   10      onDenyClick: ClickHandler<HTMLButtonElement>

/Users/oliversauter/GitHub/Memex/src/popup/bookmark-button/actions.ts:
   27              error =>
   28                  notifications.create({
   29:                     requireInteraction: false,
   30                      title: 'Memex error: starring page',
   31                      message: error.message,

/Users/oliversauter/GitHub/Memex/src/popup/bookmark-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the current page is bookmarked. */
    7      isBookmarked: boolean

/Users/oliversauter/GitHub/Memex/src/popup/bookmark-button/components/BookmarkButton.tsx:
   10  const styles = require('./BookmarkButton.css')
   11  
   12: export interface OwnProps {
   13      closePopup: () => void
   14  }
   15  
   16: interface StateProps {
   17      isDisabled: boolean
   18      isBookmarked: boolean
   19  }
   20  
   21: interface DispatchProps {
   22      toggleBookmark: ClickHandler<HTMLButtonElement>
   23  }

/Users/oliversauter/GitHub/Memex/src/popup/collections-button/reducer.ts:
    4  import { PageList } from '../../custom-lists/background/types'
    5  
    6: export interface State {
    7      /** Denotes whether or not the popup should show the collections picker. */
    8      showCollectionsPicker: boolean

/Users/oliversauter/GitHub/Memex/src/popup/collections-button/components/CollectionsButton.tsx:
   10  const styles = require('./CollectionsButton.css')
   11  
   12: export interface OwnProps {}
   13  
   14: interface StateProps {
   15      isDisabled: boolean
   16  }
   17  
   18: interface DispatchProps {
   19      toggleCollectionsPopup: ClickHandler<HTMLButtonElement>
   20      toggleAllTabsPopup: ClickHandler<HTMLButtonElement>

/Users/oliversauter/GitHub/Memex/src/popup/components/Button.css:
   34      width: 100%;
   35      font-size: 1em;
   36:     cursor: pointer;
   37      font-weight: 400;
   38      color: #555;
   ..
   62  
   63  .clickableIcon {
   64:     cursor: pointer;
   65      color: rgb(62, 185, 149);
   66  
   ..
   92  .button {
   93      composes: nakedSquareButton from '../../common-ui/elements.css';
   94:     cursor: pointer;
   95      margin-right: 6px;
   96      margin-bottom: 6px;

/Users/oliversauter/GitHub/Memex/src/popup/components/Button.tsx:
    4  const styles = require('./Button.css')
    5  
    6: export interface Props extends HTMLProps<HTMLButtonElement> {
    7      children?: React.ReactNode
    8      btnClass?: string

/Users/oliversauter/GitHub/Memex/src/popup/components/ButtonIcon.tsx:
    6  const styles = require('./Button.css')
    7  
    8: export interface Props {
    9      className?: string
   10      icon: string

/Users/oliversauter/GitHub/Memex/src/popup/components/LinkButton.tsx:
    6  const styles = require('./Button.css')
    7  
    8: export interface Props extends BtnProps {
    9      href: string
   10  }

/Users/oliversauter/GitHub/Memex/src/popup/components/Popup.css:
   12  
   13      & * {
   14:         font-family: 'Inter', sans-serif;
   15      }
   16  }

/Users/oliversauter/GitHub/Memex/src/popup/components/Search.tsx:
    3  const styles = require('./Popup.css')
    4  
    5: export interface Props {
    6      searchValue: string
    7      onSearchEnter: (e: SyntheticEvent<HTMLInputElement>) => void

/Users/oliversauter/GitHub/Memex/src/popup/components/SplitButton.tsx:
    4  const styles = require('./Button.css')
    5  
    6: export interface Props {
    7      iconClass: string
    8      children: ReactChild[]

/Users/oliversauter/GitHub/Memex/src/popup/components/ToggleSwitch.css:
    3  
    4  .switch {
    5:     cursor: pointer;
    6      text-indent: -9999px;
    7      width: 60px;
    .
   42  
   43  .text {
   44:     cursor: pointer;
   45      z-index: 10;
   46      color: #ddd;

/Users/oliversauter/GitHub/Memex/src/popup/notif-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Contains the count of unread notifs to display on the popup button. */
    7      notifCount: number

/Users/oliversauter/GitHub/Memex/src/popup/notif-button/components/NotifButton.tsx:
   10  const styles = require('./NotifButton.css')
   11  
   12: export interface OwnProps {
   13      href?: string
   14  }
   15  
   16: interface StateProps {
   17      unreadNotifCount: number
   18  }
   19  
   20: interface DispatchProps {
   21      initState: () => Promise<void>
   22  }

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/actions.ts:
    6  import { Thunk } from '../types'
    7  import * as selectors from './selectors'
    8: import { EVENT_NAMES } from '../../analytics/internal/constants'
    9  
   10  const processEventRPC = remoteFunction('processEvent')

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the ext is paused. */
    7      isPaused: boolean

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/components/PauseButton.css:
    6      background-repeat: no-repeat;
    7      background-size: 20px;
    8:     cursor: pointer;
    9      opacity: 0.8;
   10  }
   ..
   14      background-repeat: no-repeat;
   15      background-size: 20px;
   16:     cursor: pointer;
   17      opacity: 1;
   18  
   ..
   25  .dropdown {
   26      margin: 0 5px;
   27:     cursor: pointer;
   28  }
   29  
   30  .item {
   31:     cursor: pointer;
   32      font-weight: 400;
   33  

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/components/PauseButton.tsx:
   14      })
   15  
   16: export interface Props
   17      extends Pick<ContainerProps, 'togglePause' | 'isPaused'> {
   18      children: React.ReactChild

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/components/PauseContainer.tsx:
    8  import PauseSelect from './PauseSelect'
    9  
   10: export interface OwnProps {
   11      pauseValues?: number[]
   12  }
   13  
   14: interface StateProps {
   15      pauseTime: number
   16      isPaused: boolean
   17  }
   18  
   19: interface DispatchProps {
   20      initState: () => Promise<void>
   21      togglePause: ClickHandler<HTMLDivElement>

/Users/oliversauter/GitHub/Memex/src/popup/pause-button/components/PauseSelect.tsx:
    5  const styles = require('./PauseButton.css')
    6  
    7: export interface Props
    8      extends Pick<ContainerProps, 'pauseTime' | 'onTimeChange'>,
    9          HTMLProps<HTMLSelectElement> {

/Users/oliversauter/GitHub/Memex/src/popup/sidebar-button/actions.ts:
    6  import * as selectors from './selectors'
    7  import * as popup from '../selectors'
    8: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
    9  
   10  export const setSidebarFlag = createAction<boolean>('tooltip/setSidebarFlag')
   ..
   31  
   32      const tabId = popup.tabId(state)
   33:     const ribbon = runInTab<RibbonInteractionsInterface>(tabId)
   34  
   35      if (wasEnabled) {

/Users/oliversauter/GitHub/Memex/src/popup/sidebar-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the tooltip toggle is enabled in the popup. */
    7      isEnabled: boolean

/Users/oliversauter/GitHub/Memex/src/popup/sidebar-button/components/SidebarButton.css:
   13      display: inline-block;
   14      margin-left: 10px;
   15:     cursor: pointer;
   16  }
   17  

/Users/oliversauter/GitHub/Memex/src/popup/sidebar-button/components/SidebarButton.tsx:
   11  const buttonStyles = require('../../components/Button.css')
   12  
   13: export interface OwnProps {
   14      closePopup: () => void
   15  }
   16  
   17: interface StateProps {
   18      isEnabled: boolean
   19  }
   20  
   21: interface DispatchProps {
   22      handleChange: ClickHandler<HTMLButtonElement>
   23      openSidebar: ClickHandler<HTMLButtonElement>

/Users/oliversauter/GitHub/Memex/src/popup/tags-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the popup should show the tags picker. */
    7      showTagsPicker: boolean

/Users/oliversauter/GitHub/Memex/src/popup/tags-button/components/TagsButton.tsx:
   10  const styles = require('./TagsButton.css')
   11  
   12: export interface OwnProps {}
   13  
   14: interface StateProps {
   15      isDisabled: boolean
   16  }
   17  
   18: interface DispatchProps {
   19      toggleTagPopup: ClickHandler<HTMLButtonElement>
   20      toggleAllTabsPopup: ClickHandler<HTMLButtonElement>

/Users/oliversauter/GitHub/Memex/src/popup/tooltip-button/actions.ts:
    6  import * as selectors from './selectors'
    7  import * as popup from '../selectors'
    8: import { EVENT_NAMES } from '../../analytics/internal/constants'
    9: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
   10: import { TooltipInteractionInterface } from 'src/content-tooltip/types'
   11  
   12  const processEventRPC = remoteFunction('processEvent')
   ..
   42      const tabId = popup.tabId(state)
   43      if (wasEnabled) {
   44:         await runInTab<TooltipInteractionInterface>(tabId).removeTooltip()
   45:         await runInTab<RibbonInteractionsInterface>(tabId).updateRibbon()
   46      } else {
   47:         await runInTab<TooltipInteractionInterface>(tabId).insertTooltip()
   48:         await runInTab<TooltipInteractionInterface>(tabId).showContentTooltip()
   49:         await runInTab<RibbonInteractionsInterface>(tabId).updateRibbon()
   50      }
   51  }
   ..
   61      const isEnabled = await getTooltipState()
   62      if (!isEnabled) {
   63:         await runInTab<TooltipInteractionInterface>(tabId).insertTooltip({
   64              override: true,
   65          })
   66      }
   67  
   68:     await runInTab<TooltipInteractionInterface>(tabId).showContentTooltip()
   69  }
   70  

/Users/oliversauter/GitHub/Memex/src/popup/tooltip-button/reducer.ts:
    3  import * as acts from './actions'
    4  
    5: export interface State {
    6      /** Denotes whether or not the tooltip toggle is enabled in the popup. */
    7      isEnabled: boolean

/Users/oliversauter/GitHub/Memex/src/popup/tooltip-button/components/TooltipButton.css:
   13      display: inline-block;
   14      margin-left: 10px;
   15:     cursor: pointer;
   16  }
   17  

/Users/oliversauter/GitHub/Memex/src/popup/tooltip-button/components/TooltipButton.tsx:
   11  const buttonStyles = require('../../components/Button.css')
   12  
   13: export interface OwnProps {
   14      closePopup: () => void
   15  }
   16  
   17: interface StateProps {
   18      isEnabled: boolean
   19  }
   20  
   21: interface DispatchProps {
   22      handleChange: ClickHandler<HTMLButtonElement>
   23      showTooltip: ClickHandler<HTMLButtonElement>

/Users/oliversauter/GitHub/Memex/src/search/add.ts:
    1  import { normalizeUrl } from '@worldbrain/memex-url-utils'
    2  
    3: import { VisitInteraction, PageAddRequest } from '.'
    4  import pipeline, { transformUrl } from './pipeline'
    5  import { Page, FavIcon } from './models'
    .
   56  
   57  /**
   58:  * Updates an existing specified visit with interactions data.
   59   */
   60  export const updateTimestampMeta = (getDb: DBGet) => async (
   61      url: string,
   62      time: number,
   63:     data: Partial<VisitInteraction>,
   64  ) => {
   65      const db = await getDb()

/Users/oliversauter/GitHub/Memex/src/search/index.test.ts:
    6  
    7  jest.mock('./models/abstract-model')
    8: jest.mock('lodash/fp/intersection')
    9  jest.mock('lodash/fp/flatten')
   10  jest.mock('lodash/fp/difference')
   ..
  435              // These tests will change the index data, so reset each time to avoid side-effects from other tests
  436              // await insertTestData()
  437:             origTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL
  438:             jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000
  439          })
  440  
  441:         afterEach(() => (jasmine.DEFAULT_TIMEOUT_INTERVAL = origTimeout))
  442  
  443          test('add fav-icon', async () => {

/Users/oliversauter/GitHub/Memex/src/search/on-demand-indexing.ts:
    8  import { DBGet } from './types'
    9  
   10: interface Props {
   11      url: string
   12      tabId?: number

/Users/oliversauter/GitHub/Memex/src/search/pipeline.ts:
   72  
   73  /**
   74:  * @returns Set of "words-of-interest" - determined by pre-proc logic in `transformPageText` - extracted from `text`.
   75   */
   76  export function extractTerms(text: string): Set<string> {

/Users/oliversauter/GitHub/Memex/src/search/tags.ts:
    4  import { DBGet } from './types'
    5  
    6: interface Props {
    7      url: string
    8      tag: string

/Users/oliversauter/GitHub/Memex/src/search/types.ts:
   20  export type PageResultsMap = Map<PageID, PageScore>
   21  
   22: export interface SearchParams {
   23      domains: string[]
   24      domainsExclude: string[]
   ..
   35  }
   36  
   37: export interface FilteredIDs<T = string> {
   38      include: Set<T>
   39      exclude: Set<T>
   ..
   42  }
   43  
   44: export interface VisitInteraction {
   45      duration: number
   46      scrollPx: number
   ..
   50  }
   51  
   52: export interface PageAddRequest {
   53      pageDoc: PageDoc
   54      visits: VisitInput[]
   ..
   57  }
   58  
   59: export interface PageDoc {
   60      content: Partial<PageContent>
   61      url: string
   ..
   65  }
   66  
   67: export interface PageContent {
   68      fullText: string
   69      title: string
   ..
   74  }
   75  
   76: export interface PipelineReq {
   77      pageDoc: PageDoc
   78      rejectNoContent?: boolean
   79  }
   80  
   81: export interface PipelineRes {
   82      url: string
   83  
   ..
  100  }
  101  
  102: export interface SearchIndex {
  103      search: (
  104          params: {
  ...
  147          url: string,
  148          time: number,
  149:         data: Partial<VisitInteraction>,
  150      ) => Promise<any>
  151      addVisit: (url: string, time?: number) => Promise<any>
  ...
  174      dangerousPleaseBeSureDeleteAndRecreateDatabase: () => Promise<void>
  175  }
  176: interface PageCreationProps {
  177      url: string
  178      tabId?: number

/Users/oliversauter/GitHub/Memex/src/search/background/annots-list.ts:
  353          }
  354  
  355:         // Get intersection of results for all terms (all terms must match)
  356:         const intersected = [...results.values()].reduce((a, b) => {
  357              const bSet = new Set(b)
  358              return a.filter(res => bSet.has(res))
  359          })
  360  
  361:         return intersected
  362      }
  363  
  ...
  366          { skip, limit }: AnnotSearchParams,
  367      ) {
  368:         const internalPageSize = limit * 2
  369          const annotsByPage = new Map<string, Annotation[]>()
  370          const seenPages = new Set<string>()
  371:         let internalSkip = 0
  372  
  373          while (annotsByPage.size < limit) {
  374              const resSlice = results.slice(
  375:                 internalSkip,
  376:                 internalSkip + internalPageSize,
  377              )
  378  
  ...
  392              })
  393  
  394:             internalSkip += internalPageSize
  395          }
  396  

/Users/oliversauter/GitHub/Memex/src/search/background/annots-search.test.data.ts:
    1  import { Annotation } from 'src/direct-linking/types'
    2  
    3: interface TestAnnot extends Annotation {
    4      tags?: string[]
    5      lists?: string[]
    .
   19          createdWhen: new Date('2018-09-01T01:10'),
   20          body:
   21:             'The English term "Victors\' justice" was first used by Richard Minear in his 1971 account of the International Military Tribunal for the Far East',
   22          pageTitle: "Victor's Justice",
   23          title: "Victor's Justice",
   ..
   30          createdWhen: new Date('2018-09-02T02:23'),
   31          body:
   32:             'In moral philosophy, the term "legitimacy" is often positively interpreted as the normative status conferred by a governed people upon their governors\' institutions',
   33          pageTitle: 'Legitimacy',
   34          title: 'Legitimacy',

/Users/oliversauter/GitHub/Memex/src/search/background/index.ts:
   12      AnnotSearchParams,
   13      SocialSearchParams,
   14:     SearchInterface,
   15      BackgroundSearchParams,
   16  } from './types'
   17  import { SearchError, BadTermError, InvalidSearchError } from './errors'
   18: import { BookmarksInterface } from 'src/bookmarks/background/types'
   19  import { SearchIndex } from '../types'
   20  import { combineSearchIndex } from '../search-index'
   ..
   27      private getDb: DBGet
   28      public remoteFunctions: {
   29:         bookmarks: BookmarksInterface
   30:         search: SearchInterface
   31      }
   32  

/Users/oliversauter/GitHub/Memex/src/search/background/social-search.ts:
  192          }
  193  
  194:         // Get intersection of results for all terms (all terms must match)
  195:         const intersected = [...results.values()].reduce((a, b) => {
  196              const bSet = new Set(b)
  197              return a.filter(res => bSet.has(res))
  198          })
  199  
  200:         return intersected
  201      }
  202  

/Users/oliversauter/GitHub/Memex/src/search/background/storage.ts:
   25  import { SuggestPlugin, SuggestType } from '../plugins/suggest'
   26  
   27: export interface SearchStorageProps {
   28      storageManager: Storex
   29      annotationsColl?: string
   ..
   31  }
   32  
   33: export interface Interaction {
   34      time: number
   35      url: string
   ..
  355          }
  356  
  357:         // Terms search requires lookup of the latest interaction times for scoring,
  358          //  so it returns triples. The 3rd index is the latest time (to avoid redoing those queries).
  359          const latestTimes =

/Users/oliversauter/GitHub/Memex/src/search/background/types.ts:
    4  import { SearchIndex } from '../types'
    5  
    6: export interface AnnotPage {
    7      url: string
    8      title?: string
    .
   19  }
   20  
   21: export interface AnnotSearchParams {
   22      /** Main text to search against annot (pre-processed). */
   23      query?: string
   ..
   57  }
   58  
   59: export interface PageSearchParams extends AnnotSearchParams {
   60      contentTypes: ContentTypes
   61  }
   62  
   63: export interface ContentTypes {
   64      pages: boolean
   65      notes: boolean
   ..
   67  }
   68  
   69: export interface UrlFilters {
   70      collUrlsInc?: Set<string>
   71      tagUrlsInc?: Set<string>
   ..
   78   * Types for the search functions of the background class
   79   */
   80: export interface BackgroundSearchParams {
   81      query?: string
   82      domains?: any[]
   ..
  105   * on that day.
  106   */
  107: export interface PageUrlsByDay {
  108      [day: number]: AnnotsByPageUrl
  109  }
  ...
  112   * Maps page URLs to pages containing list of annotations created/edited on that day.
  113   */
  114: export interface PagesByUrl {
  115      [pageUrl: string]: AnnotPage
  116  }
  117  
  118: export interface AnnotsByPageUrl {
  119      [pageUrl: string]: Annotation[]
  120  }
  121  
  122: export interface SocialSearchParams extends AnnotSearchParams {
  123      usersInc?: User[]
  124      usersExc?: User[]
  ...
  128  
  129  // Todo: add proper types and refactor RPC usage in-line with 'refactoring.md'
  130: export interface SearchBackend {
  131      addPage: any
  132      addPageTerms: any
  ...
  152  }
  153  
  154: export interface SearchInterface {
  155      search: SearchIndex['search']
  156      searchAnnotations: (params: AnnotSearchParams) => any

/Users/oliversauter/GitHub/Memex/src/search/models/event-model.ts:
    3  import AbstractModel from './abstract-model'
    4  
    5: export interface Props {
    6      /** The URL/page associated with the event. */
    7      url: string

/Users/oliversauter/GitHub/Memex/src/search/models/fav-icon.ts:
    5  const favIcon = Symbol('favIconURI')
    6  
    7: export interface Props {
    8      hostname: string
    9      favIconURI: string

/Users/oliversauter/GitHub/Memex/src/search/models/page.ts:
    1  import Storex from '@worldbrain/storex'
    2  
    3: import { VisitInteraction } from '..'
    4  import AbstractModel from './abstract-model'
    5  import Visit from './visit'
    .
   14  const screenshot = Symbol('screenshotURI')
   15  
   16: export interface PageConstructorOptions {
   17      // Indexed/searchable data
   18      url: string
   ..
  188      }
  189  
  190:     addVisit(time = Date.now(), data: Partial<VisitInteraction> = {}) {
  191          this[visitsProp].push(
  192              new Visit(this.db, { url: this.url, time, ...data }),

/Users/oliversauter/GitHub/Memex/src/search/plugins/dexie-utils.test.data.ts:
   26      createdWhen: new Date('2018-09-01T01:10'),
   27      body:
   28:         'The English term "Victors\' justice" was first used by Richard Minear in his 1971 account of the International Military Tribunal for the Far East',
   29      pageTitle: "Victor's Justice",
   30      title: "Victor's Justice",

/Users/oliversauter/GitHub/Memex/src/search/plugins/dexie-utils.ts:
    2  import { DexieStorageBackend } from '@worldbrain/storex-backend-dexie'
    3  
    4: export interface RegexpQueryArgs {
    5      collection: string
    6      fieldName: string
    .
    8  }
    9  
   10: export interface GetPksProps {
   11      collection: string
   12      fieldName?: string

/Users/oliversauter/GitHub/Memex/src/search/search/filters.ts:
    1: import intersection from 'lodash/fp/intersection'
    2  import flatten from 'lodash/fp/flatten'
    3  import difference from 'lodash/fp/difference'
    .
   21  /**
   22   * Affords hiding away of the search filters (tags, domains inc/exc) and related
   23:  * messy logic behind a more-simple interface to check whether IDs are filtered out or not.
   24   */
   25  export class FilteredIDsManager<T> implements FilteredIDs<T> {
   ..
   50          ].filter(urls => urls != null)
   51  
   52:         // Depends on no. of applied filters whether to take intersection or just flatten.
   53          const initInclude =
   54:             allUrls.length > 1 ? intersection(...allUrls) : flatten(allUrls)
   55  
   56          // Ensure no excluded URLs in included sets

/Users/oliversauter/GitHub/Memex/src/search/search/map-results-to-display.ts:
    2  import { SearchParams, SearchResult, DBGet } from '../types'
    3  
    4: export interface SearchDisplayResult {
    5      url: string
    6      title: string

/Users/oliversauter/GitHub/Memex/src/search/search/text-search.ts:
   10  const some = require('lodash/some')
   11  
   12: export interface TermResults {
   13      content: string[]
   14      title: string[]
   ..
   87      }
   88  
   89: const intersectTermResults = (a: PageResultsMap, b: PageResultsMap) =>
   90      new Map([...a].filter(([url]) => b.has(url)))
   91  
   ..
  100  
  101      // Creates a Map of URLs to score multipliers, based on if they were found in title, URL, or content terms,
  102:     //  These are intersected between results for separate words
  103      return termResults
  104          .map(scoreTermResults(filteredUrls))
  105:         .reduce(intersectTermResults)
  106  }
  107  

/Users/oliversauter/GitHub/Memex/src/search-filters/container.tsx:
   17  import * as actions from './actions'
   18  
   19: interface StateProps {
   20      isSocialSearch: boolean
   21  }
   22  
   23: interface DispatchProps {
   24      fetchSuggestedTags: () => void
   25      fetchSuggestedHashtags: () => void
   ..
   29  }
   30  
   31: interface OwnProps {}
   32  
   33  type Props = StateProps & DispatchProps & OwnProps
   34  
   35: interface State {}
   36  
   37  class SearchFiltersContainer extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/Readme.md:
    1  # Search Filters
    2  
    3: This directory contains all the visual interface and redux state for the search filters.
    4  
    5  ## Directory structure

/Users/oliversauter/GitHub/Memex/src/search-filters/types.ts:
    1: export interface ContentTypes {
    2      pages: boolean
    3      highlights: boolean
    .
    5  }
    6  
    7: export interface RootState {
    8      showTagFilter: boolean
    9      showDatesFilter: boolean

/Users/oliversauter/GitHub/Memex/src/search-filters/components/bookmark-filter-container.tsx:
    9  const styles = require('./bookmark-filter.css')
   10  
   11: interface StateProps {
   12      bookmarkFilter: boolean
   13  }
   14  
   15: interface DispatchProps {
   16      onShowOnlyBookmarksChange: () => void
   17  }
   18  
   19: interface OwnProps {}
   20  
   21  type Props = StateProps & DispatchProps & OwnProps

/Users/oliversauter/GitHub/Memex/src/search-filters/components/bookmark-filter.css:
   32      width: 24px;
   33      height: 24px;
   34:     cursor: pointer;
   35      display: flex;
   36      align-items: center;
   ..
  123      background-position: center;
  124      background-color: transparent;
  125:     cursor: pointer;
  126      outline: none;
  127  

/Users/oliversauter/GitHub/Memex/src/search-filters/components/checkmark-row.css:
   16      justify-content: space-between;
   17      align-items: center;
   18:     cursor: pointer;
   19  
   20      &:hover {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/checkmark-row.tsx:
    4  const styles = require('./checkmark-row.css')
    5  
    6: export interface Props {
    7      value: string
    8      subtitle: string
    .
   13  }
   14  
   15: export interface State {}
   16  
   17  class CheckmarkRow extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/content-type-container.tsx:
   13  const styles = require('./content-types.css')
   14  
   15: export interface StateProps {
   16      showFilteredTypes?: boolean
   17      websitesFilter: boolean
   ..
   22  }
   23  
   24: export interface DispatchProps {
   25      setFilterTypes?: (value: boolean) => void
   26      clearFilterTypes?: () => void
   ..
   31      toggleAnnotationsFilter: () => void
   32  }
   33: interface OwnProps {
   34      env: 'overview' | 'inpage'
   35      tooltipPosition: string
   ..
   38  type Props = StateProps & DispatchProps & OwnProps
   39  
   40: interface State {}
   41  
   42  class ContentTypeContainer extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/content-types.css:
   14      background-size: 10px;
   15      display: inline-block;
   16:     cursor: pointer;
   17      width: 10px;
   18      height: 10px;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/content-types.tsx:
    7  const styles = require('./content-types.css')
    8  
    9: interface OwnProps {
   10      env: 'overview' | 'inpage'
   11      tooltipPosition: string
   ..
   14  type Props = StateProps & DispatchProps & OwnProps
   15  
   16: interface State {}
   17  
   18  class ContentTypes extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/dates-filter-container.tsx:
   18  const styles = require('./dates-filter.css')
   19  
   20: interface StateProps {
   21      startDate: number
   22      endDate: number
   ..
   26  }
   27  
   28: interface DispatchProps {
   29      setDatesFilter: (value: boolean) => void
   30      onStartDateChange: (date: number) => void
   ..
   36  }
   37  
   38: interface OwnProps {
   39      env: 'inpage' | 'overview'
   40      tooltipPosition: string
   ..
   43  type Props = StateProps & DispatchProps & OwnProps
   44  
   45: interface State {}
   46  
   47  class DatesFilter extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/dates-filter.css:
   10      font-size: 13px;
   11      color: #1a2f58;
   12:     cursor: pointer;
   13      text-align: center;
   14      background-color: #fff;
   ..
   26      font-size: 13px;
   27      color: #1a2f58;
   28:     cursor: pointer;
   29      text-align: left;
   30      background-color: #5cd9a6;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/domains-filter-container.tsx:
   13  const styles = require('./domains-filter.css')
   14  
   15: interface StateProps {
   16      domainFilterDropdown: boolean
   17      domainsInc: string[]
   ..
   21  }
   22  
   23: interface DispatchProps {
   24      setDomainFilter: (value: boolean) => void
   25      addIncDomainFilter: (domain: string) => void
   ..
   31  }
   32  
   33: interface OwnProps {
   34      env: 'inpage' | 'overview'
   35      tooltipPosition: string
   ..
   38  type Props = StateProps & DispatchProps & OwnProps
   39  
   40: interface State {}
   41  
   42  class DomainsPopup extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/filter-button-sidebar.css:
   15      color: color3;
   16      width: fit-content;
   17:     cursor: pointer;
   18      text-align: center;
   19      background-color: #fff;
   ..
   95      composes: nakedSquareButton from 'src/common-ui/elements.css';
   96      background-size: 10px;
   97:     cursor: pointer;
   98      width: 14px;
   99      height: 14px;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/filter-button.css:
   15      color: color3;
   16      width: fit-content;
   17:     cursor: pointer;
   18      text-align: center;
   19      background-color: #fff;
   ..
   66      composes: nakedSquareButton from 'src/common-ui/elements.css';
   67      background-size: 10px;
   68:     cursor: pointer;
   69      width: 18px;
   70      height: 18px;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/filter-button.tsx:
    8  const sidebarStyles = require('./filter-button-sidebar.css')
    9  
   10: interface Props {
   11      env: 'overview' | 'inpage'
   12      chidren?: React.ReactNode
   ..
   22  }
   23  
   24: interface State {
   25      typesCount: number
   26      showDatesClearBtn: boolean

/Users/oliversauter/GitHub/Memex/src/search-filters/components/FilterBar.css:
    4  .collection {
    5      color: color4;
    6:     cursor: pointer;
    7      width: 100%;
    8      display: flex;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/FilteredRow.css:
   11      font-size: 14px;
   12      flex: 10;
   13:     cursor: pointer;
   14      text-align: left;
   15  }
   ..
   19      display: flex;
   20      padding: 8px 10px 8px 20px;
   21:     cursor: pointer;
   22      border-bottom: 1px solid #eaecef;
   23      word-wrap: break-word;
   ..
   59      background-size: 90%;
   60      background-position: center;
   61:     cursor: pointer;
   62      outline: none;
   63      padding: 0px;

/Users/oliversauter/GitHub/Memex/src/search-filters/components/hashtags-filter-container.tsx:
   14  const styles = require('./tags-filter.css')
   15  
   16: interface StateProps {
   17      tagFilterDropdown: boolean
   18      hashtagsInc: string[]
   ..
   23  }
   24  
   25: interface DispatchProps {
   26      setHashtagFilter: (value: boolean) => void
   27      addIncHashtagFilter: (tag: string) => void
   ..
   33  }
   34  
   35: interface OwnProps {
   36      env: 'inpage' | 'overview'
   37      tooltipPosition: string
   ..
   40  type Props = StateProps & DispatchProps & OwnProps
   41  
   42: interface State {}
   43  
   44  class HashtagsFilter extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/search-filters.css:
   78      border: none;
   79      background-color: transparent;
   80:     cursor: pointer;
   81  
   82      &:hover {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/search-filters.tsx:
    5  const styles = require('./search-filters.css')
    6  
    7: interface Props {
    8      tagFilter: React.ReactNode
    9      hashtagsFilter: React.ReactNode
   ..
   16  }
   17  
   18: interface State {}
   19  
   20  class SearchFilters extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/tags-filter-container.tsx:
   13  const styles = require('./tags-filter.css')
   14  
   15: interface StateProps {
   16      tagFilterDropdown: boolean
   17      tagsInc: string[]
   ..
   21  }
   22  
   23: interface DispatchProps {
   24      setTagFilter: (value: boolean) => void
   25      addIncTagFilter: (tag: string) => void
   ..
   31  }
   32  
   33: interface OwnProps {
   34      env: 'inpage' | 'overview'
   35      tooltipPosition: string
   ..
   38  type Props = StateProps & DispatchProps & OwnProps
   39  
   40: interface State {}
   41  
   42  class TagsFilter extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/toggle-switch.css:
   22  .slider {
   23      position: absolute;
   24:     cursor: pointer;
   25      top: 0;
   26      left: 0;
   ..
   85      margin: auto;
   86      color: color2;
   87:     cursor: pointer;
   88  }
   89  

/Users/oliversauter/GitHub/Memex/src/search-filters/components/toggle-switch.tsx:
    4  const styles = require('./toggle-switch.css')
    5  
    6: export interface Props {
    7      value: string
    8      subtitle?: string
    .
   11  }
   12  
   13: export interface State {}
   14  
   15  class ToggleSwitch extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-filters/components/users-filter-container.tsx:
   15  const styles = require('./tags-filter.css')
   16  
   17: interface StateProps {
   18      userFilterDropdown: boolean
   19      usersInc: User[]
   ..
   24  }
   25  
   26: interface DispatchProps {
   27      setUserFilter: (value: boolean) => void
   28      addIncUserFilter: (user: User) => void
   ..
   34  }
   35  
   36: interface OwnProps {
   37      env: 'inpage' | 'overview'
   38      tooltipPosition: string
   ..
   41  type Props = StateProps & DispatchProps & OwnProps
   42  
   43: interface State {}
   44  
   45  class UsersFilter extends PureComponent<Props, State> {

/Users/oliversauter/GitHub/Memex/src/search-injection/dom.js:
   94      if (
   95          document.readyState === 'complete' ||
   96:         document.readyState === 'interactive'
   97      ) {
   98          renderComponent()

/Users/oliversauter/GitHub/Memex/src/search-injection/components/container.tsx:
   16  import OptIn from '../../notifications/components/OptIn'
   17  import { ToggleSwitch } from '../../common-ui/components'
   18: import { EVENT_NAMES } from '../../analytics/internal/constants'
   19  
   20  class Container extends React.Component<any, any> {

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Dropdown.css:
   19  .dropdownElement {
   20      composes: hoversidebaropen from '../../common-ui/colors.css';
   21:     cursor: pointer;
   22      font-size: 15px;
   23      font-weight: 400;
   24      color: #222;
   25      padding: 10px 20px;
   26:     font-family: 'Inter', sans-serif;
   27  }
   28  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Notification.css:
    7      margin: 30px;
    8      justify-content: flex-start;
    9:     font-family: 'Inter', sans-serif;
   10  }
   11  
   ..
   43      margin-top: 10px;
   44      font-size: 14px;
   45:     cursor: pointer;
   46  }
   47  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/RemovedText.css:
   32      text-decoration: none;
   33      color: #757475;
   34:     cursor: pointer;
   35      margin-right: 15px;
   36  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/ResultItem.css:
   12      flex-direction: column;
   13      justify-content: space-between;
   14:     font-family: 'Inter', sans-serif;
   15  }
   16  

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Results.css:
    1: @import url('/fonts/Inter/inter.css');
    2  @import url('/fonts/Poppins/poppins.css');
    3  
    .
    7  
    8  .MEMEX_CONTAINER * {
    9:     font-family: 'Inter', sans-serif;
   10  }
   11  
   ..
   47      font-weight: 600;
   48      margin-right: 10px;
   49:     cursor: pointer;
   50  }
   51  
   ..
   61      position: absolute;
   62      border: none;
   63:     cursor: pointer;
   64      background-image: url('/img/settings.svg');
   65      background-repeat: no-repeat;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotations-manager.ts:
    1  import { remoteFunction } from 'src/util/webextensionRPC'
    2: import { Anchor } from 'src/direct-linking/content_script/interactions'
    3  import { Omit } from './types'
    4  import { Annotation } from 'src/sidebar-overlay/sidebar/types'
    5: import { EVENT_NAMES } from 'src/analytics/internal/constants'
    6  import analytics from 'src/analytics'
    7  import {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/index.tsx:
   12      removeMediumHighlights,
   13      sortAnnotationsByPosition,
   14: } from './content_script/highlight-interactions'
   15  
   16  export const setupRibbonAndSidebarUI = (

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/types.ts:
   20  import { State as CustomListsState } from 'src/custom-lists/types'
   21  
   22: export default interface RootState {
   23      ribbon: RibbonState
   24      sidebar: SidebarState
   ..
   52  ) => DispatchProps
   53  
   54: export interface OpenSidebarArgs {
   55      activeUrl?: string
   56  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/utils.ts:
   12      promiseCreator,
   13      {
   14:         intervalMilliSeconds,
   15          timeoutMilliSeconds,
   16:     }: { intervalMilliSeconds: number; timeoutMilliSeconds: number },
   17  ) {
   18      const startMs = Date.now()
   ..
   39              }
   40  
   41:             setTimeout(tryOrRetryLater, intervalMilliSeconds)
   42          }
   43  

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/all-modes-footer.css:
   14      composes: nakedButton hoverColor from '../../common-ui/colors.css';
   15      box-sizing: border-box;
   16:     cursor: pointer;
   17      font-size: 14px;
   18      border: none;
   ..
   29      composes: nakedButton hoverColor warningColor from '../../common-ui/colors.css';
   30      box-sizing: border-box;
   31:     cursor: pointer;
   32      font-size: 14px;
   33      border: none;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/all-modes-footer.tsx:
    6  const styles = require('./all-modes-footer.css')
    7  
    8: interface Props {
    9      mode: 'default' | 'edit' | 'delete'
   10      isEdited?: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/annotation-box-container.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .container {
    .
    9      font-size: 13px;
   10      margin: 10px 0 5px 0;
   11:     cursor: pointer;
   12      animation: onload 0.3s cubic-bezier(0.65, 0.05, 0.36, 1);
   13  
   ..
   23  
   24  .isClickable {
   25:     cursor: pointer;
   26  }
   27  
   ..
   56      background-size: 16px;
   57      display: inline-block;
   58:     cursor: pointer;
   59      background-color: transparent;
   60      background-position: center;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/annotation-box-container.tsx:
   11  import { CrowdfundingBox } from 'src/common-ui/crowdfunding'
   12  import { remoteFunction } from 'src/util/webextensionRPC'
   13: import { EVENT_NAMES } from 'src/analytics/internal/constants'
   14  import { actions as filterActs } from 'src/search-filters'
   15  
   ..
   17  const footerStyles = require('./default-footer.css')
   18  
   19: interface OwnProps {
   20      /** Required to decide how to go to an annotation when it's clicked. */
   21      env: 'inpage' | 'overview'
   ..
   38  }
   39  
   40: interface DispatchProps {
   41      handleTagClick: (tag: string) => void
   42  }
   ..
   44  type Props = OwnProps & DispatchProps
   45  
   46: interface State {
   47      mode: 'default' | 'edit' | 'delete'
   48      displayCrowdfunding: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/comment-tags.tsx:
    6  const styles = require('./comment-tags.css')
    7  
    8: interface Props {
    9      comment?: string
   10      tags?: string[]

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/default-delete-mode-content.tsx:
    4  import AllModesFooter from './all-modes-footer'
    5  
    6: interface Props {
    7      env: 'inpage' | 'overview'
    8      mode: 'default' | 'delete'

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/default-footer.css:
   35      background-size: 16px;
   36      display: inline-block;
   37:     cursor: pointer;
   38      background-color: transparent;
   39      background-position: center;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/default-footer.tsx:
    4  const styles = require('./default-footer.css')
    5  
    6: interface Props {
    7      displayGoToAnnotation: boolean
    8      isEdited: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/edit-mode-content.css:
   17      box-sizing: border-box;
   18      color: #000;
   19:     cursor: pointer;
   20      font-weight: 700;
   21      font-size: 14px;
   ..
   31      box-sizing: border-box;
   32      color: #818181;
   33:     cursor: pointer;
   34      margin: 0 3px;
   35      font-size: 14px;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/edit-mode-content.tsx:
   10  const styles = require('./edit-mode-content.css')
   11  
   12: interface Props {
   13      env?: 'inpage' | 'overview'
   14      comment?: string
   ..
   18  }
   19  
   20: interface State {
   21      commentText: string
   22      tagsInput: string[]

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/actions.ts:
    1  import { createAction } from 'redux-act'
    2  
    3: import { Anchor } from 'src/direct-linking/content_script/interactions'
    4  import { Thunk } from '../types'
    5  import { createAnnotation } from '../sidebar/actions'

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/reducer.ts:
    3  import * as actions from './actions'
    4  import State from './types'
    5: import { Anchor } from 'src/direct-linking/content_script/interactions'
    6  
    7  export const defaultState: State = {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/types.ts:
    4   */
    5  
    6: import { Anchor } from 'src/direct-linking/content_script/interactions'
    7  
    8: export default interface State {
    9      /** Denotes whether or not the sidebar should show the comment box. */
   10      showCommentBox: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/comment-box-container.css:
   14  
   15      & * {
   16:         font-family: 'Inter', sans-serif;
   17      }
   18  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/comment-box-container.tsx:
    9  import { AnnotationHighlight } from '../../components'
   10  import CommentBoxForm from './comment-box-form'
   11: import { Anchor } from 'src/direct-linking/content_script/interactions'
   12  import { MapDispatchToProps } from '../../types'
   13  
   14  const styles = require('./comment-box-container.css')
   15  
   16: interface StateProps {
   17      anchor: Anchor
   18      commentText: string
   ..
   21  }
   22  
   23: interface DispatchProps {
   24      handleCommentTextChange: (comment: string) => void
   25      saveComment: (
   ..
   33  }
   34  
   35: interface OwnProps {
   36      env?: 'inpage' | 'overview'
   37      isSocialPost?: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/comment-box-form.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .textArea {
    .
   22  }
   23  
   24: .interactions {
   25      display: flex;
   26  }
   ..
   57      border: none;
   58      background-color: transparent;
   59:     cursor: pointer;
   60  
   61      &:hover {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/comment-box-form.tsx:
   10  const styles = require('./comment-box-form.css')
   11  
   12: interface Props {
   13      env?: 'inpage' | 'overview'
   14      commentText: string
   ..
   21  }
   22  
   23: interface State {
   24      isTagInputActive: boolean
   25      showTagsPicker: boolean
   ..
  152                  {/* Save and Cancel buttons. */}
  153                  <div className={styles.footer}>
  154:                     <div className={styles.interactions}>
  155                          <button
  156                              ref={this.setTagButtonRef}

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/tag-input-container.tsx:
    8  import { IndexDropdown } from 'src/common-ui/containers'
    9  
   10: interface StateProps {
   11      tags: string[]
   12      initTagSuggestions: string[]
   13  }
   14  
   15: interface DispatchProps {
   16      addTag: (tag: string) => void
   17      deleteTag: (tag: string) => void
   18  }
   19  
   20: interface OwnProps {
   21      env?: 'inpage' | 'overview'
   22      /* tags from local storage */

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/annotation-highlight.css:
    1  .showMoreBtn {
    2      margin: 5px 0 0 5px;
    3:     cursor: pointer;
    4      display: inline-block;
    5      background-image: url('/img/longarrow.svg');

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/annotation-highlight.tsx:
    1  import * as React from 'react'
    2  
    3: import { Anchor } from 'src/direct-linking/content_script/interactions'
    4  
    5  const localStyles = require('./truncated-text-renderer.css')
    6  const styles = require('../annotation-box/annotation-box-container.css')
    7  
    8: interface Props {
    9      anchor: Anchor
   10  }
   11  
   12: interface State {
   13      truncateHighlight: boolean
   14  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/close-button.css:
    1  .close {
    2:     cursor: pointer;
    3      z-index: 2147483647;
    4      line-height: normal;
    .
   13      background-size: 12px;
   14      display: block;
   15:     cursor: pointer;
   16      background-repeat: no-repeat;
   17      width: 22px;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/close-button.tsx:
    5  const styles = require('./close-button.css')
    6  
    7: interface Props {
    8      clickHandler: ClickHandler<HTMLElement>
    9      title: string

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/congrats-message.css:
   28  .learnMore {
   29      composes: CTA from 'src/common-ui/elements.css';
   30:     cursor: pointer;
   31      font-size: 14px;
   32      width: max-content;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/footer.tsx:
    4  const styles = require('./footer.css')
    5  
    6: interface Props {
    7      dialogText?: string
    8      dialogTextClassName?: any

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/search-box.css:
    7  
    8  .button {
    9:     cursor: pointer;
   10      z-index: 2147483647;
   11      line-height: normal;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/search-box.tsx:
    6  const styles = require('./search-box.css')
    7  
    8: export interface Props {
    9      searchValue: string
   10      onSearchEnter?: (e: SyntheticEvent<HTMLInputElement>) => void

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/tag-holder.css:
    8      align-items: center;
    9      box-sizing: border-box;
   10:     cursor: pointer;
   11  }
   12  
   ..
   27      display: inline-block;
   28      color: #888;
   29:     font-family: 'Inter', sans-serif;
   30      font-weight: 400;
   31      font-style: italic;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/tag-holder.tsx:
    6  const styles = require('./tag-holder.css')
    7  
    8: interface Props {
    9      tags: string[]
   10      clickHandler: ClickHandler<HTMLElement>
   ..
   12  }
   13  
   14: interface State {
   15      maxTagsAllowed: number
   16  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/tag-input.tsx:
    4  import TagHolder from './tag-holder'
    5  
    6: interface Props {
    7      env?: 'inpage' | 'overview'
    8      isTagInputActive: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/topbar.css:
   31      align-items: center;
   32      outline: none;
   33:     cursor: pointer;
   34      margin-left: 2px;
   35      border: none;
   ..
   66      border: none;
   67      background-color: transparent;
   68:     cursor: pointer;
   69  
   70      &:hover {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/topbar.tsx:
    7  const styles = require('./topbar.css')
    8  
    9: interface Props {
   10      env: 'inpage' | 'overview'
   11      searchValue: string

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/truncated-text-renderer.css:
    7      font-weight: bold;
    8      font-size: 11px;
    9:     cursor: pointer;
   10      margin-top: -2px;
   11      border-radius: 0px;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/components/truncated-text-renderer.tsx:
    4  const styles = require('./truncated-text-renderer.css')
    5  
    6: interface Props {
    7      text: string
    8      getTruncatedTextObject: (
    .
   14  }
   15  
   16: interface State {
   17      shouldTruncate: boolean
   18  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/content_script/index.ts:
    1: import { bodyLoader, interactiveLoader } from 'src/util/loader'
    2  import ToolbarNotifications from 'src/toolbar-notification/content_script'
    3: import * as interactions from './ribbon-interactions'
    4  import { getSidebarState } from '../utils'
    5  import AnnotationsManager from 'src/sidebar-overlay/annotations-manager'
    .
   20      }
   21  
   22:     interactions.insertRibbon({ annotationsManager, toolbarNotifications })
   23  }
   24  
   ..
   30      toolbarNotifications: ToolbarNotifications
   31  }) => {
   32:     runOnScriptShutdown(() => interactions.removeRibbon())
   33:     interactions.setupRPC({ annotationsManager, toolbarNotifications })
   34  
   35      const isSidebarEnabled = await getSidebarState()
   ..
   42      }
   43  
   44:     await interactiveLoader()
   45      document.addEventListener('keydown', onKeydownWrapper, false)
   46  
   ..
   48      document.removeEventListener('keydown', onKeydownWrapper, false)
   49  
   50:     interactions.insertRibbon({ annotationsManager, toolbarNotifications })
   51  }
   52  

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/content_script/ribbon-interactions.ts:
   10  import { getTooltipState } from 'src/content-tooltip/utils'
   11  import { createRootElement, destroyRootElement } from './rendering'
   12: import { removeHighlights } from './highlight-interactions'
   13  import AnnotationsManager from 'src/sidebar-overlay/annotations-manager'
   14  import ToolbarNotifications from 'src/toolbar-notification/content_script'
   15: import { insertTooltip, removeTooltip } from 'src/content-tooltip/interactions'
   16: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
   17  
   18  let target = null /* Target container for the Ribbon. */
   ..
  182      toolbarNotifications: ToolbarNotifications
  183  }) => {
  184:     makeRemotelyCallableType<RibbonInteractionsInterface>({
  185          /**
  186           * Used for inserting the ribbon.

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon/types.ts:
    4   */
    5  
    6: export default interface State {
    7      isPageFullScreen: boolean
    8      isExpanded: boolean
    .
   16  }
   17  
   18: export interface RibbonInteractionsInterface {
   19      insertRibbon: ({ override, ...args }?: { override?: boolean } | any) => any
   20      removeRibbon: ({ override }?: { override?: boolean }) => any

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon/components/ribbon-container.tsx:
   26  import { actions as sidebarActs } from 'src/sidebar-overlay/sidebar/'
   27  
   28: interface StateProps {
   29      isExpanded: boolean
   30      isTooltipEnabled: boolean
   ..
   43  }
   44  
   45: interface DispatchProps {
   46      onInit: () => void
   47      setAnnotationsManager: (annotationsManager: AnnotationsManager) => void
   ..
   62  }
   63  
   64: interface OwnProps {
   65      commentText: string
   66      isSidebarOpen: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon/components/ribbon.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  :host * {
    4:     font-family: 'Inter', sans-serif;
    5  }
    6  
    .
  110      border: none;
  111      background-color: transparent;
  112:     cursor: pointer;
  113  
  114      &:hover {
  ...
  227  }
  228  
  229: /* Interaction Modals */
  230  
  231  .collectionDiv {
  ...
  295      background-repeat: no-repeat;
  296      display: inline-block;
  297:     cursor: pointer;
  298  }
  299  

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon/components/ribbon.tsx:
   14      highlightAnnotations,
   15      removeHighlights,
   16: } from '../../content_script/highlight-interactions'
   17  import * as utils from 'src/content-tooltip/utils'
   18  import { KeyboardShortcuts, Shortcut } from 'src/content-tooltip/types'
   ..
   20  const styles = require('./ribbon.css')
   21  
   22: export interface Props {
   23      isExpanded: boolean
   24      isRibbonEnabled: boolean
   ..
   52  }
   53  
   54: interface State {
   55      shortcutsReady: boolean
   56  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon-sidebar-controller/ribbon-sidebar-container.tsx:
   20  } from 'src/sidebar-overlay/comment-box'
   21  import AnnotationsManager from 'src/sidebar-overlay/annotations-manager'
   22: import { Anchor } from 'src/direct-linking/content_script/interactions'
   23  import { retryUntilErrorResolves } from '../utils'
   24  import * as bookmarkActs from 'src/popup/bookmark-button/actions'
   25  import * as popup from 'src/popup/selectors'
   26  
   27: interface StateProps {
   28      url: string
   29      isPageFullScreen: boolean
   ..
   35  }
   36  
   37: interface DispatchProps {
   38      onInit: () => void
   39      handleToggleFullScreen: (e: Event) => void
   ..
   54  }
   55  
   56: interface OwnProps extends Partial<KeyboardActions> {
   57      closeTimeoutMs?: number
   58      forceExpand?: boolean
   ..
   76  type Props = StateProps & DispatchProps & OwnProps
   77  
   78: interface State {
   79      isMouseInRibbonSideSidebar: boolean
   80  }
   ..
  404              },
  405              {
  406:                 intervalMilliSeconds: 200,
  407                  timeoutMilliSeconds: 2000,
  408              },

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon-sidebar-controller/ribbon-sidebar-controller.tsx:
   10  const store = configureStore()
   11  
   12: interface Props extends Partial<KeyboardActions> {
   13      annotationsManager: AnnotationsManager
   14      handleRemoveRibbon: () => void

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/actions.ts:
    5  import { RES_PAGE_SIZE } from './constants'
    6  import { Annotation, Page } from './types'
    7: import { Anchor } from 'src/direct-linking/content_script/interactions'
    8  import * as selectors from './selectors'
    9  import AnnotationsManager from '../annotations-manager'
   10  import { remoteFunction } from 'src/util/webextensionRPC'
   11: import { EVENT_NAMES } from 'src/analytics/internal/constants'
   12  import { FLOWS, STAGES } from 'src/overview/onboarding/constants'
   13  import {
   ..
  291              error =>
  292                  notifications.create({
  293:                     requireInteraction: false,
  294                      title: 'Memex error: starring page',
  295                      message: error.message,

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/types.ts:
    6  import { State as CommentBoxState } from '../comment-box'
    7  import AnnotationsManager from '../annotations-manager'
    8: import { Anchor } from 'src/direct-linking/content_script/interactions'
    9  
   10: export interface Page {
   11      url: string | null
   12      title: string | null
   13  }
   14  
   15: export interface Annotation {
   16      /** Unique URL for this annotation. Used as more of an ID; probably not for display. */
   17      url: string
   ..
   30  }
   31  
   32: export default interface State {
   33:     /** An object that is responsible for interacting with appropriate scripts
   34       * for annotations.
   35       */
   ..
   62  }
   63  
   64: export interface KeyboardActions {
   65      openToCollections: boolean
   66      openToBookmark: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/utils.ts:
    3  import { remoteFunction, runInTab } from 'src/util/webextensionRPC'
    4  import { Annotation } from 'src/sidebar-overlay/sidebar/types'
    5: import { RibbonInteractionsInterface } from 'src/sidebar-overlay/ribbon/types'
    6  
    7  /**
    .
   31                  // Necessary to insert the ribbon/sidebar in case the user has turned
   32                  // it off.
   33:                 await runInTab<RibbonInteractionsInterface>(
   34                      tabId,
   35                  ).insertRibbon()

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/filters-sidebar-container.tsx:
    9  import FiltersSidebar from './filters-sidebar'
   10  
   11: interface StateProps {
   12      showClearFiltersBtn: boolean
   13      isSocialSearch: boolean
   14  }
   15  
   16: interface DispatchProps {
   17      clearAllFilters: React.MouseEventHandler<HTMLButtonElement>
   18      fetchSuggestedTags: () => void
   ..
   23  }
   24  
   25: interface OwnProps {
   26      env: 'inpage' | 'overview'
   27      toggleShowFilters: () => void

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/filters-sidebar.css:
   61      background-size: 10px;
   62      display: inline-block;
   63:     cursor: pointer;
   64      width: 15px;
   65      height: 15px;
   ..
   83      width: 25px;
   84      height: 25px;
   85:     cursor: pointer;
   86      border: none;
   87      outline: none;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/filters-sidebar.tsx:
   16  const styles = require('./filters-sidebar.css')
   17  
   18: interface State {}
   19  
   20  class FiltersSidebar extends Component<Props, State> {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/page-info.css:
   20      border: none;
   21      font-weight: 600;
   22:     cursor: pointer;
   23      outline: none;
   24      color: color4;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/page-info.tsx:
    6  const styles = require('./page-info.css')
    7  
    8: interface Props {
    9      page: Page
   10      isCurrentPage: boolean

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/result-list-container.tsx:
   24  const styles = require('./result-list.css')
   25  
   26: export interface StateProps {
   27      isLoading: boolean
   28      needsWaypoint: boolean
   ..
   37  }
   38  
   39: export interface DispatchProps {
   40      resetUrlDragged: () => void
   41      resetActiveTagIndex: () => void
   ..
   58  }
   59  
   60: export interface OwnProps {}
   61  
   62  export type Props = StateProps & DispatchProps & OwnProps
   63  
   64: interface State {
   65      tagSuggestions: string[]
   66  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/result-list.tsx:
    4  const styles = require('./result-list.css')
    5  
    6: export interface Props {
    7      scrollDisabled?: boolean
    8      children: ReactChild[] | ReactChild

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/results-container.tsx:
   13  const styles = require('./result-list.css')
   14  
   15: export interface StateProps {
   16      noResults: boolean
   17      isBadTerm: boolean
   ..
   23  }
   24  
   25: export interface DispatchProps {
   26      toggleAreAnnotationsExpanded: (e: React.SyntheticEvent) => void
   27  }
   28  
   29: export interface OwnProps {}
   30  
   31  export type Props = StateProps & DispatchProps & OwnProps

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/search-type-switch.css:
   35      font-weight: 600;
   36      border: none;
   37:     cursor: pointer;
   38      outline: none;
   39      margin-right: 1px;

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/search-type-switch.tsx:
   13  const styles = require('./search-type-switch.css')
   14  
   15: export interface StateProps {
   16      annotsFolded: boolean
   17      resultsSearchType: 'page' | 'notes' | 'social'
   ..
   22  }
   23  
   24: export interface DispatchProps {
   25      handleUnfoldAllClick: React.MouseEventHandler<HTMLButtonElement>
   26      handlePageTypeClick: React.MouseEventHandler<HTMLButtonElement>
   ..
   31  }
   32  
   33: export interface OwnProps {
   34      isOverview?: boolean
   35  }

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/sidebar-container.tsx:
   18  import { actions as filterActs } from 'src/search-filters'
   19  
   20: interface StateProps {
   21      isOpen: boolean
   22      isLoading: boolean
   ..
   36  }
   37  
   38: interface DispatchProps {
   39      onInit: () => void
   40      setAnnotationsManager: (annotationsManager: AnnotationsManager) => void
   ..
   53  }
   54  
   55: interface OwnProps {
   56      env: 'inpage' | 'overview'
   57      annotationsManager: AnnotationsManager

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/sidebar.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .sidebar * {
    4:     font-family: 'Inter', sans-serif;
    5  }
    6  
    .
   64      display: inline-block;
   65      outline: none;
   66:     cursor: pointer;
   67  }
   68  
   ..
   73      background: none;
   74      border: none;
   75:     cursor: pointer;
   76  
   77      &:disabled {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/sidebar.tsx:
   19  const styles = require('./sidebar.css')
   20  
   21: interface Props {
   22      env: 'inpage' | 'overview'
   23      isOpen: boolean
   ..
   55  }
   56  
   57: interface State {
   58      searchValue: string
   59      showFiltersSidebar: boolean

/Users/oliversauter/GitHub/Memex/src/social-integration/types.ts:
    5  import { State as SidebarState } from 'src/sidebar-overlay/sidebar'
    6  
    7: export default interface RootState {
    8      tagsBtn: TagsBtnState
    9      collectionsBtn: CollectionsBtnState
   ..
   13  export type Thunk<R = void> = ThunkAction<R, RootState, void, any>
   14  
   15: export interface User {
   16      id?: number
   17      name: string
   ..
   24  }
   25  
   26: export interface Tweet {
   27      id?: number
   28      userId: number
   ..
   36  }
   37  
   38: export interface TweetUrl {
   39      url: string
   40  }
   41  
   42: export interface TweetUrlProps {
   43      username: string
   44      serviceId: string
   45  }
   46  
   47: export interface SocialPage extends Tweet {
   48      hasBookmark?: boolean
   49      annotsCount?: number

/Users/oliversauter/GitHub/Memex/src/social-integration/background/storage.ts:
   15  import { buildPostUrlId } from '../util'
   16  
   17: export interface SocialStorageProps {
   18      storageManager: Storex
   19      tweetsColl?: string

/Users/oliversauter/GitHub/Memex/src/social-integration/twitter/components/action-bar-items.tsx:
    5  const styles = require('./styles.css')
    6  
    7: interface Props {
    8      url: string
    9      tagManager: ReactNode
   ..
   15  }
   16  
   17: interface State {
   18      showCommentBox: boolean
   19      showTagsPicker: boolean

/Users/oliversauter/GitHub/Memex/src/social-integration/twitter/components/action-bar.tsx:
    8  import { Props as RootProps } from './save-to-memex-container'
    9  
   10: interface Props extends RootProps {
   11      saveTweet: (callback?: boolean) => () => Promise<void>
   12  }

/Users/oliversauter/GitHub/Memex/src/social-integration/twitter/components/save-to-memex-container.tsx:
   25  const styles = require('./styles.css')
   26  
   27: export interface StateProps {
   28      tags: string[]
   29      initTagSuggs: string[]
   ..
   34  }
   35  
   36: export interface DispatchProps {
   37      onInit: (url: string) => void
   38      toggleBookmark: (url: string, isBookmarked: boolean) => void
   ..
   46  }
   47  
   48: interface OwnProps {
   49      element: HTMLElement
   50      annotationsManager: AnnotationsManager
   ..
   55  export type Props = StateProps & DispatchProps & OwnProps
   56  
   57: interface State {
   58      isMouseInside: boolean
   59      saved: boolean

/Users/oliversauter/GitHub/Memex/src/social-integration/twitter/components/styles.css:
    9      height: 18px;
   10      width: 18px;
   11:     cursor: pointer;
   12      border: none;
   13      vertical-align: bottom;

/Users/oliversauter/GitHub/Memex/src/sync/index.tests.ts:
   24  
   25  type SyncTestSequence = SyncTestStep[]
   26: interface SyncTestStep {
   27      action: 'execute' | 'sync' | 'preCheck' | 'postCheck'
   28      integrationStepIndex: number

/Users/oliversauter/GitHub/Memex/src/sync/background/index.test.ts:
   23      MobileIntegrationTestSetup,
   24      setupMobileIntegrationTest,
   25: } from 'src/tests/mobile-intergration-tests'
   26  
   27  import {
   ..
   35  const registerTest = it
   36  
   37: interface TestDependencies {
   38      sharedSyncLog: SharedSyncLogStorage
   39      userId?: string
   ..
   49      setupTest: (dependencies: TestDependencies) => TestSetup
   50  }) {
   51:     interface Options {
   52          skip?: boolean
   53      }
   ..
   95      skip?: boolean
   96  }) {
   97:     interface TestSetupConfig {
   98          enablePostProcessing?: boolean
   99          enableSyncEncyption?: boolean
  ...
  749      skip?: boolean
  750  }) {
  751:     interface TestSetupConfig {
  752          enablePostProcessing?: boolean
  753      }

/Users/oliversauter/GitHub/Memex/src/sync/background/index.ts:
   12  import { TweetNaclSyncEncryption } from '@worldbrain/memex-common/lib/sync/secrets/tweetnacl'
   13  
   14: import { PublicSyncInterface } from './types'
   15  import {
   16      MemexExtClientSyncLogStorage,
   ..
   27  export default class SyncBackground extends SyncService {
   28      initialSync: MemexInitialSync
   29:     remoteFunctions: PublicSyncInterface
   30      firstContinuousSyncPromise?: Promise<void>
   31      getSharedSyncLog: () => Promise<SharedSyncLog>

/Users/oliversauter/GitHub/Memex/src/sync/background/types.ts:
    1  import { SyncReturnValue } from '@worldbrain/storex-sync/lib/index'
    2  
    3: export interface PublicSyncInterface {
    4      requestInitialSync(options?: {
    5          preserveChannel?: boolean

/Users/oliversauter/GitHub/Memex/src/sync/components/types.ts:
    1: export interface SyncDevice {
    2      deviceId: string
    3      productType: string

/Users/oliversauter/GitHub/Memex/src/sync/components/device-list/SyncDeviceItem.tsx:
   13  } from 'src/common-ui/components/design-library/colors'
   14  
   15: interface Props {
   16      device: SyncDevice
   17      handleRemoveDevice: (deviceId: string) => void
   ..
   60  
   61  const RemoveButton = styled.div`
   62:     cursor: pointer;
   63      padding: 5px 10px;
   64      background: ${props => (props.disabled ? colorDisabled : colorError)};
   65      border-radius: 5px;
   66:     cursor: pointer;
   67      display: inline-block;
   68      height: fit-content;

/Users/oliversauter/GitHub/Memex/src/sync/components/device-list/SyncDevicesList.tsx:
    3  import SyncDeviceItem from 'src/sync/components/device-list/SyncDeviceItem'
    4  
    5: interface Props {
    6      devices: SyncDevice[]
    7      handleRemoveDevice: any

/Users/oliversauter/GitHub/Memex/src/sync/components/device-list/SyncDevicesPane.tsx:
   16  const styles = require('../styles.css')
   17  
   18: interface Props {
   19      devices: SyncDevice[]
   20      isDeviceSyncEnabled: boolean
   ..
   27  }
   28  
   29: interface State {
   30      isTogglingSync: boolean
   31      isAddingNewDevice: boolean

/Users/oliversauter/GitHub/Memex/src/sync/components/device-list/SyncNowOverlayPane.tsx:
    9  import { SyncDevice } from 'src/sync/components/types'
   10  
   11: interface Props {
   12      onClickSync: () => void
   13      isSyncing: boolean
   ..
   48  }
   49  
   50: interface ContainerProps {}
   51: interface ContainerState {
   52      showSync: boolean
   53      syncEnabled: boolean

/Users/oliversauter/GitHub/Memex/src/sync/components/initial-sync/initial-sync-setup/logic.ts:
    6  type SyncSetupState = 'introduction' | 'pair' | 'sync' | 'done'
    7  
    8: export interface InitialSyncSetupState {
    9      status: SyncSetupState
   10      initialSyncMessage?: string
   ..
   19  }>
   20  
   21: export interface InitialSyncSetupDependencies {
   22      onClose?: () => void
   23      waitForInitialSyncConnected: () => Promise<any>

/Users/oliversauter/GitHub/Memex/src/tags/background/index.ts:
    8  import { SearchIndex } from 'src/search'
    9  
   10: interface Tabs {
   11      tabId: number
   12      url: string

/Users/oliversauter/GitHub/Memex/src/tests/integration-tests.ts:
   14  import { MemorySubscriptionsService } from '@worldbrain/memex-common/lib/subscriptions/memory'
   15  
   16: export interface IntegrationTestSuite<StepContext> {
   17      description: string
   18      tests: Array<IntegrationTest<StepContext>>
   19  }
   20  
   21: export interface IntegrationTest<StepContext> {
   22      description: string
   23      mark?: boolean
   24      instantiate: () => IntegrationTestInstance<StepContext>
   25  }
   26: export interface IntegrationTestInstance<StepContext> {
   27      steps: Array<IntegrationTestStep<StepContext>>
   28  }
   29  
   30: export interface IntegrationTestStep<StepContext> {
   31      debug?: true
   32      description?: string
   ..
   42  }
   43  
   44: export interface BackgroundIntegrationTestSetup {
   45      storageManager: StorageManager
   46      backgroundModules: BackgroundModules
   ..
   51      subscriptionService: MemorySubscriptionsService
   52  }
   53: export interface BackgroundIntegrationTestContext {
   54      setup: BackgroundIntegrationTestSetup
   55      isSyncTest?: boolean
   ..
   77  }
   78  
   79: export interface BackgroundIntegrationTestOptions {
   80      mark?: boolean
   81  }

/Users/oliversauter/GitHub/Memex/src/tests/mobile-intergration-tests.ts:
   20  import { MemexExtSyncSettingStore } from 'src/sync/background/setting-store'
   21  
   22: export interface MobileIntegrationTestSetup {
   23      storage: {
   24          manager: StorageManager

/Users/oliversauter/GitHub/Memex/src/tests/storage-change-detector.ts:
    3  import { getObjectPk } from '@worldbrain/storex-sync/lib/utils'
    4  
    5: export interface StorageDiff {
    6      [collection: string]: StorageCollectionDiff
    7  }
    8  
    9: export interface StorageCollectionDiff {
   10      [pk: string]: StorageDiffEntry
   11  }
   ..
   16      | StorageDiffDeletionEntry
   17  
   18: export interface StorageDiffEntryBase { }
   19  
   20: export interface StorageDiffCreationEntry extends StorageDiffEntryBase {
   21      type: 'create'
   22      object: { [key: string]: any }
   23  }
   24  
   25: export interface StorageDiffModificationEntry extends StorageDiffEntryBase {
   26      type: 'modify'
   27      updates: { [key: string]: any }
   28  }
   29: export interface StorageDiffDeletionEntry extends StorageDiffEntryBase {
   30      type: 'delete'
   31  }
   32  
   33: interface StorageState {
   34      [collection: string]: { [pk: string]: any }
   35  }

/Users/oliversauter/GitHub/Memex/src/tests/storage-operation-logger.ts:
    5  } from '@worldbrain/storex/lib/types/middleware'
    6  
    7: export interface LoggedStorageOperation {
    8      operation: any[]
    9      result: any

/Users/oliversauter/GitHub/Memex/src/toolbar-notification/content_script/react/container.tsx:
   12  import { setOnboardingStage } from 'src/overview/onboarding/utils'
   13  import { FLOWS, STAGES } from 'src/overview/onboarding/constants'
   14: import { EVENT_NAMES } from 'src/analytics/internal/constants'
   15  
   16  const styles = require('./styles.css')
   17  
   18: export interface Props {
   19      type: string
   20      onCloseRequested: () => void

/Users/oliversauter/GitHub/Memex/src/toolbar-notification/content_script/react/layout.css:
   52      composes: removeIcon from 'src/common-ui/icons.css';
   53      position: absolute;
   54:     cursor: pointer;
   55      top: 5px;
   56      right: 5px;

/Users/oliversauter/GitHub/Memex/src/toolbar-notification/content_script/react/notifications/notifications.css:
    8  .title {
    9      display: flex;
   10:     font-family: 'Inter', sans-serif;
   11      flex-direction: row;
   12      width: 100%;

/Users/oliversauter/GitHub/Memex/src/toolbar-notification/content_script/react/notifications/power-search-browse.css:
    4  .container {
    5      display: flex;
    6:     font-family: 'Inter', sans-serif;
    7      flex-direction: row;
    8      width: 100%;

/Users/oliversauter/GitHub/Memex/src/toolbar-notification/content_script/react/notifications/ribbon-first-close.css:
    6  .title {
    7      display: flex;
    8:     font-family: 'Inter', sans-serif;
    9      flex-direction: row;
   10      width: 100%;

/Users/oliversauter/GitHub/Memex/src/tools/storage-explorer.ts:
   69      const storageModules = getBackgroundStorageModules(backgroundModules)
   70  
   71:     const display = console['log'].bind(console) // Circumvent linter
   72      if (args.command === 'list-operations') {
   73          const report = mapValues(storageModules, storageModule =>

/Users/oliversauter/GitHub/Memex/src/util/generate-token.js:
    1: import { API_HOST } from 'src/analytics/internal/constants'
    2  import { INSTALL_TIME_KEY } from 'src/constants'
    3  const uuidv4 = require('uuid/v4')

/Users/oliversauter/GitHub/Memex/src/util/idle.ts:
    5  type ErrHandler = (err: Error) => void
    6  
    7: interface IdleHandlers {
    8      onIdle: Handler
    9      onActive: Handler
   ..
   12  
   13  export class IdleManager {
   14:     public static DEF_INTERVAL = 20
   15  
   16:     private interval: number
   17  
   18      // States to hold scheduled handlers in
   ..
   23      }
   24  
   25:     constructor(interval = IdleManager.DEF_INTERVAL) {
   26:         this.idleInterval = interval
   27      }
   28  
   ..
   40      }
   41  
   42:     public set idleInterval(seconds: number) {
   43          if (browser.idle) {
   44:             browser.idle.setDetectionInterval(seconds)
   45          }
   46  
   47:         this.interval = seconds
   48      }
   49  

/Users/oliversauter/GitHub/Memex/src/util/loader.js:
   27  })
   28  
   29: export const interactiveLoader = loader(() => {
   30      return new Promise(resolve => {
   31          if (document.readyState !== 'loading') {

/Users/oliversauter/GitHub/Memex/src/util/map-set-helpers.js:
    3  /**
    4   * @param {Map<any,any>[]} mapArr
    5:  * @returns {Map<any,any>} Intersection Map of all input maps
    6   */
    7: export const intersectManyMaps = mapArr =>
    8:     mapArr.reduce((accMap, currMap) => intersectMaps(accMap)(currMap))
    9  
   10  /**
   ..
   12   * @returns {(a: Map<any, any>) => Map<any, any>}
   13   */
   14: export const intersectMaps = b => a =>
   15      new Map([...a].filter(([key]) => b.has(key)))
   16  
   ..
   19   * @returns {(a: Set<any>) => Set<any>}
   20   */
   21: export const intersectSets = b => a => new Set([...a].filter(val => b.has(val)))
   22  
   23  /**

/Users/oliversauter/GitHub/Memex/src/util/notification-types.ts:
    2  
    3  // Chrome allows some extra notif opts that the standard web ext API doesn't support
    4: export interface NotifOpts extends Notifications.CreateNotificationOptions {
    5      [chromeKeys: string]: any
    6:     requireInteraction?: boolean
    7  }
    8  
    .
   14  export type NotificationClickListener = (id: string) => void
   15  
   16: export interface NotificationCreator {
   17      create: CreateNotification
   18      setupListeners: () => void

/Users/oliversauter/GitHub/Memex/src/util/notifications.test.ts:
    4      message: 'test',
    5      title: 'test',
    6:     requireInteraction: true,
    7      ...Creator.DEF_OPTS,
    8  }
    9  
   10: const { requireInteraction, ...NOTIF_1_FF } = NOTIF_1
   11  
   12  class MockNotifsAPI {

/Users/oliversauter/GitHub/Memex/src/util/notifications.ts:
   12  export const DEF_TYPE = 'basic'
   13  
   14: export interface Props {
   15      notificationsAPI: Notifications.Static
   16      browserIsChrome: () => boolean
   ..
   23          type: DEF_TYPE,
   24          iconUrl: DEF_ICON_URL,
   25:         requireInteraction: true,
   26      }
   27  

/Users/oliversauter/GitHub/Memex/src/util/ordered-group-by.js:
    3  /**
    4   * Does a group by on a collection, while maintaining the collection's sort order by outputting
    5:  * a nested array. Interface tries to mirror lodash's fp groupBy function, however iteratee assumes
    6   * function type to simplify code (lodash also accepts strings via _.property fn).
    7   *

/Users/oliversauter/GitHub/Memex/src/util/promises.ts:
    1: export interface Resolvable<T> extends Promise<T> {
    2      resolve: (t: T) => void
    3      reject: (e: any) => void

/Users/oliversauter/GitHub/Memex/src/util/remote-functions-background.ts:
    1  import { runInBackground } from 'src/util/webextensionRPC'
    2  import { NotificationCreator } from 'src/util/notification-types'
    3: import { BookmarksInterface } from 'src/bookmarks/background/types'
    4: import { AuthRemoteFunctionsInterface } from 'src/authentication/background/types'
    5  import { SubscriptionsService } from '@worldbrain/memex-common/lib/subscriptions/types'
    6: import { PublicSyncInterface } from 'src/sync/background/types'
    7: import { FeaturesInterface } from 'src/feature-opt-in/background/feature-opt-ins'
    8  
    9: export interface RemoteFunctionImplementations {
   10      notifications: NotificationCreator
   11:     bookmarks: BookmarksInterface
   12:     auth: AuthRemoteFunctionsInterface
   13      subscription: SubscriptionsService
   14:     sync: PublicSyncInterface
   15:     features: FeaturesInterface
   16  }
   17  
   ..
   20  export const remoteFunctions: RemoteFunctionImplementations = {
   21      notifications: runInBackground<NotificationCreator>(),
   22:     bookmarks: runInBackground<BookmarksInterface>(),
   23:     auth: runInBackground<AuthRemoteFunctionsInterface>(),
   24      subscription: runInBackground<SubscriptionsService>(),
   25:     sync: runInBackground<PublicSyncInterface>(),
   26:     features: runInBackground<FeaturesInterface>(),
   27  }
   28  

/Users/oliversauter/GitHub/Memex/src/util/storage-changes.ts:
    1  import { Storage } from 'webextension-polyfill-ts'
    2  
    3: export interface StorageChanges {
    4      [key: string]: Storage.StorageChange
    5  }
    .
    8  export type StorageKeyListener = (vals: Storage.StorageChange) => void
    9  
   10: export interface Props {
   11      storage: Storage.Static
   12  }
   ..
   34  
   35      /**
   36:      * Master event listener; delegates control to appropriate internal storage key listeners
   37       * based on the changes made.
   38       */

/Users/oliversauter/GitHub/Memex/src/util/storage.ts:
    2  import { BackupStatusType } from 'src/backup-restore/types'
    3  
    4: export interface LocalStorageTypes {
    5      'backup-status': BackupStatusType
    6  }

/Users/oliversauter/GitHub/Memex/src/util/tab-events.js:
   20  ]
   21  
   22: // Resolve if or when the page DOM is loaded (document.readyState==='interactive')
   23  // Rejects if it is closed before that.
   24  // XXX Needs host permission on the tab
   ..
   26      return new Promise((resolve, reject) => {
   27          // Using executeScript at document_end here as a workaround, as there is
   28:         // no tab.status==='interactive'; it is either 'loading' or 'complete'.
   29          browser.tabs
   30              .executeScript(tabId, {

/Users/oliversauter/GitHub/Memex/src/util/types.ts:
    2  
    3  /**
    4:  * Type interface for MapDispatchToProps using Thunks in actions.
    5   */
    6  export type MapDispatchToProps<DispatchProps, OwnProps, RootState> = (

/Users/oliversauter/GitHub/Memex/src/util/ui-logic.ts:
    6      args: EventProcessorArgs<Dependencies>,
    7  ) => EventProcessorResult
    8: export interface EventProcessorArgs<Dependencies> {
    9      state: any
   10      event: { type: string; [key: string]: any }
   11      dependencies: Dependencies
   12  }
   13: export interface EventProcessorResult {
   14      updateState?: StateUpdates
   15      dispatch?: EventDispatch | EventDispatch[]
   16      actions?: EventDispatch | EventDispatch[]
   17  }
   18: export interface StateUpdates {
   19      [key: string]: any
   20  }
   21: export interface EventDispatch {
   22      type: string
   23      args?: { [key: string]: any }
   24  }
   25: export interface ActionMap {
   26      [key: string]: () => any
   27  }

/Users/oliversauter/GitHub/Memex/src/util/webextensionRPC.test.ts:
   61      //     const remoteFunc = remoteFunction('remoteFunc', { tabId: 1 })
   62      //     await expect(remoteFunc()).rejects.toMatchObject({
   63:     //         message: 'RPC got a response from an interfering listener.',
   64      //     })
   65      // })

/Users/oliversauter/GitHub/Memex/src/util/webextensionRPC.ts:
   50  
   51  // The extra options available when calling a remote function
   52: interface RPCOpts {
   53      tabId?: number
   54  }
   55  
   56: // runInBackground and runInTab create a Proxy object that looks like the real interface but actually calls remote functions
   57  //
   58  // When the Proxy is asked for a property (such as a method)
   59: // return a function that executes the requested method over the RPC interface
   60  //
   61  // Example Usage:
   62: //      interface AnalyticsInterface { trackEvent({}) => any }
   63: //      const analytics = runInBackground<AnalyticsInterface>()
   64  //      analytics.trackEvent(...)
   65  
   ..
  128          if (!response || response[RPC_RESPONSE] !== RPC_RESPONSE) {
  129              throw new RpcError(
  130:                 `RPC got a response from an interfering listener. Wanted ${RPC_RESPONSE} but got ${response[RPC_RESPONSE]}. Response:${response}`,
  131              )
  132          }
  ...
  283  }
  284  
  285: export interface RemoteEventEmitter<T> {
  286      emit: (eventName: keyof T, data: any) => Promise<any>
  287  }
  ...
  318  
  319  // Statically defined types for now, move this to a registry
  320: interface RemoteEvents {
  321      auth: AuthRemoteEvents
  322      sync: InitialSyncEvents

/Users/oliversauter/GitHub/Memex/src/util/tests/browser-storage.ts:
    1  import { Browser } from 'webextension-polyfill-ts'
    2  
    3: export interface LimitedBrowserStorage {
    4      set: Browser['storage']['local']['set']
    5      get: Browser['storage']['local']['get']
    .
    9  type PrimitiveArray = Primitive[]
   10  type EntryValue = Primitive | PrimitiveArray
   11: interface EntryValueMap {
   12      [key: string]: EntryValue
   13  }

/Users/oliversauter/GitHub/Memex/src/util/tests/sync-patterns.test.ts:
    3  
    4  describe('Sync pattern generator', () => {
    5:     it('should generate interesting combinations for 2 devices with 3 steps', () => {
    6          expect(Array.from(generateSyncPatterns(['A', 'B'], 3))).toEqual([
    7              ['A', 'B', 'A'],
    .
   10      })
   11  
   12:     it('should generate interesting combinations for 2 devices with 4 steps', () => {
   13          expect(Array.from(generateSyncPatterns(['A', 'B'], 4))).toEqual([
   14              ['A', 'A', 'B', 'A'],
   ..
   19      })
   20  
   21:     it('should generate interesting combinations for 2 devices with 5 steps', () => {
   22          expect(Array.from(generateSyncPatterns(['A', 'B'], 5))).toEqual([
   23              ['A', 'A', 'A', 'B', 'A'],
   ..
   32      })
   33  
   34:     it('should generate interesting combinations for 2 devices with 6 steps', () => {
   35          expect(Array.from(generateSyncPatterns(['A', 'B'], 6))).toEqual([
   36              ['A', 'A', 'A', 'A', 'B', 'A'],

1200 matches across 467 files


Searching 1035 files for "@import url('/fonts/Inter/inter.css');"

/Users/oliversauter/GitHub/Memex/src/options/base.css:
    3  
    4  @import url('/fonts/Poppins/poppins.css');
    5: @import url('/fonts/Inter/inter.css');
    6  
    7  .root {

/Users/oliversauter/GitHub/Memex/src/popup/blacklist-button/components/BlacklistConfirm.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  @value colors: '../../../common-ui/colors.css';

/Users/oliversauter/GitHub/Memex/src/search-injection/components/Results.css:
    1: @import url('/fonts/Inter/inter.css');
    2  @import url('/fonts/Poppins/poppins.css');
    3  

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/annotation-box/annotation-box-container.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .container {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/comment-box/components/comment-box-form.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .textArea {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/ribbon/components/ribbon.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  :host * {

/Users/oliversauter/GitHub/Memex/src/sidebar-overlay/sidebar/components/sidebar.css:
    1: @import url('/fonts/Inter/inter.css');
    2  
    3  .sidebar * {

7 matches across 7 files
